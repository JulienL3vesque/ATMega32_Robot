
ELE542_Proto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00003610  000036a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016b  0080018e  0080018e  000037d2  2**0
                  ALLOC
  3 .debug_aranges 00000320  00000000  00000000  000037d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005bb  00000000  00000000  00003af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038c7  00000000  00000000  000040ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d30  00000000  00000000  00007974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026d4  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  0000bd78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000090b  00000000  00000000  0000c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a56  00000000  00000000  0000cb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000d5c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 08 	call	0x115c	; 0x115c <main>
      8a:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_ADC>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permettant de faire l'initialisation du module de l'ADC */
void init_ADC(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/* Configure le 'prescaler' à 16 afin d'avoir une fréquence de 125 kHz pour l'ADC et active les interruptions */
    ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(0<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      9a:	e6 e2       	ldi	r30, 0x26	; 38
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	8f ee       	ldi	r24, 0xEF	; 239
      a0:	80 83       	st	Z, r24

	/* Configure l'ADC en mode 'free-running' */
    SFIOR = (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0)|(SFIOR&0x0F);
      a2:	a0 e5       	ldi	r26, 0x50	; 80
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e0 e5       	ldi	r30, 0x50	; 80
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	8f 70       	andi	r24, 0x0F	; 15
      ae:	8c 93       	st	X, r24

	/* Initialise l'ADMUX à zéro */
	ADMUX = 0;
      b0:	e7 e2       	ldi	r30, 0x27	; 39
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	10 82       	st	Z, r1

	/* Remise à zéro des variables */
	i = 0;
      b6:	10 92 8f 01 	sts	0x018F, r1
      ba:	10 92 8e 01 	sts	0x018E, r1
	j = 0;
      be:	10 92 91 01 	sts	0x0191, r1
      c2:	10 92 90 01 	sts	0x0190, r1
	totalG = 0;
      c6:	10 92 92 01 	sts	0x0192, r1
      ca:	10 92 93 01 	sts	0x0193, r1
      ce:	10 92 94 01 	sts	0x0194, r1
      d2:	10 92 95 01 	sts	0x0195, r1
	totalD = 0;
      d6:	10 92 96 01 	sts	0x0196, r1
      da:	10 92 97 01 	sts	0x0197, r1
      de:	10 92 98 01 	sts	0x0198, r1
      e2:	10 92 99 01 	sts	0x0199, r1
}
      e6:	cf 91       	pop	r28
      e8:	df 91       	pop	r29
      ea:	08 95       	ret

000000ec <__vector_16>:

/*Fonction permettant de faire la lecture du calcul de l'ADC */
ISR(ADC_vect)
{
      ec:	1f 92       	push	r1
      ee:	0f 92       	push	r0
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	0f 92       	push	r0
      f4:	11 24       	eor	r1, r1
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	2f 93       	push	r18
     100:	3f 93       	push	r19
     102:	4f 93       	push	r20
     104:	5f 93       	push	r21
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	ef 93       	push	r30
     110:	ff 93       	push	r31
     112:	df 93       	push	r29
     114:	cf 93       	push	r28
     116:	00 d0       	rcall	.+0      	; 0x118 <__vector_16+0x2c>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
	/* Déclarations de la variable Valeur, pour cela on concatène deux registres ADCL et ADCH */
	s16 Valeur;
	Valeur = (u16)ADCL;
     11c:	e4 e2       	ldi	r30, 0x24	; 36
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 2f       	mov	r24, r24
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	89 83       	std	Y+1, r24	; 0x01
	Valeur |= (u16)ADCH<<8;
     12a:	e5 e2       	ldi	r30, 0x25	; 37
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	88 2f       	mov	r24, r24
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	38 2f       	mov	r19, r24
     136:	22 27       	eor	r18, r18
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	9a 81       	ldd	r25, Y+2	; 0x02
     13c:	82 2b       	or	r24, r18
     13e:	93 2b       	or	r25, r19
     140:	9a 83       	std	Y+2, r25	; 0x02
     142:	89 83       	std	Y+1, r24	; 0x01

	if (ADMUX == 0x00)	 			/* Si l'ADMUX égal à 0, c'est le canal 0 */
     144:	e7 e2       	ldi	r30, 0x27	; 39
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	88 23       	and	r24, r24
     14c:	09 f0       	breq	.+2      	; 0x150 <__vector_16+0x64>
     14e:	5d c0       	rjmp	.+186    	; 0x20a <__vector_16+0x11e>
	{

		/* Récupération du bit de direction et le resultat du calcul de l'ADC (10 bits) et on le met dans la variable totalD */
		ADMUX |= (1<<MUX0);         /* Changement de canal, MUX0 = 1 */
     150:	a7 e2       	ldi	r26, 0x27	; 39
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	e7 e2       	ldi	r30, 0x27	; 39
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	81 60       	ori	r24, 0x01	; 1
     15c:	8c 93       	st	X, r24


		if((PINA&0x08)==0)          /* Si le bit de DIR Droite (PortA Pin3) est a zero, direction positive */
     15e:	e9 e3       	ldi	r30, 0x39	; 57
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	88 2f       	mov	r24, r24
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	88 70       	andi	r24, 0x08	; 8
     16a:	90 70       	andi	r25, 0x00	; 0
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	29 f5       	brne	.+74     	; 0x1ba <__vector_16+0xce>
		{
			totalD += Valeur;       /* Accumulation des valeurs reçues de l'ADC avec le bit de direction positif*/
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	9c 01       	movw	r18, r24
     176:	44 27       	eor	r20, r20
     178:	37 fd       	sbrc	r19, 7
     17a:	40 95       	com	r20
     17c:	54 2f       	mov	r21, r20
     17e:	80 91 96 01 	lds	r24, 0x0196
     182:	90 91 97 01 	lds	r25, 0x0197
     186:	a0 91 98 01 	lds	r26, 0x0198
     18a:	b0 91 99 01 	lds	r27, 0x0199
     18e:	82 0f       	add	r24, r18
     190:	93 1f       	adc	r25, r19
     192:	a4 1f       	adc	r26, r20
     194:	b5 1f       	adc	r27, r21
     196:	80 93 96 01 	sts	0x0196, r24
     19a:	90 93 97 01 	sts	0x0197, r25
     19e:	a0 93 98 01 	sts	0x0198, r26
     1a2:	b0 93 99 01 	sts	0x0199, r27
			j++;
     1a6:	80 91 90 01 	lds	r24, 0x0190
     1aa:	90 91 91 01 	lds	r25, 0x0191
     1ae:	01 96       	adiw	r24, 0x01	; 1
     1b0:	90 93 91 01 	sts	0x0191, r25
     1b4:	80 93 90 01 	sts	0x0190, r24
     1b8:	84 c0       	rjmp	.+264    	; 0x2c2 <__vector_16+0x1d6>
		}
		else                        /* Si le bit de DIR Droite (PortA Pin3) est a un, direction negative */
		{
			totalD -= Valeur;       /* Accumulation des valeurs reçues de l'ADC avec le bit de direction negatif*/
     1ba:	20 91 96 01 	lds	r18, 0x0196
     1be:	30 91 97 01 	lds	r19, 0x0197
     1c2:	40 91 98 01 	lds	r20, 0x0198
     1c6:	50 91 99 01 	lds	r21, 0x0199
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	aa 27       	eor	r26, r26
     1d0:	97 fd       	sbrc	r25, 7
     1d2:	a0 95       	com	r26
     1d4:	ba 2f       	mov	r27, r26
     1d6:	79 01       	movw	r14, r18
     1d8:	8a 01       	movw	r16, r20
     1da:	e8 1a       	sub	r14, r24
     1dc:	f9 0a       	sbc	r15, r25
     1de:	0a 0b       	sbc	r16, r26
     1e0:	1b 0b       	sbc	r17, r27
     1e2:	d8 01       	movw	r26, r16
     1e4:	c7 01       	movw	r24, r14
     1e6:	80 93 96 01 	sts	0x0196, r24
     1ea:	90 93 97 01 	sts	0x0197, r25
     1ee:	a0 93 98 01 	sts	0x0198, r26
     1f2:	b0 93 99 01 	sts	0x0199, r27
			j++;
     1f6:	80 91 90 01 	lds	r24, 0x0190
     1fa:	90 91 91 01 	lds	r25, 0x0191
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	90 93 91 01 	sts	0x0191, r25
     204:	80 93 90 01 	sts	0x0190, r24
     208:	5c c0       	rjmp	.+184    	; 0x2c2 <__vector_16+0x1d6>
		}
	}
	else                            /* Si l'ADMUX égal à 1, c'est le canal 1 */
	{
		/* On prend le bit de direction et le resultat du calcul de l'ADC (10 bits) et on le met dans la variable totalG */
		ADMUX &= ~(1<<MUX0);        /* Changement de canal, MUX0 = 0 */
     20a:	a7 e2       	ldi	r26, 0x27	; 39
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	e7 e2       	ldi	r30, 0x27	; 39
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8e 7f       	andi	r24, 0xFE	; 254
     216:	8c 93       	st	X, r24


		if((PINA&0x04)==0)          /* Si le bit de DIR Gauche (PortA Pin2) est a zero, direction positive */
     218:	e9 e3       	ldi	r30, 0x39	; 57
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	84 70       	andi	r24, 0x04	; 4
     224:	90 70       	andi	r25, 0x00	; 0
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	29 f5       	brne	.+74     	; 0x274 <__vector_16+0x188>
		{
			totalG += Valeur;       /* Accumulation des valeurs reçues de l'ADC avec le bit de direction positif*/
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	9c 01       	movw	r18, r24
     230:	44 27       	eor	r20, r20
     232:	37 fd       	sbrc	r19, 7
     234:	40 95       	com	r20
     236:	54 2f       	mov	r21, r20
     238:	80 91 92 01 	lds	r24, 0x0192
     23c:	90 91 93 01 	lds	r25, 0x0193
     240:	a0 91 94 01 	lds	r26, 0x0194
     244:	b0 91 95 01 	lds	r27, 0x0195
     248:	82 0f       	add	r24, r18
     24a:	93 1f       	adc	r25, r19
     24c:	a4 1f       	adc	r26, r20
     24e:	b5 1f       	adc	r27, r21
     250:	80 93 92 01 	sts	0x0192, r24
     254:	90 93 93 01 	sts	0x0193, r25
     258:	a0 93 94 01 	sts	0x0194, r26
     25c:	b0 93 95 01 	sts	0x0195, r27
			i++;
     260:	80 91 8e 01 	lds	r24, 0x018E
     264:	90 91 8f 01 	lds	r25, 0x018F
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	90 93 8f 01 	sts	0x018F, r25
     26e:	80 93 8e 01 	sts	0x018E, r24
     272:	27 c0       	rjmp	.+78     	; 0x2c2 <__vector_16+0x1d6>
		}
		else                        /* Si le bit de DIR Gauche (PortA Pin2) est a un, direction negative */
		{
			totalG -= Valeur;       /* Accumulation des valeurs reçues de l'ADC avec le bit de direction negatif*/
     274:	20 91 92 01 	lds	r18, 0x0192
     278:	30 91 93 01 	lds	r19, 0x0193
     27c:	40 91 94 01 	lds	r20, 0x0194
     280:	50 91 95 01 	lds	r21, 0x0195
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	aa 27       	eor	r26, r26
     28a:	97 fd       	sbrc	r25, 7
     28c:	a0 95       	com	r26
     28e:	ba 2f       	mov	r27, r26
     290:	79 01       	movw	r14, r18
     292:	8a 01       	movw	r16, r20
     294:	e8 1a       	sub	r14, r24
     296:	f9 0a       	sbc	r15, r25
     298:	0a 0b       	sbc	r16, r26
     29a:	1b 0b       	sbc	r17, r27
     29c:	d8 01       	movw	r26, r16
     29e:	c7 01       	movw	r24, r14
     2a0:	80 93 92 01 	sts	0x0192, r24
     2a4:	90 93 93 01 	sts	0x0193, r25
     2a8:	a0 93 94 01 	sts	0x0194, r26
     2ac:	b0 93 95 01 	sts	0x0195, r27
			i++;
     2b0:	80 91 8e 01 	lds	r24, 0x018E
     2b4:	90 91 8f 01 	lds	r25, 0x018F
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	90 93 8f 01 	sts	0x018F, r25
     2be:	80 93 8e 01 	sts	0x018E, r24
		}
	}
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	ff 91       	pop	r31
     2cc:	ef 91       	pop	r30
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	5f 91       	pop	r21
     2d8:	4f 91       	pop	r20
     2da:	3f 91       	pop	r19
     2dc:	2f 91       	pop	r18
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <calcul_moyenne>:

/*	Fonction permettant de faire le calcul de la moyenne des valeurs accumulées par l'ADC */
void calcul_moyenne()
{
     2f0:	df 93       	push	r29
     2f2:	cf 93       	push	r28
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	2c 97       	sbiw	r28, 0x0c	; 12
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
	s16 i_temp;
	s16 j_temp;
	s32 totalG_temp;
	s32 totalD_temp;

	cli();								/* Arrêt des interruptions	*/
     304:	f8 94       	cli
	i_temp = i;							/* Valeur de 'i' emmagasinée dans la variable temporaire 'i_temp'*/
     306:	80 91 8e 01 	lds	r24, 0x018E
     30a:	90 91 8f 01 	lds	r25, 0x018F
     30e:	9c 87       	std	Y+12, r25	; 0x0c
     310:	8b 87       	std	Y+11, r24	; 0x0b
	j_temp = j;							/* Valeur de 'j' emmagasinée dans la variable temporaire 'j_temp'*/
     312:	80 91 90 01 	lds	r24, 0x0190
     316:	90 91 91 01 	lds	r25, 0x0191
     31a:	9a 87       	std	Y+10, r25	; 0x0a
     31c:	89 87       	std	Y+9, r24	; 0x09
	totalG_temp = totalG;				/* Valeur total de gauche emmagasinée dans la variable temporaire 'totalG_temp'*/
     31e:	80 91 92 01 	lds	r24, 0x0192
     322:	90 91 93 01 	lds	r25, 0x0193
     326:	a0 91 94 01 	lds	r26, 0x0194
     32a:	b0 91 95 01 	lds	r27, 0x0195
     32e:	8d 83       	std	Y+5, r24	; 0x05
     330:	9e 83       	std	Y+6, r25	; 0x06
     332:	af 83       	std	Y+7, r26	; 0x07
     334:	b8 87       	std	Y+8, r27	; 0x08
	totalD_temp = totalD;				/* Valeur total de droite emmagasinée dans la variable temporaire 'totalD_temp'*/
     336:	80 91 96 01 	lds	r24, 0x0196
     33a:	90 91 97 01 	lds	r25, 0x0197
     33e:	a0 91 98 01 	lds	r26, 0x0198
     342:	b0 91 99 01 	lds	r27, 0x0199
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	ab 83       	std	Y+3, r26	; 0x03
     34c:	bc 83       	std	Y+4, r27	; 0x04

	/* Remise à zéro des variables utilisées */
	i = 0;
     34e:	10 92 8f 01 	sts	0x018F, r1
     352:	10 92 8e 01 	sts	0x018E, r1
	j = 0;
     356:	10 92 91 01 	sts	0x0191, r1
     35a:	10 92 90 01 	sts	0x0190, r1
	totalG = 0;
     35e:	10 92 92 01 	sts	0x0192, r1
     362:	10 92 93 01 	sts	0x0193, r1
     366:	10 92 94 01 	sts	0x0194, r1
     36a:	10 92 95 01 	sts	0x0195, r1
	totalD = 0;
     36e:	10 92 96 01 	sts	0x0196, r1
     372:	10 92 97 01 	sts	0x0197, r1
     376:	10 92 98 01 	sts	0x0198, r1
     37a:	10 92 99 01 	sts	0x0199, r1
	sei();								/* Redémarrage des interruptions */
     37e:	78 94       	sei

	Moyenne_G = totalG_temp/(i_temp);		/* Moyennage des valeurs de gauche */
     380:	8b 85       	ldd	r24, Y+11	; 0x0b
     382:	9c 85       	ldd	r25, Y+12	; 0x0c
     384:	9c 01       	movw	r18, r24
     386:	44 27       	eor	r20, r20
     388:	37 fd       	sbrc	r19, 7
     38a:	40 95       	com	r20
     38c:	54 2f       	mov	r21, r20
     38e:	8d 81       	ldd	r24, Y+5	; 0x05
     390:	9e 81       	ldd	r25, Y+6	; 0x06
     392:	af 81       	ldd	r26, Y+7	; 0x07
     394:	b8 85       	ldd	r27, Y+8	; 0x08
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__divmodsi4>
     39e:	da 01       	movw	r26, r20
     3a0:	c9 01       	movw	r24, r18
     3a2:	80 93 f1 02 	sts	0x02F1, r24
     3a6:	90 93 f2 02 	sts	0x02F2, r25
     3aa:	a0 93 f3 02 	sts	0x02F3, r26
     3ae:	b0 93 f4 02 	sts	0x02F4, r27

	Moyenne_D = totalD_temp/(j_temp);		/* Moyennage des valeurs de droite */
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	9c 01       	movw	r18, r24
     3b8:	44 27       	eor	r20, r20
     3ba:	37 fd       	sbrc	r19, 7
     3bc:	40 95       	com	r20
     3be:	54 2f       	mov	r21, r20
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	9a 81       	ldd	r25, Y+2	; 0x02
     3c4:	ab 81       	ldd	r26, Y+3	; 0x03
     3c6:	bc 81       	ldd	r27, Y+4	; 0x04
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__divmodsi4>
     3d0:	da 01       	movw	r26, r20
     3d2:	c9 01       	movw	r24, r18
     3d4:	80 93 ed 02 	sts	0x02ED, r24
     3d8:	90 93 ee 02 	sts	0x02EE, r25
     3dc:	a0 93 ef 02 	sts	0x02EF, r26
     3e0:	b0 93 f0 02 	sts	0x02F0, r27

}
     3e4:	2c 96       	adiw	r28, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	cf 91       	pop	r28
     3f2:	df 91       	pop	r29
     3f4:	08 95       	ret

000003f6 <reinitialiser_moyenne>:

/* Fonction permettant de faire la réinitialisation de la moyenne */
void reinitialiser_moyenne()
{
     3f6:	df 93       	push	r29
     3f8:	cf 93       	push	r28
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
	cli();			/* Arrêt des interruptions	*/
     3fe:	f8 94       	cli
	i = 0;
     400:	10 92 8f 01 	sts	0x018F, r1
     404:	10 92 8e 01 	sts	0x018E, r1
	j = 0;
     408:	10 92 91 01 	sts	0x0191, r1
     40c:	10 92 90 01 	sts	0x0190, r1
	totalG = 0;
     410:	10 92 92 01 	sts	0x0192, r1
     414:	10 92 93 01 	sts	0x0193, r1
     418:	10 92 94 01 	sts	0x0194, r1
     41c:	10 92 95 01 	sts	0x0195, r1
	totalD = 0;
     420:	10 92 96 01 	sts	0x0196, r1
     424:	10 92 97 01 	sts	0x0197, r1
     428:	10 92 98 01 	sts	0x0198, r1
     42c:	10 92 99 01 	sts	0x0199, r1
	sei();			/* Redémarrage des interruptions */
     430:	78 94       	sei
}
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <attendre>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permettant d'attendre un certain temps */
static void attendre(u08 compteur)
{
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	00 d0       	rcall	.+0      	; 0x43e <attendre+0x6>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	04 c0       	rjmp	.+8      	; 0x44e <attendre+0x16>
	while (compteur--)
	{
		while(!read_flag())
     446:	0e 94 42 10 	call	0x2084	; 0x2084 <read_flag>
     44a:	88 23       	and	r24, r24
     44c:	e1 f3       	breq	.-8      	; 0x446 <attendre+0xe>
/****************************************************************************************************/

/* Fonction permettant d'attendre un certain temps */
static void attendre(u08 compteur)
{
	while (compteur--)
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	8a 83       	std	Y+2, r24	; 0x02
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	88 23       	and	r24, r24
     456:	11 f0       	breq	.+4      	; 0x45c <attendre+0x24>
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	8a 83       	std	Y+2, r24	; 0x02
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	99 81       	ldd	r25, Y+1	; 0x01
     460:	91 50       	subi	r25, 0x01	; 1
     462:	99 83       	std	Y+1, r25	; 0x01
     464:	88 23       	and	r24, r24
     466:	79 f7       	brne	.-34     	; 0x446 <attendre+0xe>
		while(!read_flag())
		{

		}
	}
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <executer_calibration>:

/* Fonction permettant de faire l'exécution de la calibration pour VmaxG plus et moins, VmaxD plus et moins, VminG plus et moins, VminD plus et moins */
void executer_calibration(void)
{
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	/* --------------------- Vmax Plus ----------------------*/
	PORTD = 0x44|(PORTD&0x33);			/* Bits DIR1 à 1 et DIR2 à 0 */
     482:	a2 e3       	ldi	r26, 0x32	; 50
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e2 e3       	ldi	r30, 0x32	; 50
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	83 73       	andi	r24, 0x33	; 51
     48e:	84 64       	ori	r24, 0x44	; 68
     490:	8c 93       	st	X, r24
	PORTA = 0x10|(PORTA&0xEF);			/* Bit de CAL à 1 */
     492:	ab e3       	ldi	r26, 0x3B	; 59
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	eb e3       	ldi	r30, 0x3B	; 59
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	80 61       	ori	r24, 0x10	; 16
     49e:	8c 93       	st	X, r24
	attendre(50); 						/* Attendre 50*5=250ms */
     4a0:	82 e3       	ldi	r24, 0x32	; 50
     4a2:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	reinitialiser_moyenne(); 			/* Réinitialiser les valeurs lues par l'ADC */
     4a6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <reinitialiser_moyenne>
	/* Atteinte du régime permanent */
	attendre(1); 						/* Attendre 1*5=5ms */
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	calcul_moyenne();					/* Appel de la fonction du calcul de la moyenne */
     4b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <calcul_moyenne>
	VmaxG_plus = Moyenne_G;				/* Vmax gauche plus est égal à la moyenne de gauche */
     4b4:	80 91 f1 02 	lds	r24, 0x02F1
     4b8:	90 91 f2 02 	lds	r25, 0x02F2
     4bc:	a0 91 f3 02 	lds	r26, 0x02F3
     4c0:	b0 91 f4 02 	lds	r27, 0x02F4
     4c4:	90 93 9b 01 	sts	0x019B, r25
     4c8:	80 93 9a 01 	sts	0x019A, r24
	VmaxD_plus = Moyenne_D;				/* Vmax droite plus est égal à la moyenne de droite */
     4cc:	80 91 ed 02 	lds	r24, 0x02ED
     4d0:	90 91 ee 02 	lds	r25, 0x02EE
     4d4:	a0 91 ef 02 	lds	r26, 0x02EF
     4d8:	b0 91 f0 02 	lds	r27, 0x02F0
     4dc:	90 93 a3 01 	sts	0x01A3, r25
     4e0:	80 93 a2 01 	sts	0x01A2, r24

	/* --------------------- Vmax Moins ----------------------*/
	PORTD = 0x88|(PORTD&0x33);			/* Bits DIR1 à 0 et DIR2 à 1 */
     4e4:	a2 e3       	ldi	r26, 0x32	; 50
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	e2 e3       	ldi	r30, 0x32	; 50
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	83 73       	andi	r24, 0x33	; 51
     4f0:	88 68       	ori	r24, 0x88	; 136
     4f2:	8c 93       	st	X, r24
	PORTA = 0x10|(PORTA&0xEF);			/* Bit de CAL à 1 */
     4f4:	ab e3       	ldi	r26, 0x3B	; 59
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	eb e3       	ldi	r30, 0x3B	; 59
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	80 61       	ori	r24, 0x10	; 16
     500:	8c 93       	st	X, r24
	attendre(50); 						/* Attendre 50*5=250ms */
     502:	82 e3       	ldi	r24, 0x32	; 50
     504:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	reinitialiser_moyenne(); 			/* Réinitialiser les valeurs lues par l'ADC */
     508:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <reinitialiser_moyenne>
	/* Atteinte du régime permanent */
	attendre(1); 						/* Attendre 1*5=5ms */
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	calcul_moyenne();					/* Appel de la fonction du calcul de la moyenne */
     512:	0e 94 78 01 	call	0x2f0	; 0x2f0 <calcul_moyenne>
	VmaxG_moins = Moyenne_G;			/* Vmax gauche moins est égal à la moyenne de gauche */
     516:	80 91 f1 02 	lds	r24, 0x02F1
     51a:	90 91 f2 02 	lds	r25, 0x02F2
     51e:	a0 91 f3 02 	lds	r26, 0x02F3
     522:	b0 91 f4 02 	lds	r27, 0x02F4
     526:	90 93 9f 01 	sts	0x019F, r25
     52a:	80 93 9e 01 	sts	0x019E, r24
	VmaxD_moins = Moyenne_D;			/* Vmax droit moins est égal à la moyenne de gauche */
     52e:	80 91 ed 02 	lds	r24, 0x02ED
     532:	90 91 ee 02 	lds	r25, 0x02EE
     536:	a0 91 ef 02 	lds	r26, 0x02EF
     53a:	b0 91 f0 02 	lds	r27, 0x02F0
     53e:	90 93 a7 01 	sts	0x01A7, r25
     542:	80 93 a6 01 	sts	0x01A6, r24

	/* --------------------- Vmin Plus ----------------------*/
	PORTD = 0x44|(PORTD&0x33);			/* Bits DIR1 à 1 et DIR2 à 0 */
     546:	a2 e3       	ldi	r26, 0x32	; 50
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	e2 e3       	ldi	r30, 0x32	; 50
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	83 73       	andi	r24, 0x33	; 51
     552:	84 64       	ori	r24, 0x44	; 68
     554:	8c 93       	st	X, r24
	PORTA = 0x00|(PORTA&0xEF);			/* Bit de CAL à 0 */
     556:	ab e3       	ldi	r26, 0x3B	; 59
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	eb e3       	ldi	r30, 0x3B	; 59
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	8f 7e       	andi	r24, 0xEF	; 239
     562:	8c 93       	st	X, r24
	attendre(50); 						/* Attendre 50*5=250ms */
     564:	82 e3       	ldi	r24, 0x32	; 50
     566:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	reinitialiser_moyenne(); 			/* Réinitialiser les valeurs lues par l'ADC */
     56a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <reinitialiser_moyenne>
	/* Atteinte du régime permanent */
	attendre(1); 						/* Attendre 1*5=5ms */
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	calcul_moyenne();					/* Appel de la fonction du calcul de la moyenne */
     574:	0e 94 78 01 	call	0x2f0	; 0x2f0 <calcul_moyenne>
	VminG_plus = Moyenne_G;				/* Vmin gauche plus est égal à la moyenne de gauche */
     578:	80 91 f1 02 	lds	r24, 0x02F1
     57c:	90 91 f2 02 	lds	r25, 0x02F2
     580:	a0 91 f3 02 	lds	r26, 0x02F3
     584:	b0 91 f4 02 	lds	r27, 0x02F4
     588:	90 93 9d 01 	sts	0x019D, r25
     58c:	80 93 9c 01 	sts	0x019C, r24
	VminD_plus = Moyenne_D;				/* Vmin droit plus est égal à la moyenne de gauche */
     590:	80 91 ed 02 	lds	r24, 0x02ED
     594:	90 91 ee 02 	lds	r25, 0x02EE
     598:	a0 91 ef 02 	lds	r26, 0x02EF
     59c:	b0 91 f0 02 	lds	r27, 0x02F0
     5a0:	90 93 a5 01 	sts	0x01A5, r25
     5a4:	80 93 a4 01 	sts	0x01A4, r24

	/* --------------------- Vmin Moins ----------------------*/
	PORTD = 0x88|(PORTD&0x33);			/* Bits DIR1 à 0 et DIR2 à 1 */
     5a8:	a2 e3       	ldi	r26, 0x32	; 50
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	e2 e3       	ldi	r30, 0x32	; 50
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	83 73       	andi	r24, 0x33	; 51
     5b4:	88 68       	ori	r24, 0x88	; 136
     5b6:	8c 93       	st	X, r24
	PORTA = 0x00|(PORTA&0xEF);			/* Bit de CAL à 0 */
     5b8:	ab e3       	ldi	r26, 0x3B	; 59
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	eb e3       	ldi	r30, 0x3B	; 59
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	8f 7e       	andi	r24, 0xEF	; 239
     5c4:	8c 93       	st	X, r24
	attendre(50); 						/* Attendre 50*5=250ms */
     5c6:	82 e3       	ldi	r24, 0x32	; 50
     5c8:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	reinitialiser_moyenne(); 			/* Réinitialiser les valeurs lues par l'ADC */
     5cc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <reinitialiser_moyenne>
	/* Atteinte du régime permanent */
	attendre(1); 						/* Attendre 1*5=5ms */
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 1c 02 	call	0x438	; 0x438 <attendre>
	calcul_moyenne();
     5d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <calcul_moyenne>
	VminG_moins = Moyenne_G;			/* Vmin gauche moins est égal à la moyenne de gauche */
     5da:	80 91 f1 02 	lds	r24, 0x02F1
     5de:	90 91 f2 02 	lds	r25, 0x02F2
     5e2:	a0 91 f3 02 	lds	r26, 0x02F3
     5e6:	b0 91 f4 02 	lds	r27, 0x02F4
     5ea:	90 93 a1 01 	sts	0x01A1, r25
     5ee:	80 93 a0 01 	sts	0x01A0, r24
	VminD_moins = Moyenne_D;			/* Vmin droit moins est égal à la moyenne de gauche */
     5f2:	80 91 ed 02 	lds	r24, 0x02ED
     5f6:	90 91 ee 02 	lds	r25, 0x02EE
     5fa:	a0 91 ef 02 	lds	r26, 0x02EF
     5fe:	b0 91 f0 02 	lds	r27, 0x02F0
     602:	90 93 a9 01 	sts	0x01A9, r25
     606:	80 93 a8 01 	sts	0x01A8, r24

	/* Précalculs */
	deltaVG_plus = (float)1/((float)VmaxG_plus-(float)VminG_plus);
     60a:	80 91 9a 01 	lds	r24, 0x019A
     60e:	90 91 9b 01 	lds	r25, 0x019B
     612:	aa 27       	eor	r26, r26
     614:	97 fd       	sbrc	r25, 7
     616:	a0 95       	com	r26
     618:	ba 2f       	mov	r27, r26
     61a:	bc 01       	movw	r22, r24
     61c:	cd 01       	movw	r24, r26
     61e:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     622:	7b 01       	movw	r14, r22
     624:	8c 01       	movw	r16, r24
     626:	80 91 9c 01 	lds	r24, 0x019C
     62a:	90 91 9d 01 	lds	r25, 0x019D
     62e:	aa 27       	eor	r26, r26
     630:	97 fd       	sbrc	r25, 7
     632:	a0 95       	com	r26
     634:	ba 2f       	mov	r27, r26
     636:	bc 01       	movw	r22, r24
     638:	cd 01       	movw	r24, r26
     63a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     63e:	9b 01       	movw	r18, r22
     640:	ac 01       	movw	r20, r24
     642:	c8 01       	movw	r24, r16
     644:	b7 01       	movw	r22, r14
     646:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	9c 01       	movw	r18, r24
     650:	ad 01       	movw	r20, r26
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	80 e8       	ldi	r24, 0x80	; 128
     658:	9f e3       	ldi	r25, 0x3F	; 63
     65a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	80 93 ae 01 	sts	0x01AE, r24
     666:	90 93 af 01 	sts	0x01AF, r25
     66a:	a0 93 b0 01 	sts	0x01B0, r26
     66e:	b0 93 b1 01 	sts	0x01B1, r27
	deltaVG_moins = (float)1/((float)VmaxG_moins-(float)VminG_moins);
     672:	80 91 9e 01 	lds	r24, 0x019E
     676:	90 91 9f 01 	lds	r25, 0x019F
     67a:	aa 27       	eor	r26, r26
     67c:	97 fd       	sbrc	r25, 7
     67e:	a0 95       	com	r26
     680:	ba 2f       	mov	r27, r26
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     68a:	7b 01       	movw	r14, r22
     68c:	8c 01       	movw	r16, r24
     68e:	80 91 a0 01 	lds	r24, 0x01A0
     692:	90 91 a1 01 	lds	r25, 0x01A1
     696:	aa 27       	eor	r26, r26
     698:	97 fd       	sbrc	r25, 7
     69a:	a0 95       	com	r26
     69c:	ba 2f       	mov	r27, r26
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	c8 01       	movw	r24, r16
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	9c 01       	movw	r18, r24
     6b8:	ad 01       	movw	r20, r26
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e8       	ldi	r24, 0x80	; 128
     6c0:	9f e3       	ldi	r25, 0x3F	; 63
     6c2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	80 93 aa 01 	sts	0x01AA, r24
     6ce:	90 93 ab 01 	sts	0x01AB, r25
     6d2:	a0 93 ac 01 	sts	0x01AC, r26
     6d6:	b0 93 ad 01 	sts	0x01AD, r27
	deltaVD_plus = (float)1/((float)VmaxD_plus-(float)VminD_plus);
     6da:	80 91 a2 01 	lds	r24, 0x01A2
     6de:	90 91 a3 01 	lds	r25, 0x01A3
     6e2:	aa 27       	eor	r26, r26
     6e4:	97 fd       	sbrc	r25, 7
     6e6:	a0 95       	com	r26
     6e8:	ba 2f       	mov	r27, r26
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     6f2:	7b 01       	movw	r14, r22
     6f4:	8c 01       	movw	r16, r24
     6f6:	80 91 a4 01 	lds	r24, 0x01A4
     6fa:	90 91 a5 01 	lds	r25, 0x01A5
     6fe:	aa 27       	eor	r26, r26
     700:	97 fd       	sbrc	r25, 7
     702:	a0 95       	com	r26
     704:	ba 2f       	mov	r27, r26
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     70e:	9b 01       	movw	r18, r22
     710:	ac 01       	movw	r20, r24
     712:	c8 01       	movw	r24, r16
     714:	b7 01       	movw	r22, r14
     716:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	9c 01       	movw	r18, r24
     720:	ad 01       	movw	r20, r26
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	9f e3       	ldi	r25, 0x3F	; 63
     72a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	80 93 b6 01 	sts	0x01B6, r24
     736:	90 93 b7 01 	sts	0x01B7, r25
     73a:	a0 93 b8 01 	sts	0x01B8, r26
     73e:	b0 93 b9 01 	sts	0x01B9, r27
	deltaVD_moins = (float)1/((float)VmaxD_moins-(float)VminD_moins);
     742:	80 91 a6 01 	lds	r24, 0x01A6
     746:	90 91 a7 01 	lds	r25, 0x01A7
     74a:	aa 27       	eor	r26, r26
     74c:	97 fd       	sbrc	r25, 7
     74e:	a0 95       	com	r26
     750:	ba 2f       	mov	r27, r26
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     75a:	7b 01       	movw	r14, r22
     75c:	8c 01       	movw	r16, r24
     75e:	80 91 a8 01 	lds	r24, 0x01A8
     762:	90 91 a9 01 	lds	r25, 0x01A9
     766:	aa 27       	eor	r26, r26
     768:	97 fd       	sbrc	r25, 7
     76a:	a0 95       	com	r26
     76c:	ba 2f       	mov	r27, r26
     76e:	bc 01       	movw	r22, r24
     770:	cd 01       	movw	r24, r26
     772:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c8 01       	movw	r24, r16
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	9c 01       	movw	r18, r24
     788:	ad 01       	movw	r20, r26
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	9f e3       	ldi	r25, 0x3F	; 63
     792:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	80 93 b2 01 	sts	0x01B2, r24
     79e:	90 93 b3 01 	sts	0x01B3, r25
     7a2:	a0 93 b4 01 	sts	0x01B4, r26
     7a6:	b0 93 b5 01 	sts	0x01B5, r27
}
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <calcul_Vg>:

/* Fonction permettant de faire le calcul de V gauche */
float calcul_Vg(s32 VGmoy)
{
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	28 97       	sbiw	r28, 0x08	; 8
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	6d 83       	std	Y+5, r22	; 0x05
     7d6:	7e 83       	std	Y+6, r23	; 0x06
     7d8:	8f 83       	std	Y+7, r24	; 0x07
     7da:	98 87       	std	Y+8, r25	; 0x08
	float y = 0.0;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	ab 83       	std	Y+3, r26	; 0x03
     7ea:	bc 83       	std	Y+4, r27	; 0x04

	/* Une interpolation est faite afin de trouver le VG réel. De plus, un 'clipping' est fait pour les zones de saturation et les zones mortes */
	if(VGmoy>0)								
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	af 81       	ldd	r26, Y+7	; 0x07
     7f2:	b8 85       	ldd	r27, Y+8	; 0x08
     7f4:	18 16       	cp	r1, r24
     7f6:	19 06       	cpc	r1, r25
     7f8:	1a 06       	cpc	r1, r26
     7fa:	1b 06       	cpc	r1, r27
     7fc:	0c f0       	brlt	.+2      	; 0x800 <calcul_Vg+0x48>
     7fe:	59 c0       	rjmp	.+178    	; 0x8b2 <__stack+0x53>
	{
		y = ((float)VGmoy-(float)VminG_plus)*deltaVG_plus;
     800:	6d 81       	ldd	r22, Y+5	; 0x05
     802:	7e 81       	ldd	r23, Y+6	; 0x06
     804:	8f 81       	ldd	r24, Y+7	; 0x07
     806:	98 85       	ldd	r25, Y+8	; 0x08
     808:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     80c:	7b 01       	movw	r14, r22
     80e:	8c 01       	movw	r16, r24
     810:	80 91 9c 01 	lds	r24, 0x019C
     814:	90 91 9d 01 	lds	r25, 0x019D
     818:	aa 27       	eor	r26, r26
     81a:	97 fd       	sbrc	r25, 7
     81c:	a0 95       	com	r26
     81e:	ba 2f       	mov	r27, r26
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	20 91 ae 01 	lds	r18, 0x01AE
     83c:	30 91 af 01 	lds	r19, 0x01AF
     840:	40 91 b0 01 	lds	r20, 0x01B0
     844:	50 91 b1 01 	lds	r21, 0x01B1
     848:	bc 01       	movw	r22, r24
     84a:	cd 01       	movw	r24, r26
     84c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	89 83       	std	Y+1, r24	; 0x01
     856:	9a 83       	std	Y+2, r25	; 0x02
     858:	ab 83       	std	Y+3, r26	; 0x03
     85a:	bc 83       	std	Y+4, r27	; 0x04

		if(y>1)								
     85c:	69 81       	ldd	r22, Y+1	; 0x01
     85e:	7a 81       	ldd	r23, Y+2	; 0x02
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e8       	ldi	r20, 0x80	; 128
     86a:	5f e3       	ldi	r21, 0x3F	; 63
     86c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
     870:	18 16       	cp	r1, r24
     872:	4c f4       	brge	.+18     	; 0x886 <__stack+0x27>
		{
			y = 1;						
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e8       	ldi	r26, 0x80	; 128
     87a:	bf e3       	ldi	r27, 0x3F	; 63
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	ab 83       	std	Y+3, r26	; 0x03
     882:	bc 83       	std	Y+4, r27	; 0x04
     884:	6d c0       	rjmp	.+218    	; 0x960 <__stack+0x101>
		}
		else if(y<0)						
     886:	69 81       	ldd	r22, Y+1	; 0x01
     888:	7a 81       	ldd	r23, Y+2	; 0x02
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	9c 81       	ldd	r25, Y+4	; 0x04
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
     89a:	88 23       	and	r24, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <__stack+0x41>
     89e:	60 c0       	rjmp	.+192    	; 0x960 <__stack+0x101>
		{
			y = 0;							
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	ab 83       	std	Y+3, r26	; 0x03
     8ae:	bc 83       	std	Y+4, r27	; 0x04
     8b0:	57 c0       	rjmp	.+174    	; 0x960 <__stack+0x101>
		}	
	}
	else								
	{
		y = ((float)VminG_moins-(float)VGmoy)*deltaVG_moins;
     8b2:	80 91 a0 01 	lds	r24, 0x01A0
     8b6:	90 91 a1 01 	lds	r25, 0x01A1
     8ba:	aa 27       	eor	r26, r26
     8bc:	97 fd       	sbrc	r25, 7
     8be:	a0 95       	com	r26
     8c0:	ba 2f       	mov	r27, r26
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     8ca:	7b 01       	movw	r14, r22
     8cc:	8c 01       	movw	r16, r24
     8ce:	6d 81       	ldd	r22, Y+5	; 0x05
     8d0:	7e 81       	ldd	r23, Y+6	; 0x06
     8d2:	8f 81       	ldd	r24, Y+7	; 0x07
     8d4:	98 85       	ldd	r25, Y+8	; 0x08
     8d6:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	c8 01       	movw	r24, r16
     8e0:	b7 01       	movw	r22, r14
     8e2:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	20 91 aa 01 	lds	r18, 0x01AA
     8ee:	30 91 ab 01 	lds	r19, 0x01AB
     8f2:	40 91 ac 01 	lds	r20, 0x01AC
     8f6:	50 91 ad 01 	lds	r21, 0x01AD
     8fa:	bc 01       	movw	r22, r24
     8fc:	cd 01       	movw	r24, r26
     8fe:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	ab 83       	std	Y+3, r26	; 0x03
     90c:	bc 83       	std	Y+4, r27	; 0x04
		
		if(y<-1)							
     90e:	69 81       	ldd	r22, Y+1	; 0x01
     910:	7a 81       	ldd	r23, Y+2	; 0x02
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f eb       	ldi	r21, 0xBF	; 191
     91e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
     922:	88 23       	and	r24, r24
     924:	4c f4       	brge	.+18     	; 0x938 <__stack+0xd9>
		{
			y = -1;
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	a0 e8       	ldi	r26, 0x80	; 128
     92c:	bf eb       	ldi	r27, 0xBF	; 191
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	ab 83       	std	Y+3, r26	; 0x03
     934:	bc 83       	std	Y+4, r27	; 0x04
     936:	14 c0       	rjmp	.+40     	; 0x960 <__stack+0x101>
		}
		else if(y>0)
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
     94c:	18 16       	cp	r1, r24
     94e:	44 f4       	brge	.+16     	; 0x960 <__stack+0x101>
		{
			y = 0;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a0 e0       	ldi	r26, 0x00	; 0
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	89 83       	std	Y+1, r24	; 0x01
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	ab 83       	std	Y+3, r26	; 0x03
     95e:	bc 83       	std	Y+4, r27	; 0x04
		}
	}

	return y;
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	9a 81       	ldd	r25, Y+2	; 0x02
     964:	ab 81       	ldd	r26, Y+3	; 0x03
     966:	bc 81       	ldd	r27, Y+4	; 0x04
}
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	28 96       	adiw	r28, 0x08	; 8
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	08 95       	ret

00000986 <calcul_Vd>:

/* Fonction permettant de faire le calcul de V droit */
float calcul_Vd(s32 VDmoy)
{
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	28 97       	sbiw	r28, 0x08	; 8
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	6d 83       	std	Y+5, r22	; 0x05
     9a4:	7e 83       	std	Y+6, r23	; 0x06
     9a6:	8f 83       	std	Y+7, r24	; 0x07
     9a8:	98 87       	std	Y+8, r25	; 0x08
	/* Une interpolation est faite afin de trouver le VG réel. De plus, un 'clipping' est fait pour les zones de saturation et les zones mortes */
	float y = 0.0;
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	9a 83       	std	Y+2, r25	; 0x02
     9b6:	ab 83       	std	Y+3, r26	; 0x03
     9b8:	bc 83       	std	Y+4, r27	; 0x04

	if(VDmoy>0)
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
     9bc:	9e 81       	ldd	r25, Y+6	; 0x06
     9be:	af 81       	ldd	r26, Y+7	; 0x07
     9c0:	b8 85       	ldd	r27, Y+8	; 0x08
     9c2:	18 16       	cp	r1, r24
     9c4:	19 06       	cpc	r1, r25
     9c6:	1a 06       	cpc	r1, r26
     9c8:	1b 06       	cpc	r1, r27
     9ca:	0c f0       	brlt	.+2      	; 0x9ce <calcul_Vd+0x48>
     9cc:	59 c0       	rjmp	.+178    	; 0xa80 <calcul_Vd+0xfa>
	{
		y = ((float)VDmoy-(float)VminD_plus)*deltaVD_plus;
     9ce:	6d 81       	ldd	r22, Y+5	; 0x05
     9d0:	7e 81       	ldd	r23, Y+6	; 0x06
     9d2:	8f 81       	ldd	r24, Y+7	; 0x07
     9d4:	98 85       	ldd	r25, Y+8	; 0x08
     9d6:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     9da:	7b 01       	movw	r14, r22
     9dc:	8c 01       	movw	r16, r24
     9de:	80 91 a4 01 	lds	r24, 0x01A4
     9e2:	90 91 a5 01 	lds	r25, 0x01A5
     9e6:	aa 27       	eor	r26, r26
     9e8:	97 fd       	sbrc	r25, 7
     9ea:	a0 95       	com	r26
     9ec:	ba 2f       	mov	r27, r26
     9ee:	bc 01       	movw	r22, r24
     9f0:	cd 01       	movw	r24, r26
     9f2:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     9f6:	9b 01       	movw	r18, r22
     9f8:	ac 01       	movw	r20, r24
     9fa:	c8 01       	movw	r24, r16
     9fc:	b7 01       	movw	r22, r14
     9fe:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     a02:	dc 01       	movw	r26, r24
     a04:	cb 01       	movw	r24, r22
     a06:	20 91 b6 01 	lds	r18, 0x01B6
     a0a:	30 91 b7 01 	lds	r19, 0x01B7
     a0e:	40 91 b8 01 	lds	r20, 0x01B8
     a12:	50 91 b9 01 	lds	r21, 0x01B9
     a16:	bc 01       	movw	r22, r24
     a18:	cd 01       	movw	r24, r26
     a1a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	ab 83       	std	Y+3, r26	; 0x03
     a28:	bc 83       	std	Y+4, r27	; 0x04

		if(y>1)
     a2a:	69 81       	ldd	r22, Y+1	; 0x01
     a2c:	7a 81       	ldd	r23, Y+2	; 0x02
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
     a3e:	18 16       	cp	r1, r24
     a40:	4c f4       	brge	.+18     	; 0xa54 <calcul_Vd+0xce>
		{
			y = 1;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e8       	ldi	r26, 0x80	; 128
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	ab 83       	std	Y+3, r26	; 0x03
     a50:	bc 83       	std	Y+4, r27	; 0x04
     a52:	6d c0       	rjmp	.+218    	; 0xb2e <calcul_Vd+0x1a8>
		}
		else if(y<0)
     a54:	69 81       	ldd	r22, Y+1	; 0x01
     a56:	7a 81       	ldd	r23, Y+2	; 0x02
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
     a68:	88 23       	and	r24, r24
     a6a:	0c f0       	brlt	.+2      	; 0xa6e <calcul_Vd+0xe8>
     a6c:	60 c0       	rjmp	.+192    	; 0xb2e <calcul_Vd+0x1a8>
		{
			y = 0;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	ab 83       	std	Y+3, r26	; 0x03
     a7c:	bc 83       	std	Y+4, r27	; 0x04
     a7e:	57 c0       	rjmp	.+174    	; 0xb2e <calcul_Vd+0x1a8>
		}
	}
	else
	{
		y = ((float)VminD_moins-(float)VDmoy)*deltaVD_moins;
     a80:	80 91 a8 01 	lds	r24, 0x01A8
     a84:	90 91 a9 01 	lds	r25, 0x01A9
     a88:	aa 27       	eor	r26, r26
     a8a:	97 fd       	sbrc	r25, 7
     a8c:	a0 95       	com	r26
     a8e:	ba 2f       	mov	r27, r26
     a90:	bc 01       	movw	r22, r24
     a92:	cd 01       	movw	r24, r26
     a94:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     a98:	7b 01       	movw	r14, r22
     a9a:	8c 01       	movw	r16, r24
     a9c:	6d 81       	ldd	r22, Y+5	; 0x05
     a9e:	7e 81       	ldd	r23, Y+6	; 0x06
     aa0:	8f 81       	ldd	r24, Y+7	; 0x07
     aa2:	98 85       	ldd	r25, Y+8	; 0x08
     aa4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c8 01       	movw	r24, r16
     aae:	b7 01       	movw	r22, r14
     ab0:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	20 91 b2 01 	lds	r18, 0x01B2
     abc:	30 91 b3 01 	lds	r19, 0x01B3
     ac0:	40 91 b4 01 	lds	r20, 0x01B4
     ac4:	50 91 b5 01 	lds	r21, 0x01B5
     ac8:	bc 01       	movw	r22, r24
     aca:	cd 01       	movw	r24, r26
     acc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	ab 83       	std	Y+3, r26	; 0x03
     ada:	bc 83       	std	Y+4, r27	; 0x04

		if(y<-1)
     adc:	69 81       	ldd	r22, Y+1	; 0x01
     ade:	7a 81       	ldd	r23, Y+2	; 0x02
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e8       	ldi	r20, 0x80	; 128
     aea:	5f eb       	ldi	r21, 0xBF	; 191
     aec:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
     af0:	88 23       	and	r24, r24
     af2:	4c f4       	brge	.+18     	; 0xb06 <calcul_Vd+0x180>
		{
			y = -1;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a0 e8       	ldi	r26, 0x80	; 128
     afa:	bf eb       	ldi	r27, 0xBF	; 191
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	ab 83       	std	Y+3, r26	; 0x03
     b02:	bc 83       	std	Y+4, r27	; 0x04
     b04:	14 c0       	rjmp	.+40     	; 0xb2e <calcul_Vd+0x1a8>
		}
		else if(y>0)
     b06:	69 81       	ldd	r22, Y+1	; 0x01
     b08:	7a 81       	ldd	r23, Y+2	; 0x02
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
     b1a:	18 16       	cp	r1, r24
     b1c:	44 f4       	brge	.+16     	; 0xb2e <calcul_Vd+0x1a8>
		{
			y = 0;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	ab 83       	std	Y+3, r26	; 0x03
     b2c:	bc 83       	std	Y+4, r27	; 0x04
		}
	}

	return y;
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	ab 81       	ldd	r26, Y+3	; 0x03
     b34:	bc 81       	ldd	r27, Y+4	; 0x04
}
     b36:	bc 01       	movw	r22, r24
     b38:	cd 01       	movw	r24, r26
     b3a:	28 96       	adiw	r28, 0x08	; 8
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <init_TWI>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permettant de faire l'initialisation du TWI */
void init_TWI(void)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
	/* Configure le mode avec une fréquence de 10 KHz */
    TWBR = 0xC6; 							/* C6 est égale a 198 avec le prescaler de 1 */
     b5c:	e0 e2       	ldi	r30, 0x20	; 32
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	86 ec       	ldi	r24, 0xC6	; 198
     b62:	80 83       	st	Z, r24
	
	TWCR = (0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(1<<TWEN)|(1<<TWIE)|(TWCR&0x0A); /* Enable interrupt */
     b64:	a6 e5       	ldi	r26, 0x56	; 86
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e6 e5       	ldi	r30, 0x56	; 86
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8a 70       	andi	r24, 0x0A	; 10
     b70:	85 60       	ori	r24, 0x05	; 5
     b72:	8c 93       	st	X, r24

	TWSR = (TWSR & 0xFC)|(1);				/* Set le prescaler a 1 */
     b74:	a1 e2       	ldi	r26, 0x21	; 33
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e1 e2       	ldi	r30, 0x21	; 33
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	8c 7f       	andi	r24, 0xFC	; 252
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	8c 93       	st	X, r24

}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <putDataOutBuf>:

/******************************************************************************
* Insérer dans le buffer out								  
******************************************************************************/
void putDataOutBuf(i2c_command data){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <putDataOutBuf+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <putDataOutBuf+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	69 83       	std	Y+1, r22	; 0x01
     b98:	7a 83       	std	Y+2, r23	; 0x02
     b9a:	8b 83       	std	Y+3, r24	; 0x03
     b9c:	9c 83       	std	Y+4, r25	; 0x04

	CircularBufferOutEnd++;
     b9e:	80 91 c0 02 	lds	r24, 0x02C0
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 93 c0 02 	sts	0x02C0, r24
	CircularBufferOutEnd %= CIRCULAR_BUFFER_SIZE;
     ba8:	80 91 c0 02 	lds	r24, 0x02C0
     bac:	8f 71       	andi	r24, 0x1F	; 31
     bae:	80 93 c0 02 	sts	0x02C0, r24
	CircularBufferOut[CircularBufferOutEnd] = data;
     bb2:	80 91 c0 02 	lds	r24, 0x02C0
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	fc 01       	movw	r30, r24
     bc4:	e0 54       	subi	r30, 0x40	; 64
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	ab 81       	ldd	r26, Y+3	; 0x03
     bce:	bc 81       	ldd	r27, Y+4	; 0x04
     bd0:	80 83       	st	Z, r24
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	a2 83       	std	Z+2, r26	; 0x02
     bd6:	b3 83       	std	Z+3, r27	; 0x03

}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <getDataOutBuf>:


/******************************************************************************
 * Retirer du buffer out
 *****************************************************************************/
i2c_command getDataOutBuf(void){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62

	CircularBufferOutIndex++;
     bee:	80 91 c1 02 	lds	r24, 0x02C1
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 c1 02 	sts	0x02C1, r24
	CircularBufferOutIndex %= CIRCULAR_BUFFER_SIZE;
     bf8:	80 91 c1 02 	lds	r24, 0x02C1
     bfc:	8f 71       	andi	r24, 0x1F	; 31
     bfe:	80 93 c1 02 	sts	0x02C1, r24
	return (i2c_command)CircularBufferOut[CircularBufferOutIndex];
     c02:	80 91 c1 02 	lds	r24, 0x02C1
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	fc 01       	movw	r30, r24
     c14:	e0 54       	subi	r30, 0x40	; 64
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	a2 81       	ldd	r26, Z+2	; 0x02
     c1e:	b3 81       	ldd	r27, Z+3	; 0x03

}
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <putDataInBuf>:


/******************************************************************************
 * Insérer dans le buffer in
 *****************************************************************************/
void putDataInBuf(i2c_command ptr){
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <putDataInBuf+0x6>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <putDataInBuf+0x8>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	69 83       	std	Y+1, r22	; 0x01
     c38:	7a 83       	std	Y+2, r23	; 0x02
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	9c 83       	std	Y+4, r25	; 0x04

	CircularBufferInEnd++;
     c3e:	80 91 c2 02 	lds	r24, 0x02C2
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	80 93 c2 02 	sts	0x02C2, r24
	CircularBufferInEnd %= CIRCULAR_BUFFER_SIZE;
     c48:	80 91 c2 02 	lds	r24, 0x02C2
     c4c:	8f 71       	andi	r24, 0x1F	; 31
     c4e:	80 93 c2 02 	sts	0x02C2, r24
	CircularBufferIn[CircularBufferInEnd] = ptr;
     c52:	80 91 c2 02 	lds	r24, 0x02C2
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	fc 01       	movw	r30, r24
     c64:	e0 5c       	subi	r30, 0xC0	; 192
     c66:	fd 4f       	sbci	r31, 0xFD	; 253
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	ab 81       	ldd	r26, Y+3	; 0x03
     c6e:	bc 81       	ldd	r27, Y+4	; 0x04
     c70:	80 83       	st	Z, r24
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	a2 83       	std	Z+2, r26	; 0x02
     c76:	b3 83       	std	Z+3, r27	; 0x03

}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <getDataInBuf>:


/******************************************************************************
 * Retirer du buffer in
 *****************************************************************************/
i2c_command getDataInBuf(void){
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62

	CircularBufferInIndex++;
     c8e:	80 91 c3 02 	lds	r24, 0x02C3
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	80 93 c3 02 	sts	0x02C3, r24
	CircularBufferInIndex %= CIRCULAR_BUFFER_SIZE;
     c98:	80 91 c3 02 	lds	r24, 0x02C3
     c9c:	8f 71       	andi	r24, 0x1F	; 31
     c9e:	80 93 c3 02 	sts	0x02C3, r24
	return CircularBufferIn[CircularBufferInIndex];	
     ca2:	80 91 c3 02 	lds	r24, 0x02C3
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	fc 01       	movw	r30, r24
     cb4:	e0 5c       	subi	r30, 0xC0	; 192
     cb6:	fd 4f       	sbci	r31, 0xFD	; 253
     cb8:	80 81       	ld	r24, Z
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	a2 81       	ldd	r26, Z+2	; 0x02
     cbe:	b3 81       	ldd	r27, Z+3	; 0x03

}
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <twiWriteCommand>:

/******************************************************************************
 * Écrire sur le bus twi
 *****************************************************************************/
void twiWriteCommand(u08 address, u08 registre, u08 data, u08 read)
{	
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	29 97       	sbiw	r28, 0x09	; 9
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	8e 83       	std	Y+6, r24	; 0x06
     ce0:	6f 83       	std	Y+7, r22	; 0x07
     ce2:	48 87       	std	Y+8, r20	; 0x08
     ce4:	29 87       	std	Y+9, r18	; 0x09
	i2c_command command;	
	u08 was_empty;

	command.addr = address;
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	8a 83       	std	Y+2, r24	; 0x02
	command.reg = registre;
     cea:	8f 81       	ldd	r24, Y+7	; 0x07
     cec:	8b 83       	std	Y+3, r24	; 0x03
	command.data = data;
     cee:	88 85       	ldd	r24, Y+8	; 0x08
     cf0:	8d 83       	std	Y+5, r24	; 0x05
	command.read = read;
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	8c 83       	std	Y+4, r24	; 0x04

	cli();
     cf6:	f8 94       	cli
	
	/* Si le buffer n'est pas plein*/
	if((CircularBufferOutEnd+1)%CIRCULAR_BUFFER_SIZE!=CircularBufferOutIndex)
     cf8:	80 91 c0 02 	lds	r24, 0x02C0
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	20 e2       	ldi	r18, 0x20	; 32
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	b9 01       	movw	r22, r18
     d08:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__divmodhi4>
     d0c:	9c 01       	movw	r18, r24
     d0e:	80 91 c1 02 	lds	r24, 0x02C1
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	28 17       	cp	r18, r24
     d18:	39 07       	cpc	r19, r25
     d1a:	31 f1       	breq	.+76     	; 0xd68 <twiWriteCommand+0x9e>
	{
		was_empty = CircularBufferOutIndex==CircularBufferOutEnd;
     d1c:	90 91 c1 02 	lds	r25, 0x02C1
     d20:	80 91 c0 02 	lds	r24, 0x02C0
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	98 17       	cp	r25, r24
     d28:	11 f4       	brne	.+4      	; 0xd2e <twiWriteCommand+0x64>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
		putDataOutBuf(command);
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	9b 81       	ldd	r25, Y+3	; 0x03
     d32:	ac 81       	ldd	r26, Y+4	; 0x04
     d34:	bd 81       	ldd	r27, Y+5	; 0x05
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <putDataOutBuf>

		/* Si le buffer était vide, on envoie un start */
		if(was_empty)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	88 23       	and	r24, r24
     d42:	91 f0       	breq	.+36     	; 0xd68 <twiWriteCommand+0x9e>
		{
			etat = FIRST_START;
     d44:	10 92 bf 01 	sts	0x01BF, r1
     d48:	10 92 be 01 	sts	0x01BE, r1
			TWCR &= ~(1<<TWSTO);
     d4c:	a6 e5       	ldi	r26, 0x56	; 86
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e5       	ldi	r30, 0x56	; 86
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8f 7e       	andi	r24, 0xEF	; 239
     d58:	8c 93       	st	X, r24
			TWCR |= (1<<TWSTA)|(1<<TWINT);
     d5a:	a6 e5       	ldi	r26, 0x56	; 86
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e6 e5       	ldi	r30, 0x56	; 86
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	80 6a       	ori	r24, 0xA0	; 160
     d66:	8c 93       	st	X, r24
		}
	}
	sei();
     d68:	78 94       	sei

}
     d6a:	29 96       	adiw	r28, 0x09	; 9
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <twiReadCommand>:

/******************************************************************************
 * lire sur le bus
 *****************************************************************************/
i2c_command twiReadCommand()
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <twiReadCommand+0x6>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <twiReadCommand+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	i2c_command command;
	cli();
     d88:	f8 94       	cli
	/* Regarde si le buffer est plein */
	if(CircularBufferInIndex==CircularBufferInEnd)
     d8a:	90 91 c3 02 	lds	r25, 0x02C3
     d8e:	80 91 c2 02 	lds	r24, 0x02C2
     d92:	98 17       	cp	r25, r24
     d94:	19 f4       	brne	.+6      	; 0xd9c <twiReadCommand+0x20>
	{
		/* 'command.addr=0xFF' signifie que le buffer est vide */
		command.addr = 0xFF;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <twiReadCommand+0x30>
	}
	else
	{
		command = getDataInBuf();
     d9c:	0e 94 43 06 	call	0xc86	; 0xc86 <getDataInBuf>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	ab 83       	std	Y+3, r26	; 0x03
     daa:	bc 83       	std	Y+4, r27	; 0x04
	}
	sei();
     dac:	78 94       	sei

	return command;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
}
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <__vector_19>:


/******************************************************************************
 *
 *****************************************************************************/
ISR(TWI_vect) {
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <__vector_19+0x28>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <__vector_19+0x2a>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	
	u08 status  = TWSR & 0xF8;
     df6:	e1 e2       	ldi	r30, 0x21	; 33
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 7f       	andi	r24, 0xF8	; 248
     dfe:	8a 83       	std	Y+2, r24	; 0x02
	u08 tmp;

	switch (status) {
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3c 83       	std	Y+4, r19	; 0x04
     e08:	2b 83       	std	Y+3, r18	; 0x03
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	88 32       	cpi	r24, 0x28	; 40
     e10:	91 05       	cpc	r25, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <__vector_19+0x4e>
     e14:	b3 c0       	rjmp	.+358    	; 0xf7c <__vector_19+0x1b4>
     e16:	2b 81       	ldd	r18, Y+3	; 0x03
     e18:	3c 81       	ldd	r19, Y+4	; 0x04
     e1a:	29 32       	cpi	r18, 0x29	; 41
     e1c:	31 05       	cpc	r19, r1
     e1e:	8c f4       	brge	.+34     	; 0xe42 <__vector_19+0x7a>
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	80 31       	cpi	r24, 0x10	; 16
     e26:	91 05       	cpc	r25, r1
     e28:	59 f1       	breq	.+86     	; 0xe80 <__vector_19+0xb8>
     e2a:	2b 81       	ldd	r18, Y+3	; 0x03
     e2c:	3c 81       	ldd	r19, Y+4	; 0x04
     e2e:	28 31       	cpi	r18, 0x18	; 24
     e30:	31 05       	cpc	r19, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <__vector_19+0x6e>
     e34:	7b c0       	rjmp	.+246    	; 0xf2c <__vector_19+0x164>
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	88 30       	cpi	r24, 0x08	; 8
     e3c:	91 05       	cpc	r25, r1
     e3e:	01 f1       	breq	.+64     	; 0xe80 <__vector_19+0xb8>
     e40:	4f c1       	rjmp	.+670    	; 0x10e0 <__vector_19+0x318>
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	20 34       	cpi	r18, 0x40	; 64
     e48:	31 05       	cpc	r19, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <__vector_19+0x86>
     e4c:	3b c1       	rjmp	.+630    	; 0x10c4 <__vector_19+0x2fc>
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	81 34       	cpi	r24, 0x41	; 65
     e54:	91 05       	cpc	r25, r1
     e56:	3c f4       	brge	.+14     	; 0xe66 <__vector_19+0x9e>
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	20 33       	cpi	r18, 0x30	; 48
     e5e:	31 05       	cpc	r19, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <__vector_19+0x9c>
     e62:	8c c0       	rjmp	.+280    	; 0xf7c <__vector_19+0x1b4>
     e64:	3d c1       	rjmp	.+634    	; 0x10e0 <__vector_19+0x318>
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	80 35       	cpi	r24, 0x50	; 80
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <__vector_19+0xaa>
     e70:	ee c0       	rjmp	.+476    	; 0x104e <__vector_19+0x286>
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	28 35       	cpi	r18, 0x58	; 88
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__vector_19+0xb6>
     e7c:	e8 c0       	rjmp	.+464    	; 0x104e <__vector_19+0x286>
     e7e:	30 c1       	rjmp	.+608    	; 0x10e0 <__vector_19+0x318>
			
			/* 
				Si  nous avons un start ou un restart condition alors il faut envoyer l'addr 
				qui est dans le buffer Out et Activer le bus sans start/stop 
			*/
			if(etat == SECOND_START)
     e80:	80 91 be 01 	lds	r24, 0x01BE
     e84:	90 91 bf 01 	lds	r25, 0x01BF
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	91 05       	cpc	r25, r1
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__vector_19+0xfc>
			{
				TWDR = current_command.addr | 0x01;
     e8e:	e3 e2       	ldi	r30, 0x23	; 35
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 91 ba 01 	lds	r24, 0x01BA
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 83       	st	Z, r24
				TWCR &= ~(1<<TWSTA);
     e9a:	a6 e5       	ldi	r26, 0x56	; 86
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e5       	ldi	r30, 0x56	; 86
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	8c 93       	st	X, r24
				TWCR |= (1<<TWINT);
     ea8:	a6 e5       	ldi	r26, 0x56	; 86
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e5       	ldi	r30, 0x56	; 86
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	8c 93       	st	X, r24
				etat = READ_ADDR_2;
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 bf 01 	sts	0x01BF, r25
     ebe:	80 93 be 01 	sts	0x01BE, r24
     ec2:	35 c1       	rjmp	.+618    	; 0x112e <__vector_19+0x366>
			}
			else
			{
				current_command = getDataOutBuf();
     ec4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <getDataOutBuf>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	80 93 ba 01 	sts	0x01BA, r24
     ed0:	90 93 bb 01 	sts	0x01BB, r25
     ed4:	a0 93 bc 01 	sts	0x01BC, r26
     ed8:	b0 93 bd 01 	sts	0x01BD, r27

				if(current_command.read)
     edc:	80 91 bc 01 	lds	r24, 0x01BC
     ee0:	88 23       	and	r24, r24
     ee2:	39 f0       	breq	.+14     	; 0xef2 <__vector_19+0x12a>
				{
					etat = READ_ADDR;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 bf 01 	sts	0x01BF, r25
     eec:	80 93 be 01 	sts	0x01BE, r24
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <__vector_19+0x136>
				}
				else
				{
					etat = WRITE_ADDR;
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 bf 01 	sts	0x01BF, r25
     efa:	80 93 be 01 	sts	0x01BE, r24
				}

				TWDR = current_command.addr;
     efe:	e3 e2       	ldi	r30, 0x23	; 35
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 91 ba 01 	lds	r24, 0x01BA
     f06:	80 83       	st	Z, r24
				tmp = current_command.addr;
     f08:	80 91 ba 01 	lds	r24, 0x01BA
     f0c:	89 83       	std	Y+1, r24	; 0x01

				/* Marche et arrêt à zéro, TWINT à 1 pour 'clearer' l'interrupt, enable ACK */
				TWCR &= ~(1<<TWSTA);
     f0e:	a6 e5       	ldi	r26, 0x56	; 86
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e6 e5       	ldi	r30, 0x56	; 86
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
				TWCR |= (1<<TWINT);
     f1c:	a6 e5       	ldi	r26, 0x56	; 86
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e5       	ldi	r30, 0x56	; 86
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	8c 93       	st	X, r24
     f2a:	01 c1       	rjmp	.+514    	; 0x112e <__vector_19+0x366>
			break;

		case	0x18: /* Address Write Ack */

			/* Écrit le #registre */
			TWDR = current_command.reg;
     f2c:	e3 e2       	ldi	r30, 0x23	; 35
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 91 bb 01 	lds	r24, 0x01BB
     f34:	80 83       	st	Z, r24

			if(etat==READ_ADDR)
     f36:	80 91 be 01 	lds	r24, 0x01BE
     f3a:	90 91 bf 01 	lds	r25, 0x01BF
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	39 f4       	brne	.+14     	; 0xf52 <__vector_19+0x18a>
			{
				etat = READ_REG;
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	90 93 bf 01 	sts	0x01BF, r25
     f4c:	80 93 be 01 	sts	0x01BE, r24
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <__vector_19+0x1a4>
			}
			else if(etat==WRITE_ADDR)
     f52:	80 91 be 01 	lds	r24, 0x01BE
     f56:	90 91 bf 01 	lds	r25, 0x01BF
     f5a:	86 30       	cpi	r24, 0x06	; 6
     f5c:	91 05       	cpc	r25, r1
     f5e:	31 f4       	brne	.+12     	; 0xf6c <__vector_19+0x1a4>
			{
				etat = WRITE_REG;
     f60:	87 e0       	ldi	r24, 0x07	; 7
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 bf 01 	sts	0x01BF, r25
     f68:	80 93 be 01 	sts	0x01BE, r24
			}

			/* Marche et arrêt à zéro, TWINT à 1 pour clearer l'interrupt, enable ACK */
			TWCR |= (1<<TWINT);
     f6c:	a6 e5       	ldi	r26, 0x56	; 86
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e6 e5       	ldi	r30, 0x56	; 86
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	8c 93       	st	X, r24
     f7a:	d9 c0       	rjmp	.+434    	; 0x112e <__vector_19+0x366>
				Si  nous avons un data ou une addr d'écrit sur le bus, ensuite il peut y avoir un autre data, 
				un stop ou un restart. Il faut donc lire le buffer pour savoir quoi faire et configure 
				le bus en conséquence 
			*/

			if(etat==READ_REG)
     f7c:	80 91 be 01 	lds	r24, 0x01BE
     f80:	90 91 bf 01 	lds	r25, 0x01BF
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	91 05       	cpc	r25, r1
     f88:	a9 f4       	brne	.+42     	; 0xfb4 <__vector_19+0x1ec>
			{
				etat = SECOND_START;
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 bf 01 	sts	0x01BF, r25
     f92:	80 93 be 01 	sts	0x01BE, r24
				TWCR |= (1<<TWSTA);
     f96:	a6 e5       	ldi	r26, 0x56	; 86
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e6 e5       	ldi	r30, 0x56	; 86
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 62       	ori	r24, 0x20	; 32
     fa2:	8c 93       	st	X, r24
				TWCR |= (1<<TWINT);
     fa4:	a6 e5       	ldi	r26, 0x56	; 86
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e6 e5       	ldi	r30, 0x56	; 86
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	8c 93       	st	X, r24
     fb2:	bd c0       	rjmp	.+378    	; 0x112e <__vector_19+0x366>
			}
			else if(etat==WRITE_REG)
     fb4:	80 91 be 01 	lds	r24, 0x01BE
     fb8:	90 91 bf 01 	lds	r25, 0x01BF
     fbc:	87 30       	cpi	r24, 0x07	; 7
     fbe:	91 05       	cpc	r25, r1
     fc0:	b1 f4       	brne	.+44     	; 0xfee <__vector_19+0x226>
			{
				etat = WRITE_DATA;
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 bf 01 	sts	0x01BF, r25
     fca:	80 93 be 01 	sts	0x01BE, r24
				TWDR = current_command.data;
     fce:	e3 e2       	ldi	r30, 0x23	; 35
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 91 bd 01 	lds	r24, 0x01BD
     fd6:	80 83       	st	Z, r24
				tmp = current_command.data;
     fd8:	80 91 bd 01 	lds	r24, 0x01BD
     fdc:	89 83       	std	Y+1, r24	; 0x01
				TWCR |= (1<<TWINT);
     fde:	a6 e5       	ldi	r26, 0x56	; 86
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e6 e5       	ldi	r30, 0x56	; 86
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	8c 93       	st	X, r24
     fec:	a0 c0       	rjmp	.+320    	; 0x112e <__vector_19+0x366>
			}
			else if(etat==WRITE_DATA)
     fee:	80 91 be 01 	lds	r24, 0x01BE
     ff2:	90 91 bf 01 	lds	r25, 0x01BF
     ff6:	88 30       	cpi	r24, 0x08	; 8
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f0       	breq	.+2      	; 0xffe <__vector_19+0x236>
     ffc:	98 c0       	rjmp	.+304    	; 0x112e <__vector_19+0x366>
			{
				/* Est-ce qu'il y a une autre commande dans le buffer? */
				if(CircularBufferOutIndex!=CircularBufferOutEnd)
     ffe:	90 91 c1 02 	lds	r25, 0x02C1
    1002:	80 91 c0 02 	lds	r24, 0x02C0
    1006:	98 17       	cp	r25, r24
    1008:	99 f0       	breq	.+38     	; 0x1030 <__vector_19+0x268>
				{
					/* Restart(start à 1, stop 0) */
					TWCR |= (1<<TWSTA);
    100a:	a6 e5       	ldi	r26, 0x56	; 86
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 62       	ori	r24, 0x20	; 32
    1016:	8c 93       	st	X, r24
					TWCR |= (1<<TWINT);
    1018:	a6 e5       	ldi	r26, 0x56	; 86
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e6 e5       	ldi	r30, 0x56	; 86
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	8c 93       	st	X, r24
					etat = FIRST_START;
    1026:	10 92 bf 01 	sts	0x01BF, r1
    102a:	10 92 be 01 	sts	0x01BE, r1
    102e:	7f c0       	rjmp	.+254    	; 0x112e <__vector_19+0x366>
				}
				else
				{
					/* Stop(start à 0, stop à 1) */
					TWCR &= ~(1<<TWSTA);
    1030:	a6 e5       	ldi	r26, 0x56	; 86
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e6 e5       	ldi	r30, 0x56	; 86
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7d       	andi	r24, 0xDF	; 223
    103c:	8c 93       	st	X, r24
					TWCR |= (1<<TWINT)|(1<<TWSTO);
    103e:	a6 e5       	ldi	r26, 0x56	; 86
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e6 e5       	ldi	r30, 0x56	; 86
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 69       	ori	r24, 0x90	; 144
    104a:	8c 93       	st	X, r24
    104c:	70 c0       	rjmp	.+224    	; 0x112e <__vector_19+0x366>
		case	0x58: /* Data Read NoAck */

			/* 
				Une lecture à été effectué sur le bus, il faut donc la récupérer 
			*/
				current_command.data = TWDR;
    104e:	e3 e2       	ldi	r30, 0x23	; 35
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 93 bd 01 	sts	0x01BD, r24
				tmp = current_command.data;
    1058:	80 91 bd 01 	lds	r24, 0x01BD
    105c:	89 83       	std	Y+1, r24	; 0x01
				putDataInBuf(current_command);
    105e:	80 91 ba 01 	lds	r24, 0x01BA
    1062:	90 91 bb 01 	lds	r25, 0x01BB
    1066:	a0 91 bc 01 	lds	r26, 0x01BC
    106a:	b0 91 bd 01 	lds	r27, 0x01BD
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 15 06 	call	0xc2a	; 0xc2a <putDataInBuf>

				/* Est-ce qu'il y a une autre commande dans le buffer? */
				if(CircularBufferOutIndex!=CircularBufferOutEnd)
    1076:	90 91 c1 02 	lds	r25, 0x02C1
    107a:	80 91 c0 02 	lds	r24, 0x02C0
    107e:	98 17       	cp	r25, r24
    1080:	99 f0       	breq	.+38     	; 0x10a8 <__vector_19+0x2e0>
				{
					/* Restart(start à 1, stop 0) */
					TWCR |= (1<<TWSTA);
    1082:	a6 e5       	ldi	r26, 0x56	; 86
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e6 e5       	ldi	r30, 0x56	; 86
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 62       	ori	r24, 0x20	; 32
    108e:	8c 93       	st	X, r24
					TWCR |= (1<<TWINT);
    1090:	a6 e5       	ldi	r26, 0x56	; 86
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e6 e5       	ldi	r30, 0x56	; 86
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 68       	ori	r24, 0x80	; 128
    109c:	8c 93       	st	X, r24
					etat = FIRST_START;
    109e:	10 92 bf 01 	sts	0x01BF, r1
    10a2:	10 92 be 01 	sts	0x01BE, r1
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <__vector_19+0x2fc>
				}
				else
				{
					/* Stop(start à 0, stop à 1) */
					TWCR &= ~(1<<TWSTA);
    10a8:	a6 e5       	ldi	r26, 0x56	; 86
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e6 e5       	ldi	r30, 0x56	; 86
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 7d       	andi	r24, 0xDF	; 223
    10b4:	8c 93       	st	X, r24
					TWCR |= (1<<TWINT)|(1<<TWSTO);
    10b6:	a6 e5       	ldi	r26, 0x56	; 86
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e6 e5       	ldi	r30, 0x56	; 86
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 69       	ori	r24, 0x90	; 144
    10c2:	8c 93       	st	X, r24
					Puisqu'il n'y a pas de break dans les deux case 0x50 et 0x58, quand nous sommes ici
					nous avons soit lue la donnée ou envoyé l'addr à lire, il peut donc y avoir un stop, un
					start ou encore il faut placer le bus en mode lecture 
				*/

				etat = READ_DATA;
    10c4:	85 e0       	ldi	r24, 0x05	; 5
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 bf 01 	sts	0x01BF, r25
    10cc:	80 93 be 01 	sts	0x01BE, r24
	
				/* Marche et arrêt à zéro, TWINT à 1 pour clearer l'interrupt, enable ACK */
				TWCR |= (1<<TWINT);
    10d0:	a6 e5       	ldi	r26, 0x56	; 86
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e6 e5       	ldi	r30, 0x56	; 86
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	8c 93       	st	X, r24
    10de:	27 c0       	rjmp	.+78     	; 0x112e <__vector_19+0x366>
				Ici l'un des deux sonars n'a pas répondu, il faut donc tout stoper ou faire un restart
			    pour la prochaine trame qui peut être dans le buffer 
			*/
			
				/* Est-ce qu'il y a une autre commande dans le buffer? */
				if(CircularBufferOutIndex!=CircularBufferOutEnd)
    10e0:	90 91 c1 02 	lds	r25, 0x02C1
    10e4:	80 91 c0 02 	lds	r24, 0x02C0
    10e8:	98 17       	cp	r25, r24
    10ea:	99 f0       	breq	.+38     	; 0x1112 <__vector_19+0x34a>
				{
					/* Restart(start à 1, stop 0) */
					TWCR |= (1<<TWSTA);
    10ec:	a6 e5       	ldi	r26, 0x56	; 86
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	8c 93       	st	X, r24
					TWCR |= (1<<TWINT);
    10fa:	a6 e5       	ldi	r26, 0x56	; 86
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e6 e5       	ldi	r30, 0x56	; 86
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 68       	ori	r24, 0x80	; 128
    1106:	8c 93       	st	X, r24
					etat = FIRST_START;
    1108:	10 92 bf 01 	sts	0x01BF, r1
    110c:	10 92 be 01 	sts	0x01BE, r1
    1110:	0e c0       	rjmp	.+28     	; 0x112e <__vector_19+0x366>
				}
				else
				{
					/* Stop(start à 0, stop à 1) */
					TWCR &= ~(1<<TWSTA);
    1112:	a6 e5       	ldi	r26, 0x56	; 86
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8f 7d       	andi	r24, 0xDF	; 223
    111e:	8c 93       	st	X, r24
					TWCR |= (1<<TWINT)|(1<<TWSTO);
    1120:	a6 e5       	ldi	r26, 0x56	; 86
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e6 e5       	ldi	r30, 0x56	; 86
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 69       	ori	r24, 0x90	; 144
    112c:	8c 93       	st	X, r24
				}

			break;
	}
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <main>:
/****************************************************************************************************/																
/*									Programme principal												*/
/****************************************************************************************************/

int main(void)
{
    115c:	6f 92       	push	r6
    115e:	7f 92       	push	r7
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	ca 5e       	subi	r28, 0xEA	; 234
    117e:	d0 40       	sbci	r29, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
	/* Déclarations des variables */
	char tableau_com[200];
	u08 compteur = 0;
    118a:	1a 8e       	std	Y+26, r1	; 0x1a

	u08 compteur_twi = 0;
    118c:	19 8e       	std	Y+25, r1	; 0x19
	u08 nouveau_ping = 0;
    118e:	18 8e       	std	Y+24, r1	; 0x18
	float Vd;
	int moy_G;
	int moy_D;
	int duty_Gi;

	u08 robot_enable = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
	tableau_com[0]=0xFE;
    1194:	8e ef       	ldi	r24, 0xFE	; 254
    1196:	8b 8f       	std	Y+27, r24	; 0x1b


	DDRA = 0x10;      /* PortA output */
    1198:	ea e3       	ldi	r30, 0x3A	; 58
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 e1       	ldi	r24, 0x10	; 16
    119e:	80 83       	st	Z, r24
    DDRB = 0xff;      /* PortB output */
    11a0:	e7 e3       	ldi	r30, 0x37	; 55
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	80 83       	st	Z, r24
	DDRD = 0xff;
    11a8:	e1 e3       	ldi	r30, 0x31	; 49
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	80 83       	st	Z, r24

	PORTA = 0x00;
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	10 82       	st	Z, r1
	PORTD = 0x00;
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	10 82       	st	Z, r1
    PORTB = 0x00;     /* switch LEDs on */
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	10 82       	st	Z, r1

	/* set enabled leds */
	set_led(6, 0);
    11c2:	86 e0       	ldi	r24, 0x06	; 6
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
	set_led(7, 1);
    11ca:	87 e0       	ldi	r24, 0x07	; 7
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>


	init_ADC();
    11d2:	0e 94 49 00 	call	0x92	; 0x92 <init_ADC>
    uart_init();
    11d6:	0e 94 0b 12 	call	0x2416	; 0x2416 <uart_init>
	init_timer();
    11da:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <init_timer>

	init_watchdog();
    11de:	0e 94 f7 12 	call	0x25ee	; 0x25ee <init_watchdog>


    sei();         /* enable interrupts */
    11e2:	78 94       	sei
	
	executer_calibration();
    11e4:	0e 94 39 02 	call	0x472	; 0x472 <executer_calibration>
	
	cli(); 
    11e8:	f8 94       	cli

	init_TWI();
    11ea:	0e 94 aa 05 	call	0xb54	; 0xb54 <init_TWI>

	init_sonar();
    11ee:	0e 94 ae 10 	call	0x215c	; 0x215c <init_sonar>

	sei();
    11f2:	78 94       	sei

	/* Boucle infinie */
    for (;;) 
	{   
		uart_send("Serial Data from AVR received###", 32);
    11f4:	80 e6       	ldi	r24, 0x60	; 96
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	60 e2       	ldi	r22, 0x20	; 32
    11fa:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <uart_send>
	
		executer_sonar(nouveau_ping);
    11fe:	88 8d       	ldd	r24, Y+24	; 0x18
    1200:	0e 94 d5 10 	call	0x21aa	; 0x21aa <executer_sonar>

		nouveau_ping = 0;
    1204:	18 8e       	std	Y+24, r1	; 0x18


		if(read_flag()==1) 				/* Si la lecture du drapeau est vraie */
    1206:	0e 94 42 10 	call	0x2084	; 0x2084 <read_flag>
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	09 f0       	breq	.+2      	; 0x1210 <main+0xb4>
    120e:	f9 c0       	rjmp	.+498    	; 0x1402 <main+0x2a6>
		{
			compteur++;		
    1210:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	8a 8f       	std	Y+26, r24	; 0x1a
						
			compteur_twi++;
    1216:	89 8d       	ldd	r24, Y+25	; 0x19
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	89 8f       	std	Y+25, r24	; 0x19

			if(compteur >=200)			/* Si le compteur est plus grand ou égal à 200 */
    121c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    121e:	88 3c       	cpi	r24, 0xC8	; 200
    1220:	48 f0       	brcs	.+18     	; 0x1234 <main+0xd8>
			{
				PORTB = (PORTB ^ 0x01); /* La LED 0 sera allumée (clignote) à chaque seconde lorsque le calcul 200*5ms est vrai */
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	90 81       	ld	r25, Z
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 27       	eor	r24, r25
    1230:	8c 93       	st	X, r24
				
				compteur = 0; 			
    1232:	1a 8e       	std	Y+26, r1	; 0x1a
			}

			if(compteur_twi >= 10)
    1234:	89 8d       	ldd	r24, Y+25	; 0x19
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	18 f0       	brcs	.+6      	; 0x1240 <main+0xe4>
			{
				nouveau_ping = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	88 8f       	std	Y+24, r24	; 0x18
				compteur_twi = 0;
    123e:	19 8e       	std	Y+25, r1	; 0x19
			}

			calcul_moyenne();			
    1240:	0e 94 78 01 	call	0x2f0	; 0x2f0 <calcul_moyenne>

			Vg = calcul_Vg(Moyenne_G);
    1244:	80 91 f1 02 	lds	r24, 0x02F1
    1248:	90 91 f2 02 	lds	r25, 0x02F2
    124c:	a0 91 f3 02 	lds	r26, 0x02F3
    1250:	b0 91 f4 02 	lds	r27, 0x02F4
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <calcul_Vg>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	8c 87       	std	Y+12, r24	; 0x0c
    1262:	9d 87       	std	Y+13, r25	; 0x0d
    1264:	ae 87       	std	Y+14, r26	; 0x0e
    1266:	bf 87       	std	Y+15, r27	; 0x0f
			Vd = calcul_Vd(Moyenne_D);
    1268:	80 91 ed 02 	lds	r24, 0x02ED
    126c:	90 91 ee 02 	lds	r25, 0x02EE
    1270:	a0 91 ef 02 	lds	r26, 0x02EF
    1274:	b0 91 f0 02 	lds	r27, 0x02F0
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 c3 04 	call	0x986	; 0x986 <calcul_Vd>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	88 87       	std	Y+8, r24	; 0x08
    1286:	99 87       	std	Y+9, r25	; 0x09
    1288:	aa 87       	std	Y+10, r26	; 0x0a
    128a:	bb 87       	std	Y+11, r27	; 0x0b

			moy_G = Vg*100;		/* Conversion en pourcentage 0-100 pour l'affichage de la moyenne de gauche */
    128c:	6c 85       	ldd	r22, Y+12	; 0x0c
    128e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1290:	8e 85       	ldd	r24, Y+14	; 0x0e
    1292:	9f 85       	ldd	r25, Y+15	; 0x0f
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	48 ec       	ldi	r20, 0xC8	; 200
    129a:	52 e4       	ldi	r21, 0x42	; 66
    129c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fixsfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9f 83       	std	Y+7, r25	; 0x07
    12b2:	8e 83       	std	Y+6, r24	; 0x06

			moy_D = Vd*100;		/* Conversion en pourcentage 0-100 pour l'affichage de la moyenne de droite */
    12b4:	68 85       	ldd	r22, Y+8	; 0x08
    12b6:	79 85       	ldd	r23, Y+9	; 0x09
    12b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	48 ec       	ldi	r20, 0xC8	; 200
    12c2:	52 e4       	ldi	r21, 0x42	; 66
    12c4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fixsfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9d 83       	std	Y+5, r25	; 0x05
    12da:	8c 83       	std	Y+4, r24	; 0x04

			v_comm = conv_vitesse(get_vitesse());
    12dc:	0e 94 21 12 	call	0x2442	; 0x2442 <get_vitesse>
    12e0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <conv_vitesse>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8c 8b       	std	Y+20, r24	; 0x14
    12ea:	9d 8b       	std	Y+21, r25	; 0x15
    12ec:	ae 8b       	std	Y+22, r26	; 0x16
    12ee:	bf 8b       	std	Y+23, r27	; 0x17
			if(v_comm>vitesse_max)
    12f0:	20 91 f5 02 	lds	r18, 0x02F5
    12f4:	30 91 f6 02 	lds	r19, 0x02F6
    12f8:	40 91 f7 02 	lds	r20, 0x02F7
    12fc:	50 91 f8 02 	lds	r21, 0x02F8
    1300:	6c 89       	ldd	r22, Y+20	; 0x14
    1302:	7d 89       	ldd	r23, Y+21	; 0x15
    1304:	8e 89       	ldd	r24, Y+22	; 0x16
    1306:	9f 89       	ldd	r25, Y+23	; 0x17
    1308:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    130c:	18 16       	cp	r1, r24
    130e:	64 f4       	brge	.+24     	; 0x1328 <main+0x1cc>
				v_comm = vitesse_max;
    1310:	80 91 f5 02 	lds	r24, 0x02F5
    1314:	90 91 f6 02 	lds	r25, 0x02F6
    1318:	a0 91 f7 02 	lds	r26, 0x02F7
    131c:	b0 91 f8 02 	lds	r27, 0x02F8
    1320:	8c 8b       	std	Y+20, r24	; 0x14
    1322:	9d 8b       	std	Y+21, r25	; 0x15
    1324:	ae 8b       	std	Y+22, r26	; 0x16
    1326:	bf 8b       	std	Y+23, r27	; 0x17

			a_comm = conv_angle(get_angle());
    1328:	0e 94 2a 12 	call	0x2454	; 0x2454 <get_angle>
    132c:	0e 94 33 12 	call	0x2466	; 0x2466 <conv_angle>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	88 8b       	std	Y+16, r24	; 0x10
    1336:	99 8b       	std	Y+17, r25	; 0x11
    1338:	aa 8b       	std	Y+18, r26	; 0x12
    133a:	bb 8b       	std	Y+19, r27	; 0x13

			CalculPWM(v_comm, a_comm, Vg, Vd, &Duty_G, &Duty_D);
    133c:	00 d0       	rcall	.+0      	; 0x133e <main+0x1e2>
    133e:	ed b7       	in	r30, 0x3d	; 61
    1340:	fe b7       	in	r31, 0x3e	; 62
    1342:	31 96       	adiw	r30, 0x01	; 1
    1344:	2c 89       	ldd	r18, Y+20	; 0x14
    1346:	3d 89       	ldd	r19, Y+21	; 0x15
    1348:	4e 89       	ldd	r20, Y+22	; 0x16
    134a:	5f 89       	ldd	r21, Y+23	; 0x17
    134c:	e8 88       	ldd	r14, Y+16	; 0x10
    134e:	f9 88       	ldd	r15, Y+17	; 0x11
    1350:	0a 89       	ldd	r16, Y+18	; 0x12
    1352:	1b 89       	ldd	r17, Y+19	; 0x13
    1354:	ac 84       	ldd	r10, Y+12	; 0x0c
    1356:	bd 84       	ldd	r11, Y+13	; 0x0d
    1358:	ce 84       	ldd	r12, Y+14	; 0x0e
    135a:	df 84       	ldd	r13, Y+15	; 0x0f
    135c:	68 84       	ldd	r6, Y+8	; 0x08
    135e:	79 84       	ldd	r7, Y+9	; 0x09
    1360:	8a 84       	ldd	r8, Y+10	; 0x0a
    1362:	9b 84       	ldd	r9, Y+11	; 0x0b
    1364:	de 01       	movw	r26, r28
    1366:	ad 51       	subi	r26, 0x1D	; 29
    1368:	bf 4f       	sbci	r27, 0xFF	; 255
    136a:	ce 01       	movw	r24, r28
    136c:	89 51       	subi	r24, 0x19	; 25
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	ca 01       	movw	r24, r20
    1376:	b9 01       	movw	r22, r18
    1378:	a8 01       	movw	r20, r16
    137a:	97 01       	movw	r18, r14
    137c:	86 01       	movw	r16, r12
    137e:	75 01       	movw	r14, r10
    1380:	64 01       	movw	r12, r8
    1382:	53 01       	movw	r10, r6
    1384:	4d 01       	movw	r8, r26
    1386:	0e 94 24 0a 	call	0x1448	; 0x1448 <CalculPWM>
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0

			if(robot_enable)
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	88 23       	and	r24, r24
    1392:	81 f1       	breq	.+96     	; 0x13f4 <main+0x298>
			{

				duty_Gi = Duty_G*100;
    1394:	fe 01       	movw	r30, r28
    1396:	ed 51       	subi	r30, 0x1D	; 29
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	a2 81       	ldd	r26, Z+2	; 0x02
    13a0:	b3 81       	ldd	r27, Z+3	; 0x03
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	48 ec       	ldi	r20, 0xC8	; 200
    13ac:	52 e4       	ldi	r21, 0x42	; 66
    13ae:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fixsfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	8a 83       	std	Y+2, r24	; 0x02

				set_PWMg(Duty_G);
    13c6:	fe 01       	movw	r30, r28
    13c8:	ed 51       	subi	r30, 0x1D	; 29
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	a2 81       	ldd	r26, Z+2	; 0x02
    13d2:	b3 81       	ldd	r27, Z+3	; 0x03
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <set_PWMg>
				set_PWMd(Duty_D);
    13dc:	fe 01       	movw	r30, r28
    13de:	e9 51       	subi	r30, 0x19	; 25
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	a2 81       	ldd	r26, Z+2	; 0x02
    13e8:	b3 81       	ldd	r27, Z+3	; 0x03
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <set_PWMd>
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <main+0x2a6>
			}
			else
			{
				PORTD = (0xCC)|(PORTD&0x33);
    13f4:	a2 e3       	ldi	r26, 0x32	; 50
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e2 e3       	ldi	r30, 0x32	; 50
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8c 6c       	ori	r24, 0xCC	; 204
    1400:	8c 93       	st	X, r24
			
		}
		

		/* Controle stop/start */
		if(!(PINA&0x40))
    1402:	e9 e3       	ldi	r30, 0x39	; 57
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	80 74       	andi	r24, 0x40	; 64
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	51 f4       	brne	.+20     	; 0x1428 <main+0x2cc>
		{
			robot_enable = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
			set_led(6, 0);
    1418:	86 e0       	ldi	r24, 0x06	; 6
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
			set_led(7, 1);
    1420:	87 e0       	ldi	r24, 0x07	; 7
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
		}
		if(!(PINA&0x80))
    1428:	e9 e3       	ldi	r30, 0x39	; 57
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	0c f4       	brge	.+2      	; 0x1434 <main+0x2d8>
    1432:	e0 ce       	rjmp	.-576    	; 0x11f4 <main+0x98>
		{
			robot_enable = 0;
    1434:	19 82       	std	Y+1, r1	; 0x01
			set_led(6, 1);
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
			set_led(7, 0);
    143e:	87 e0       	ldi	r24, 0x07	; 7
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
    1446:	d6 ce       	rjmp	.-596    	; 0x11f4 <main+0x98>

00001448 <CalculPWM>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permetttant de faire le calcul du PWM */
void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
{
    1448:	8f 92       	push	r8
    144a:	9f 92       	push	r9
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	c6 55       	subi	r28, 0x56	; 86
    1466:	d0 40       	sbci	r29, 0x00	; 0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	69 83       	std	Y+1, r22	; 0x01
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	2d 83       	std	Y+5, r18	; 0x05
    147c:	3e 83       	std	Y+6, r19	; 0x06
    147e:	4f 83       	std	Y+7, r20	; 0x07
    1480:	58 87       	std	Y+8, r21	; 0x08
    1482:	e9 86       	std	Y+9, r14	; 0x09
    1484:	fa 86       	std	Y+10, r15	; 0x0a
    1486:	0b 87       	std	Y+11, r16	; 0x0b
    1488:	1c 87       	std	Y+12, r17	; 0x0c
    148a:	ad 86       	std	Y+13, r10	; 0x0d
    148c:	be 86       	std	Y+14, r11	; 0x0e
    148e:	cf 86       	std	Y+15, r12	; 0x0f
    1490:	d8 8a       	std	Y+16, r13	; 0x10
    1492:	9a 8a       	std	Y+18, r9	; 0x12
    1494:	89 8a       	std	Y+17, r8	; 0x11
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
    1496:	69 85       	ldd	r22, Y+9	; 0x09
    1498:	7a 85       	ldd	r23, Y+10	; 0x0a
    149a:	8b 85       	ldd	r24, Y+11	; 0x0b
    149c:	9c 85       	ldd	r25, Y+12	; 0x0c
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	5c f4       	brge	.+22     	; 0x14c4 <CalculPWM+0x7c>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a0 e8       	ldi	r26, 0x80	; 128
    14b4:	bf e3       	ldi	r27, 0x3F	; 63
    14b6:	67 96       	adiw	r28, 0x17	; 23
    14b8:	8c af       	std	Y+60, r24	; 0x3c
    14ba:	9d af       	std	Y+61, r25	; 0x3d
    14bc:	ae af       	std	Y+62, r26	; 0x3e
    14be:	bf af       	std	Y+63, r27	; 0x3f
    14c0:	67 97       	sbiw	r28, 0x17	; 23
    14c2:	2d c0       	rjmp	.+90     	; 0x151e <CalculPWM+0xd6>
    14c4:	69 85       	ldd	r22, Y+9	; 0x09
    14c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    14c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f eb       	ldi	r21, 0xBF	; 191
    14d4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	5c f4       	brge	.+22     	; 0x14f2 <CalculPWM+0xaa>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	a0 e8       	ldi	r26, 0x80	; 128
    14e2:	bf eb       	ldi	r27, 0xBF	; 191
    14e4:	63 96       	adiw	r28, 0x13	; 19
    14e6:	8c af       	std	Y+60, r24	; 0x3c
    14e8:	9d af       	std	Y+61, r25	; 0x3d
    14ea:	ae af       	std	Y+62, r26	; 0x3e
    14ec:	bf af       	std	Y+63, r27	; 0x3f
    14ee:	63 97       	sbiw	r28, 0x13	; 19
    14f0:	0a c0       	rjmp	.+20     	; 0x1506 <CalculPWM+0xbe>
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    14f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    14fa:	63 96       	adiw	r28, 0x13	; 19
    14fc:	8c af       	std	Y+60, r24	; 0x3c
    14fe:	9d af       	std	Y+61, r25	; 0x3d
    1500:	ae af       	std	Y+62, r26	; 0x3e
    1502:	bf af       	std	Y+63, r27	; 0x3f
    1504:	63 97       	sbiw	r28, 0x13	; 19
    1506:	63 96       	adiw	r28, 0x13	; 19
    1508:	8c ad       	ldd	r24, Y+60	; 0x3c
    150a:	9d ad       	ldd	r25, Y+61	; 0x3d
    150c:	ae ad       	ldd	r26, Y+62	; 0x3e
    150e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1510:	63 97       	sbiw	r28, 0x13	; 19
    1512:	67 96       	adiw	r28, 0x17	; 23
    1514:	8c af       	std	Y+60, r24	; 0x3c
    1516:	9d af       	std	Y+61, r25	; 0x3d
    1518:	ae af       	std	Y+62, r26	; 0x3e
    151a:	bf af       	std	Y+63, r27	; 0x3f
    151c:	67 97       	sbiw	r28, 0x17	; 23
    151e:	67 96       	adiw	r28, 0x17	; 23
    1520:	8c ad       	ldd	r24, Y+60	; 0x3c
    1522:	9d ad       	ldd	r25, Y+61	; 0x3d
    1524:	ae ad       	ldd	r26, Y+62	; 0x3e
    1526:	bf ad       	ldd	r27, Y+63	; 0x3f
    1528:	67 97       	sbiw	r28, 0x17	; 23
    152a:	89 87       	std	Y+9, r24	; 0x09
    152c:	9a 87       	std	Y+10, r25	; 0x0a
    152e:	ab 87       	std	Y+11, r26	; 0x0b
    1530:	bc 87       	std	Y+12, r27	; 0x0c
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
    1532:	6d 85       	ldd	r22, Y+13	; 0x0d
    1534:	7e 85       	ldd	r23, Y+14	; 0x0e
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	98 89       	ldd	r25, Y+16	; 0x10
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	5c f4       	brge	.+22     	; 0x1560 <CalculPWM+0x118>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	2f 96       	adiw	r28, 0x0f	; 15
    1554:	8c af       	std	Y+60, r24	; 0x3c
    1556:	9d af       	std	Y+61, r25	; 0x3d
    1558:	ae af       	std	Y+62, r26	; 0x3e
    155a:	bf af       	std	Y+63, r27	; 0x3f
    155c:	2f 97       	sbiw	r28, 0x0f	; 15
    155e:	2d c0       	rjmp	.+90     	; 0x15ba <CalculPWM+0x172>
    1560:	6d 85       	ldd	r22, Y+13	; 0x0d
    1562:	7e 85       	ldd	r23, Y+14	; 0x0e
    1564:	8f 85       	ldd	r24, Y+15	; 0x0f
    1566:	98 89       	ldd	r25, Y+16	; 0x10
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f eb       	ldi	r21, 0xBF	; 191
    1570:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	5c f4       	brge	.+22     	; 0x158e <CalculPWM+0x146>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e8       	ldi	r26, 0x80	; 128
    157e:	bf eb       	ldi	r27, 0xBF	; 191
    1580:	2b 96       	adiw	r28, 0x0b	; 11
    1582:	8c af       	std	Y+60, r24	; 0x3c
    1584:	9d af       	std	Y+61, r25	; 0x3d
    1586:	ae af       	std	Y+62, r26	; 0x3e
    1588:	bf af       	std	Y+63, r27	; 0x3f
    158a:	2b 97       	sbiw	r28, 0x0b	; 11
    158c:	0a c0       	rjmp	.+20     	; 0x15a2 <CalculPWM+0x15a>
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	af 85       	ldd	r26, Y+15	; 0x0f
    1594:	b8 89       	ldd	r27, Y+16	; 0x10
    1596:	2b 96       	adiw	r28, 0x0b	; 11
    1598:	8c af       	std	Y+60, r24	; 0x3c
    159a:	9d af       	std	Y+61, r25	; 0x3d
    159c:	ae af       	std	Y+62, r26	; 0x3e
    159e:	bf af       	std	Y+63, r27	; 0x3f
    15a0:	2b 97       	sbiw	r28, 0x0b	; 11
    15a2:	2b 96       	adiw	r28, 0x0b	; 11
    15a4:	8c ad       	ldd	r24, Y+60	; 0x3c
    15a6:	9d ad       	ldd	r25, Y+61	; 0x3d
    15a8:	ae ad       	ldd	r26, Y+62	; 0x3e
    15aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    15ac:	2b 97       	sbiw	r28, 0x0b	; 11
    15ae:	2f 96       	adiw	r28, 0x0f	; 15
    15b0:	8c af       	std	Y+60, r24	; 0x3c
    15b2:	9d af       	std	Y+61, r25	; 0x3d
    15b4:	ae af       	std	Y+62, r26	; 0x3e
    15b6:	bf af       	std	Y+63, r27	; 0x3f
    15b8:	2f 97       	sbiw	r28, 0x0f	; 15
    15ba:	2f 96       	adiw	r28, 0x0f	; 15
    15bc:	8c ad       	ldd	r24, Y+60	; 0x3c
    15be:	9d ad       	ldd	r25, Y+61	; 0x3d
    15c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    15c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    15c4:	2f 97       	sbiw	r28, 0x0f	; 15
    15c6:	8d 87       	std	Y+13, r24	; 0x0d
    15c8:	9e 87       	std	Y+14, r25	; 0x0e
    15ca:	af 87       	std	Y+15, r26	; 0x0f
    15cc:	b8 8b       	std	Y+16, r27	; 0x10
		
	Old_W = W;
    15ce:	80 91 d8 02 	lds	r24, 0x02D8
    15d2:	90 91 d9 02 	lds	r25, 0x02D9
    15d6:	a0 91 da 02 	lds	r26, 0x02DA
    15da:	b0 91 db 02 	lds	r27, 0x02DB
    15de:	80 93 d4 02 	sts	0x02D4, r24
    15e2:	90 93 d5 02 	sts	0x02D5, r25
    15e6:	a0 93 d6 02 	sts	0x02D6, r26
    15ea:	b0 93 d7 02 	sts	0x02D7, r27
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
    15ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    15f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    15f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f4:	98 89       	ldd	r25, Y+16	; 0x10
    15f6:	29 85       	ldd	r18, Y+9	; 0x09
    15f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    15fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    15fe:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	bc 01       	movw	r22, r24
    1608:	cd 01       	movw	r24, r26
    160a:	2a e1       	ldi	r18, 0x1A	; 26
    160c:	32 e6       	ldi	r19, 0x62	; 98
    160e:	46 e8       	ldi	r20, 0x86	; 134
    1610:	50 e4       	ldi	r21, 0x40	; 64
    1612:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	80 93 d8 02 	sts	0x02D8, r24
    161e:	90 93 d9 02 	sts	0x02D9, r25
    1622:	a0 93 da 02 	sts	0x02DA, r26
    1626:	b0 93 db 02 	sts	0x02DB, r27
	Vt    = 0.5*(Vd+Vg);
    162a:	6d 85       	ldd	r22, Y+13	; 0x0d
    162c:	7e 85       	ldd	r23, Y+14	; 0x0e
    162e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1630:	98 89       	ldd	r25, Y+16	; 0x10
    1632:	29 85       	ldd	r18, Y+9	; 0x09
    1634:	3a 85       	ldd	r19, Y+10	; 0x0a
    1636:	4b 85       	ldd	r20, Y+11	; 0x0b
    1638:	5c 85       	ldd	r21, Y+12	; 0x0c
    163a:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	80 93 d0 02 	sts	0x02D0, r24
    165a:	90 93 d1 02 	sts	0x02D1, r25
    165e:	a0 93 d2 02 	sts	0x02D2, r26
    1662:	b0 93 d3 02 	sts	0x02D3, r27

	Angle = Angle + (0.5)*TS*(W+Old_W);
    1666:	80 91 d8 02 	lds	r24, 0x02D8
    166a:	90 91 d9 02 	lds	r25, 0x02D9
    166e:	a0 91 da 02 	lds	r26, 0x02DA
    1672:	b0 91 db 02 	lds	r27, 0x02DB
    1676:	20 91 d4 02 	lds	r18, 0x02D4
    167a:	30 91 d5 02 	lds	r19, 0x02D5
    167e:	40 91 d6 02 	lds	r20, 0x02D6
    1682:	50 91 d7 02 	lds	r21, 0x02D7
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	37 ed       	ldi	r19, 0xD7	; 215
    169a:	43 e2       	ldi	r20, 0x23	; 35
    169c:	5b e3       	ldi	r21, 0x3B	; 59
    169e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	20 91 e0 02 	lds	r18, 0x02E0
    16aa:	30 91 e1 02 	lds	r19, 0x02E1
    16ae:	40 91 e2 02 	lds	r20, 0x02E2
    16b2:	50 91 e3 02 	lds	r21, 0x02E3
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	80 93 e0 02 	sts	0x02E0, r24
    16c6:	90 93 e1 02 	sts	0x02E1, r25
    16ca:	a0 93 e2 02 	sts	0x02E2, r26
    16ce:	b0 93 e3 02 	sts	0x02E3, r27
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
    16d2:	80 91 e0 02 	lds	r24, 0x02E0
    16d6:	90 91 e1 02 	lds	r25, 0x02E1
    16da:	a0 91 e2 02 	lds	r26, 0x02E2
    16de:	b0 91 e3 02 	lds	r27, 0x02E3
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	2b ed       	ldi	r18, 0xDB	; 219
    16e8:	3f e0       	ldi	r19, 0x0F	; 15
    16ea:	49 ec       	ldi	r20, 0xC9	; 201
    16ec:	50 e4       	ldi	r21, 0x40	; 64
    16ee:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	cc f4       	brge	.+50     	; 0x1728 <CalculPWM+0x2e0>
    16f6:	80 91 e0 02 	lds	r24, 0x02E0
    16fa:	90 91 e1 02 	lds	r25, 0x02E1
    16fe:	a0 91 e2 02 	lds	r26, 0x02E2
    1702:	b0 91 e3 02 	lds	r27, 0x02E3
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	2b ed       	ldi	r18, 0xDB	; 219
    170c:	3f e0       	ldi	r19, 0x0F	; 15
    170e:	49 ec       	ldi	r20, 0xC9	; 201
    1710:	50 e4       	ldi	r21, 0x40	; 64
    1712:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	27 96       	adiw	r28, 0x07	; 7
    171c:	8c af       	std	Y+60, r24	; 0x3c
    171e:	9d af       	std	Y+61, r25	; 0x3d
    1720:	ae af       	std	Y+62, r26	; 0x3e
    1722:	bf af       	std	Y+63, r27	; 0x3f
    1724:	27 97       	sbiw	r28, 0x07	; 7
    1726:	45 c0       	rjmp	.+138    	; 0x17b2 <CalculPWM+0x36a>
    1728:	80 91 e0 02 	lds	r24, 0x02E0
    172c:	90 91 e1 02 	lds	r25, 0x02E1
    1730:	a0 91 e2 02 	lds	r26, 0x02E2
    1734:	b0 91 e3 02 	lds	r27, 0x02E3
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	cc f4       	brge	.+50     	; 0x177e <CalculPWM+0x336>
    174c:	80 91 e0 02 	lds	r24, 0x02E0
    1750:	90 91 e1 02 	lds	r25, 0x02E1
    1754:	a0 91 e2 02 	lds	r26, 0x02E2
    1758:	b0 91 e3 02 	lds	r27, 0x02E3
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	2b ed       	ldi	r18, 0xDB	; 219
    1762:	3f e0       	ldi	r19, 0x0F	; 15
    1764:	49 ec       	ldi	r20, 0xC9	; 201
    1766:	50 e4       	ldi	r21, 0x40	; 64
    1768:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	23 96       	adiw	r28, 0x03	; 3
    1772:	8c af       	std	Y+60, r24	; 0x3c
    1774:	9d af       	std	Y+61, r25	; 0x3d
    1776:	ae af       	std	Y+62, r26	; 0x3e
    1778:	bf af       	std	Y+63, r27	; 0x3f
    177a:	23 97       	sbiw	r28, 0x03	; 3
    177c:	0e c0       	rjmp	.+28     	; 0x179a <CalculPWM+0x352>
    177e:	80 91 e0 02 	lds	r24, 0x02E0
    1782:	90 91 e1 02 	lds	r25, 0x02E1
    1786:	a0 91 e2 02 	lds	r26, 0x02E2
    178a:	b0 91 e3 02 	lds	r27, 0x02E3
    178e:	23 96       	adiw	r28, 0x03	; 3
    1790:	8c af       	std	Y+60, r24	; 0x3c
    1792:	9d af       	std	Y+61, r25	; 0x3d
    1794:	ae af       	std	Y+62, r26	; 0x3e
    1796:	bf af       	std	Y+63, r27	; 0x3f
    1798:	23 97       	sbiw	r28, 0x03	; 3
    179a:	23 96       	adiw	r28, 0x03	; 3
    179c:	8c ad       	ldd	r24, Y+60	; 0x3c
    179e:	9d ad       	ldd	r25, Y+61	; 0x3d
    17a0:	ae ad       	ldd	r26, Y+62	; 0x3e
    17a2:	bf ad       	ldd	r27, Y+63	; 0x3f
    17a4:	23 97       	sbiw	r28, 0x03	; 3
    17a6:	27 96       	adiw	r28, 0x07	; 7
    17a8:	8c af       	std	Y+60, r24	; 0x3c
    17aa:	9d af       	std	Y+61, r25	; 0x3d
    17ac:	ae af       	std	Y+62, r26	; 0x3e
    17ae:	bf af       	std	Y+63, r27	; 0x3f
    17b0:	27 97       	sbiw	r28, 0x07	; 7
    17b2:	27 96       	adiw	r28, 0x07	; 7
    17b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    17b6:	9d ad       	ldd	r25, Y+61	; 0x3d
    17b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    17ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    17bc:	27 97       	sbiw	r28, 0x07	; 7
    17be:	80 93 e0 02 	sts	0x02E0, r24
    17c2:	90 93 e1 02 	sts	0x02E1, r25
    17c6:	a0 93 e2 02 	sts	0x02E2, r26
    17ca:	b0 93 e3 02 	sts	0x02E3, r27
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;
    17ce:	80 91 e0 02 	lds	r24, 0x02E0
    17d2:	90 91 e1 02 	lds	r25, 0x02E1
    17d6:	a0 91 e2 02 	lds	r26, 0x02E2
    17da:	b0 91 e3 02 	lds	r27, 0x02E3
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	2b ed       	ldi	r18, 0xDB	; 219
    17e4:	3f e0       	ldi	r19, 0x0F	; 15
    17e6:	49 e4       	ldi	r20, 0x49	; 73
    17e8:	50 e4       	ldi	r21, 0x40	; 64
    17ea:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	2d 81       	ldd	r18, Y+5	; 0x05
    17f8:	3e 81       	ldd	r19, Y+6	; 0x06
    17fa:	4f 81       	ldd	r20, Y+7	; 0x07
    17fc:	58 85       	ldd	r21, Y+8	; 0x08
    17fe:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__lesf2>
    1802:	18 16       	cp	r1, r24
    1804:	8c f0       	brlt	.+34     	; 0x1828 <CalculPWM+0x3e0>
    1806:	6d 81       	ldd	r22, Y+5	; 0x05
    1808:	7e 81       	ldd	r23, Y+6	; 0x06
    180a:	8f 81       	ldd	r24, Y+7	; 0x07
    180c:	98 85       	ldd	r25, Y+8	; 0x08
    180e:	2b ed       	ldi	r18, 0xDB	; 219
    1810:	3f e0       	ldi	r19, 0x0F	; 15
    1812:	49 ec       	ldi	r20, 0xC9	; 201
    1814:	50 e4       	ldi	r21, 0x40	; 64
    1816:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8b af       	std	Y+59, r24	; 0x3b
    1820:	9c af       	std	Y+60, r25	; 0x3c
    1822:	ad af       	std	Y+61, r26	; 0x3d
    1824:	be af       	std	Y+62, r27	; 0x3e
    1826:	3d c0       	rjmp	.+122    	; 0x18a2 <CalculPWM+0x45a>
    1828:	80 91 e0 02 	lds	r24, 0x02E0
    182c:	90 91 e1 02 	lds	r25, 0x02E1
    1830:	a0 91 e2 02 	lds	r26, 0x02E2
    1834:	b0 91 e3 02 	lds	r27, 0x02E3
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	2b ed       	ldi	r18, 0xDB	; 219
    183e:	3f e0       	ldi	r19, 0x0F	; 15
    1840:	49 e4       	ldi	r20, 0x49	; 73
    1842:	50 e4       	ldi	r21, 0x40	; 64
    1844:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	2d 81       	ldd	r18, Y+5	; 0x05
    1852:	3e 81       	ldd	r19, Y+6	; 0x06
    1854:	4f 81       	ldd	r20, Y+7	; 0x07
    1856:	58 85       	ldd	r21, Y+8	; 0x08
    1858:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__gesf2>
    185c:	88 23       	and	r24, r24
    185e:	8c f0       	brlt	.+34     	; 0x1882 <CalculPWM+0x43a>
    1860:	6d 81       	ldd	r22, Y+5	; 0x05
    1862:	7e 81       	ldd	r23, Y+6	; 0x06
    1864:	8f 81       	ldd	r24, Y+7	; 0x07
    1866:	98 85       	ldd	r25, Y+8	; 0x08
    1868:	2b ed       	ldi	r18, 0xDB	; 219
    186a:	3f e0       	ldi	r19, 0x0F	; 15
    186c:	49 ec       	ldi	r20, 0xC9	; 201
    186e:	50 e4       	ldi	r21, 0x40	; 64
    1870:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8f ab       	std	Y+55, r24	; 0x37
    187a:	98 af       	std	Y+56, r25	; 0x38
    187c:	a9 af       	std	Y+57, r26	; 0x39
    187e:	ba af       	std	Y+58, r27	; 0x3a
    1880:	08 c0       	rjmp	.+16     	; 0x1892 <CalculPWM+0x44a>
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	af 81       	ldd	r26, Y+7	; 0x07
    1888:	b8 85       	ldd	r27, Y+8	; 0x08
    188a:	8f ab       	std	Y+55, r24	; 0x37
    188c:	98 af       	std	Y+56, r25	; 0x38
    188e:	a9 af       	std	Y+57, r26	; 0x39
    1890:	ba af       	std	Y+58, r27	; 0x3a
    1892:	8f a9       	ldd	r24, Y+55	; 0x37
    1894:	98 ad       	ldd	r25, Y+56	; 0x38
    1896:	a9 ad       	ldd	r26, Y+57	; 0x39
    1898:	ba ad       	ldd	r27, Y+58	; 0x3a
    189a:	8b af       	std	Y+59, r24	; 0x3b
    189c:	9c af       	std	Y+60, r25	; 0x3c
    189e:	ad af       	std	Y+61, r26	; 0x3d
    18a0:	be af       	std	Y+62, r27	; 0x3e
    18a2:	20 91 e0 02 	lds	r18, 0x02E0
    18a6:	30 91 e1 02 	lds	r19, 0x02E1
    18aa:	40 91 e2 02 	lds	r20, 0x02E2
    18ae:	50 91 e3 02 	lds	r21, 0x02E3
    18b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    18b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    18b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ba:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	80 93 dc 02 	sts	0x02DC, r24
    18c6:	90 93 dd 02 	sts	0x02DD, r25
    18ca:	a0 93 de 02 	sts	0x02DE, r26
    18ce:	b0 93 df 02 	sts	0x02DF, r27

	Ut = -H11*Vt + H12*Vitesse_D;
    18d2:	80 91 d0 02 	lds	r24, 0x02D0
    18d6:	90 91 d1 02 	lds	r25, 0x02D1
    18da:	a0 91 d2 02 	lds	r26, 0x02D2
    18de:	b0 91 d3 02 	lds	r27, 0x02D3
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	28 ee       	ldi	r18, 0xE8	; 232
    18e8:	31 eb       	ldi	r19, 0xB1	; 177
    18ea:	49 e7       	ldi	r20, 0x79	; 121
    18ec:	50 ec       	ldi	r21, 0xC0	; 192
    18ee:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	7c 01       	movw	r14, r24
    18f8:	8d 01       	movw	r16, r26
    18fa:	69 81       	ldd	r22, Y+1	; 0x01
    18fc:	7a 81       	ldd	r23, Y+2	; 0x02
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	24 ef       	ldi	r18, 0xF4	; 244
    1904:	38 ed       	ldi	r19, 0xD8	; 216
    1906:	4c e9       	ldi	r20, 0x9C	; 156
    1908:	50 e4       	ldi	r21, 0x40	; 64
    190a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9c 01       	movw	r18, r24
    1914:	ad 01       	movw	r20, r26
    1916:	c8 01       	movw	r24, r16
    1918:	b7 01       	movw	r22, r14
    191a:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	80 93 cc 02 	sts	0x02CC, r24
    1926:	90 93 cd 02 	sts	0x02CD, r25
    192a:	a0 93 ce 02 	sts	0x02CE, r26
    192e:	b0 93 cf 02 	sts	0x02CF, r27
	Ua = H21*ErreurAngle - H22*W;
    1932:	80 91 dc 02 	lds	r24, 0x02DC
    1936:	90 91 dd 02 	lds	r25, 0x02DD
    193a:	a0 91 de 02 	lds	r26, 0x02DE
    193e:	b0 91 df 02 	lds	r27, 0x02DF
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	21 e2       	ldi	r18, 0x21	; 33
    1948:	37 ea       	ldi	r19, 0xA7	; 167
    194a:	44 e9       	ldi	r20, 0x94	; 148
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	7c 01       	movw	r14, r24
    1958:	8d 01       	movw	r16, r26
    195a:	80 91 d8 02 	lds	r24, 0x02D8
    195e:	90 91 d9 02 	lds	r25, 0x02D9
    1962:	a0 91 da 02 	lds	r26, 0x02DA
    1966:	b0 91 db 02 	lds	r27, 0x02DB
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	28 e1       	ldi	r18, 0x18	; 24
    1970:	37 ea       	ldi	r19, 0xA7	; 167
    1972:	44 e1       	ldi	r20, 0x14	; 20
    1974:	5f eb       	ldi	r21, 0xBF	; 191
    1976:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9c 01       	movw	r18, r24
    1980:	ad 01       	movw	r20, r26
    1982:	c8 01       	movw	r24, r16
    1984:	b7 01       	movw	r22, r14
    1986:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	80 93 c8 02 	sts	0x02C8, r24
    1992:	90 93 c9 02 	sts	0x02C9, r25
    1996:	a0 93 ca 02 	sts	0x02CA, r26
    199a:	b0 93 cb 02 	sts	0x02CB, r27
			
	Signe_Ua = (Ua >= 0.0)   ? 1 : -1;
    199e:	80 91 c8 02 	lds	r24, 0x02C8
    19a2:	90 91 c9 02 	lds	r25, 0x02C9
    19a6:	a0 91 ca 02 	lds	r26, 0x02CA
    19aa:	b0 91 cb 02 	lds	r27, 0x02CB
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__gesf2>
    19be:	88 23       	and	r24, r24
    19c0:	2c f0       	brlt	.+10     	; 0x19cc <CalculPWM+0x584>
    19c2:	a1 e0       	ldi	r26, 0x01	; 1
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	be ab       	std	Y+54, r27	; 0x36
    19c8:	ad ab       	std	Y+53, r26	; 0x35
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <CalculPWM+0x58c>
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	9f ef       	ldi	r25, 0xFF	; 255
    19d0:	9e ab       	std	Y+54, r25	; 0x36
    19d2:	8d ab       	std	Y+53, r24	; 0x35
    19d4:	ad a9       	ldd	r26, Y+53	; 0x35
    19d6:	be a9       	ldd	r27, Y+54	; 0x36
    19d8:	b0 93 c7 02 	sts	0x02C7, r27
    19dc:	a0 93 c6 02 	sts	0x02C6, r26
	Signe_Ut = (Ut >= 0.0) ? 1 : -1;
    19e0:	80 91 cc 02 	lds	r24, 0x02CC
    19e4:	90 91 cd 02 	lds	r25, 0x02CD
    19e8:	a0 91 ce 02 	lds	r26, 0x02CE
    19ec:	b0 91 cf 02 	lds	r27, 0x02CF
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__gesf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f0       	brlt	.+10     	; 0x1a0e <CalculPWM+0x5c6>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9c ab       	std	Y+52, r25	; 0x34
    1a0a:	8b ab       	std	Y+51, r24	; 0x33
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <CalculPWM+0x5ce>
    1a0e:	af ef       	ldi	r26, 0xFF	; 255
    1a10:	bf ef       	ldi	r27, 0xFF	; 255
    1a12:	bc ab       	std	Y+52, r27	; 0x34
    1a14:	ab ab       	std	Y+51, r26	; 0x33
    1a16:	8b a9       	ldd	r24, Y+51	; 0x33
    1a18:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1a:	90 93 c5 02 	sts	0x02C5, r25
    1a1e:	80 93 c4 02 	sts	0x02C4, r24
	
	Ua = (Signe_Ua*Ua > 1.0) ? Signe_Ua*1.0 : ((Signe_Ua*Ua <= 0.05) ? 0.0 : Ua);
    1a22:	80 91 c6 02 	lds	r24, 0x02C6
    1a26:	90 91 c7 02 	lds	r25, 0x02C7
    1a2a:	aa 27       	eor	r26, r26
    1a2c:	97 fd       	sbrc	r25, 7
    1a2e:	a0 95       	com	r26
    1a30:	ba 2f       	mov	r27, r26
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	20 91 c8 02 	lds	r18, 0x02C8
    1a42:	30 91 c9 02 	lds	r19, 0x02C9
    1a46:	40 91 ca 02 	lds	r20, 0x02CA
    1a4a:	50 91 cb 02 	lds	r21, 0x02CB
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	8c f4       	brge	.+34     	; 0x1a90 <CalculPWM+0x648>
    1a6e:	80 91 c6 02 	lds	r24, 0x02C6
    1a72:	90 91 c7 02 	lds	r25, 0x02C7
    1a76:	aa 27       	eor	r26, r26
    1a78:	97 fd       	sbrc	r25, 7
    1a7a:	a0 95       	com	r26
    1a7c:	ba 2f       	mov	r27, r26
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1a86:	6f a7       	std	Y+47, r22	; 0x2f
    1a88:	78 ab       	std	Y+48, r23	; 0x30
    1a8a:	89 ab       	std	Y+49, r24	; 0x31
    1a8c:	9a ab       	std	Y+50, r25	; 0x32
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <CalculPWM+0x6ce>
    1a90:	80 91 c6 02 	lds	r24, 0x02C6
    1a94:	90 91 c7 02 	lds	r25, 0x02C7
    1a98:	aa 27       	eor	r26, r26
    1a9a:	97 fd       	sbrc	r25, 7
    1a9c:	a0 95       	com	r26
    1a9e:	ba 2f       	mov	r27, r26
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	20 91 c8 02 	lds	r18, 0x02C8
    1ab0:	30 91 c9 02 	lds	r19, 0x02C9
    1ab4:	40 91 ca 02 	lds	r20, 0x02CA
    1ab8:	50 91 cb 02 	lds	r21, 0x02CB
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	2d ec       	ldi	r18, 0xCD	; 205
    1ace:	3c ec       	ldi	r19, 0xCC	; 204
    1ad0:	4c e4       	ldi	r20, 0x4C	; 76
    1ad2:	5d e3       	ldi	r21, 0x3D	; 61
    1ad4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__lesf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f0       	brlt	.+18     	; 0x1aee <CalculPWM+0x6a6>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	8b a7       	std	Y+43, r24	; 0x2b
    1ae6:	9c a7       	std	Y+44, r25	; 0x2c
    1ae8:	ad a7       	std	Y+45, r26	; 0x2d
    1aea:	be a7       	std	Y+46, r27	; 0x2e
    1aec:	0c c0       	rjmp	.+24     	; 0x1b06 <CalculPWM+0x6be>
    1aee:	80 91 c8 02 	lds	r24, 0x02C8
    1af2:	90 91 c9 02 	lds	r25, 0x02C9
    1af6:	a0 91 ca 02 	lds	r26, 0x02CA
    1afa:	b0 91 cb 02 	lds	r27, 0x02CB
    1afe:	8b a7       	std	Y+43, r24	; 0x2b
    1b00:	9c a7       	std	Y+44, r25	; 0x2c
    1b02:	ad a7       	std	Y+45, r26	; 0x2d
    1b04:	be a7       	std	Y+46, r27	; 0x2e
    1b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0a:	ad a5       	ldd	r26, Y+45	; 0x2d
    1b0c:	be a5       	ldd	r27, Y+46	; 0x2e
    1b0e:	8f a7       	std	Y+47, r24	; 0x2f
    1b10:	98 ab       	std	Y+48, r25	; 0x30
    1b12:	a9 ab       	std	Y+49, r26	; 0x31
    1b14:	ba ab       	std	Y+50, r27	; 0x32
    1b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b18:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1a:	a9 a9       	ldd	r26, Y+49	; 0x31
    1b1c:	ba a9       	ldd	r27, Y+50	; 0x32
    1b1e:	80 93 c8 02 	sts	0x02C8, r24
    1b22:	90 93 c9 02 	sts	0x02C9, r25
    1b26:	a0 93 ca 02 	sts	0x02CA, r26
    1b2a:	b0 93 cb 02 	sts	0x02CB, r27
	Ut = (Signe_Ut*Ut > 1.0) ? Signe_Ut*1.0 : Ut;
    1b2e:	80 91 c4 02 	lds	r24, 0x02C4
    1b32:	90 91 c5 02 	lds	r25, 0x02C5
    1b36:	aa 27       	eor	r26, r26
    1b38:	97 fd       	sbrc	r25, 7
    1b3a:	a0 95       	com	r26
    1b3c:	ba 2f       	mov	r27, r26
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	20 91 cc 02 	lds	r18, 0x02CC
    1b4e:	30 91 cd 02 	lds	r19, 0x02CD
    1b52:	40 91 ce 02 	lds	r20, 0x02CE
    1b56:	50 91 cf 02 	lds	r21, 0x02CF
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	8c f4       	brge	.+34     	; 0x1b9c <CalculPWM+0x754>
    1b7a:	80 91 c4 02 	lds	r24, 0x02C4
    1b7e:	90 91 c5 02 	lds	r25, 0x02C5
    1b82:	aa 27       	eor	r26, r26
    1b84:	97 fd       	sbrc	r25, 7
    1b86:	a0 95       	com	r26
    1b88:	ba 2f       	mov	r27, r26
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1b92:	6f a3       	std	Y+39, r22	; 0x27
    1b94:	78 a7       	std	Y+40, r23	; 0x28
    1b96:	89 a7       	std	Y+41, r24	; 0x29
    1b98:	9a a7       	std	Y+42, r25	; 0x2a
    1b9a:	0c c0       	rjmp	.+24     	; 0x1bb4 <CalculPWM+0x76c>
    1b9c:	80 91 cc 02 	lds	r24, 0x02CC
    1ba0:	90 91 cd 02 	lds	r25, 0x02CD
    1ba4:	a0 91 ce 02 	lds	r26, 0x02CE
    1ba8:	b0 91 cf 02 	lds	r27, 0x02CF
    1bac:	8f a3       	std	Y+39, r24	; 0x27
    1bae:	98 a7       	std	Y+40, r25	; 0x28
    1bb0:	a9 a7       	std	Y+41, r26	; 0x29
    1bb2:	ba a7       	std	Y+42, r27	; 0x2a
    1bb4:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb6:	98 a5       	ldd	r25, Y+40	; 0x28
    1bb8:	a9 a5       	ldd	r26, Y+41	; 0x29
    1bba:	ba a5       	ldd	r27, Y+42	; 0x2a
    1bbc:	80 93 cc 02 	sts	0x02CC, r24
    1bc0:	90 93 cd 02 	sts	0x02CD, r25
    1bc4:	a0 93 ce 02 	sts	0x02CE, r26
    1bc8:	b0 93 cf 02 	sts	0x02CF, r27
	Ut = ((Signe_Ut*Ut) > (1.0 - Signe_Ua*Ua)) ? Signe_Ut*(1.0 - Signe_Ua*Ua) : Ut;
    1bcc:	80 91 c4 02 	lds	r24, 0x02C4
    1bd0:	90 91 c5 02 	lds	r25, 0x02C5
    1bd4:	aa 27       	eor	r26, r26
    1bd6:	97 fd       	sbrc	r25, 7
    1bd8:	a0 95       	com	r26
    1bda:	ba 2f       	mov	r27, r26
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	20 91 cc 02 	lds	r18, 0x02CC
    1bec:	30 91 cd 02 	lds	r19, 0x02CD
    1bf0:	40 91 ce 02 	lds	r20, 0x02CE
    1bf4:	50 91 cf 02 	lds	r21, 0x02CF
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	7c 01       	movw	r14, r24
    1c06:	8d 01       	movw	r16, r26
    1c08:	80 91 c6 02 	lds	r24, 0x02C6
    1c0c:	90 91 c7 02 	lds	r25, 0x02C7
    1c10:	aa 27       	eor	r26, r26
    1c12:	97 fd       	sbrc	r25, 7
    1c14:	a0 95       	com	r26
    1c16:	ba 2f       	mov	r27, r26
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	20 91 c8 02 	lds	r18, 0x02C8
    1c28:	30 91 c9 02 	lds	r19, 0x02C9
    1c2c:	40 91 ca 02 	lds	r20, 0x02CA
    1c30:	50 91 cb 02 	lds	r21, 0x02CB
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9c 01       	movw	r18, r24
    1c42:	ad 01       	movw	r20, r26
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	80 e8       	ldi	r24, 0x80	; 128
    1c4a:	9f e3       	ldi	r25, 0x3F	; 63
    1c4c:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9c 01       	movw	r18, r24
    1c56:	ad 01       	movw	r20, r26
    1c58:	c8 01       	movw	r24, r16
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	0c f0       	brlt	.+2      	; 0x1c66 <CalculPWM+0x81e>
    1c64:	41 c0       	rjmp	.+130    	; 0x1ce8 <CalculPWM+0x8a0>
    1c66:	80 91 c4 02 	lds	r24, 0x02C4
    1c6a:	90 91 c5 02 	lds	r25, 0x02C5
    1c6e:	aa 27       	eor	r26, r26
    1c70:	97 fd       	sbrc	r25, 7
    1c72:	a0 95       	com	r26
    1c74:	ba 2f       	mov	r27, r26
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1c7e:	7b 01       	movw	r14, r22
    1c80:	8c 01       	movw	r16, r24
    1c82:	80 91 c6 02 	lds	r24, 0x02C6
    1c86:	90 91 c7 02 	lds	r25, 0x02C7
    1c8a:	aa 27       	eor	r26, r26
    1c8c:	97 fd       	sbrc	r25, 7
    1c8e:	a0 95       	com	r26
    1c90:	ba 2f       	mov	r27, r26
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__floatsisf>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	20 91 c8 02 	lds	r18, 0x02C8
    1ca2:	30 91 c9 02 	lds	r19, 0x02C9
    1ca6:	40 91 ca 02 	lds	r20, 0x02CA
    1caa:	50 91 cb 02 	lds	r21, 0x02CB
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9c 01       	movw	r18, r24
    1cbc:	ad 01       	movw	r20, r26
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	80 e8       	ldi	r24, 0x80	; 128
    1cc4:	9f e3       	ldi	r25, 0x3F	; 63
    1cc6:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9c 01       	movw	r18, r24
    1cd0:	ad 01       	movw	r20, r26
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8b a3       	std	Y+35, r24	; 0x23
    1ce0:	9c a3       	std	Y+36, r25	; 0x24
    1ce2:	ad a3       	std	Y+37, r26	; 0x25
    1ce4:	be a3       	std	Y+38, r27	; 0x26
    1ce6:	0c c0       	rjmp	.+24     	; 0x1d00 <CalculPWM+0x8b8>
    1ce8:	80 91 cc 02 	lds	r24, 0x02CC
    1cec:	90 91 cd 02 	lds	r25, 0x02CD
    1cf0:	a0 91 ce 02 	lds	r26, 0x02CE
    1cf4:	b0 91 cf 02 	lds	r27, 0x02CF
    1cf8:	8b a3       	std	Y+35, r24	; 0x23
    1cfa:	9c a3       	std	Y+36, r25	; 0x24
    1cfc:	ad a3       	std	Y+37, r26	; 0x25
    1cfe:	be a3       	std	Y+38, r27	; 0x26
    1d00:	8b a1       	ldd	r24, Y+35	; 0x23
    1d02:	9c a1       	ldd	r25, Y+36	; 0x24
    1d04:	ad a1       	ldd	r26, Y+37	; 0x25
    1d06:	be a1       	ldd	r27, Y+38	; 0x26
    1d08:	80 93 cc 02 	sts	0x02CC, r24
    1d0c:	90 93 cd 02 	sts	0x02CD, r25
    1d10:	a0 93 ce 02 	sts	0x02CE, r26
    1d14:	b0 93 cf 02 	sts	0x02CF, r27


	*Duty_D = (Ut+Ua);
    1d18:	80 91 cc 02 	lds	r24, 0x02CC
    1d1c:	90 91 cd 02 	lds	r25, 0x02CD
    1d20:	a0 91 ce 02 	lds	r26, 0x02CE
    1d24:	b0 91 cf 02 	lds	r27, 0x02CF
    1d28:	20 91 c8 02 	lds	r18, 0x02C8
    1d2c:	30 91 c9 02 	lds	r19, 0x02C9
    1d30:	40 91 ca 02 	lds	r20, 0x02CA
    1d34:	50 91 cb 02 	lds	r21, 0x02CB
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	a7 96       	adiw	r28, 0x27	; 39
    1d46:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d48:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d4a:	a7 97       	sbiw	r28, 0x27	; 39
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
	*Duty_G = (Ut-Ua);
    1d54:	80 91 cc 02 	lds	r24, 0x02CC
    1d58:	90 91 cd 02 	lds	r25, 0x02CD
    1d5c:	a0 91 ce 02 	lds	r26, 0x02CE
    1d60:	b0 91 cf 02 	lds	r27, 0x02CF
    1d64:	20 91 c8 02 	lds	r18, 0x02C8
    1d68:	30 91 c9 02 	lds	r19, 0x02C9
    1d6c:	40 91 ca 02 	lds	r20, 0x02CA
    1d70:	50 91 cb 02 	lds	r21, 0x02CB
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	e9 89       	ldd	r30, Y+17	; 0x11
    1d82:	fa 89       	ldd	r31, Y+18	; 0x12
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03

	*Duty_D = (*Duty_D > 0.99) ? 0.99 : ((*Duty_D < -0.99) ? -0.99 : *Duty_D);
    1d8c:	a7 96       	adiw	r28, 0x27	; 39
    1d8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d90:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d92:	a7 97       	sbiw	r28, 0x27	; 39
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	a2 81       	ldd	r26, Z+2	; 0x02
    1d9a:	b3 81       	ldd	r27, Z+3	; 0x03
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	24 ea       	ldi	r18, 0xA4	; 164
    1da2:	30 e7       	ldi	r19, 0x70	; 112
    1da4:	4d e7       	ldi	r20, 0x7D	; 125
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f4       	brge	.+18     	; 0x1dc2 <CalculPWM+0x97a>
    1db0:	84 ea       	ldi	r24, 0xA4	; 164
    1db2:	90 e7       	ldi	r25, 0x70	; 112
    1db4:	ad e7       	ldi	r26, 0x7D	; 125
    1db6:	bf e3       	ldi	r27, 0x3F	; 63
    1db8:	8f 8f       	std	Y+31, r24	; 0x1f
    1dba:	98 a3       	std	Y+32, r25	; 0x20
    1dbc:	a9 a3       	std	Y+33, r26	; 0x21
    1dbe:	ba a3       	std	Y+34, r27	; 0x22
    1dc0:	2f c0       	rjmp	.+94     	; 0x1e20 <CalculPWM+0x9d8>
    1dc2:	a7 96       	adiw	r28, 0x27	; 39
    1dc4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dc6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dc8:	a7 97       	sbiw	r28, 0x27	; 39
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	a2 81       	ldd	r26, Z+2	; 0x02
    1dd0:	b3 81       	ldd	r27, Z+3	; 0x03
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	24 ea       	ldi	r18, 0xA4	; 164
    1dd8:	30 e7       	ldi	r19, 0x70	; 112
    1dda:	4d e7       	ldi	r20, 0x7D	; 125
    1ddc:	5f eb       	ldi	r21, 0xBF	; 191
    1dde:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	4c f4       	brge	.+18     	; 0x1df8 <CalculPWM+0x9b0>
    1de6:	84 ea       	ldi	r24, 0xA4	; 164
    1de8:	90 e7       	ldi	r25, 0x70	; 112
    1dea:	ad e7       	ldi	r26, 0x7D	; 125
    1dec:	bf eb       	ldi	r27, 0xBF	; 191
    1dee:	8b 8f       	std	Y+27, r24	; 0x1b
    1df0:	9c 8f       	std	Y+28, r25	; 0x1c
    1df2:	ad 8f       	std	Y+29, r26	; 0x1d
    1df4:	be 8f       	std	Y+30, r27	; 0x1e
    1df6:	0c c0       	rjmp	.+24     	; 0x1e10 <CalculPWM+0x9c8>
    1df8:	a7 96       	adiw	r28, 0x27	; 39
    1dfa:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dfc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dfe:	a7 97       	sbiw	r28, 0x27	; 39
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	a2 81       	ldd	r26, Z+2	; 0x02
    1e06:	b3 81       	ldd	r27, Z+3	; 0x03
    1e08:	8b 8f       	std	Y+27, r24	; 0x1b
    1e0a:	9c 8f       	std	Y+28, r25	; 0x1c
    1e0c:	ad 8f       	std	Y+29, r26	; 0x1d
    1e0e:	be 8f       	std	Y+30, r27	; 0x1e
    1e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e14:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1e16:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e18:	8f 8f       	std	Y+31, r24	; 0x1f
    1e1a:	98 a3       	std	Y+32, r25	; 0x20
    1e1c:	a9 a3       	std	Y+33, r26	; 0x21
    1e1e:	ba a3       	std	Y+34, r27	; 0x22
    1e20:	a7 96       	adiw	r28, 0x27	; 39
    1e22:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e24:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e26:	a7 97       	sbiw	r28, 0x27	; 39
    1e28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e2c:	a9 a1       	ldd	r26, Y+33	; 0x21
    1e2e:	ba a1       	ldd	r27, Y+34	; 0x22
    1e30:	80 83       	st	Z, r24
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	a2 83       	std	Z+2, r26	; 0x02
    1e36:	b3 83       	std	Z+3, r27	; 0x03
	*Duty_G = (*Duty_G > 0.99) ? 0.99 : ((*Duty_G < -0.99) ? -0.99 : *Duty_G);	
    1e38:	e9 89       	ldd	r30, Y+17	; 0x11
    1e3a:	fa 89       	ldd	r31, Y+18	; 0x12
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	a2 81       	ldd	r26, Z+2	; 0x02
    1e42:	b3 81       	ldd	r27, Z+3	; 0x03
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	24 ea       	ldi	r18, 0xA4	; 164
    1e4a:	30 e7       	ldi	r19, 0x70	; 112
    1e4c:	4d e7       	ldi	r20, 0x7D	; 125
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__gtsf2>
    1e54:	18 16       	cp	r1, r24
    1e56:	4c f4       	brge	.+18     	; 0x1e6a <CalculPWM+0xa22>
    1e58:	84 ea       	ldi	r24, 0xA4	; 164
    1e5a:	90 e7       	ldi	r25, 0x70	; 112
    1e5c:	ad e7       	ldi	r26, 0x7D	; 125
    1e5e:	bf e3       	ldi	r27, 0x3F	; 63
    1e60:	8f 8b       	std	Y+23, r24	; 0x17
    1e62:	98 8f       	std	Y+24, r25	; 0x18
    1e64:	a9 8f       	std	Y+25, r26	; 0x19
    1e66:	ba 8f       	std	Y+26, r27	; 0x1a
    1e68:	2b c0       	rjmp	.+86     	; 0x1ec0 <CalculPWM+0xa78>
    1e6a:	e9 89       	ldd	r30, Y+17	; 0x11
    1e6c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	a2 81       	ldd	r26, Z+2	; 0x02
    1e74:	b3 81       	ldd	r27, Z+3	; 0x03
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	24 ea       	ldi	r18, 0xA4	; 164
    1e7c:	30 e7       	ldi	r19, 0x70	; 112
    1e7e:	4d e7       	ldi	r20, 0x7D	; 125
    1e80:	5f eb       	ldi	r21, 0xBF	; 191
    1e82:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	4c f4       	brge	.+18     	; 0x1e9c <CalculPWM+0xa54>
    1e8a:	84 ea       	ldi	r24, 0xA4	; 164
    1e8c:	90 e7       	ldi	r25, 0x70	; 112
    1e8e:	ad e7       	ldi	r26, 0x7D	; 125
    1e90:	bf eb       	ldi	r27, 0xBF	; 191
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
    1e94:	9c 8b       	std	Y+20, r25	; 0x14
    1e96:	ad 8b       	std	Y+21, r26	; 0x15
    1e98:	be 8b       	std	Y+22, r27	; 0x16
    1e9a:	0a c0       	rjmp	.+20     	; 0x1eb0 <CalculPWM+0xa68>
    1e9c:	e9 89       	ldd	r30, Y+17	; 0x11
    1e9e:	fa 89       	ldd	r31, Y+18	; 0x12
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ea6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
    1eaa:	9c 8b       	std	Y+20, r25	; 0x14
    1eac:	ad 8b       	std	Y+21, r26	; 0x15
    1eae:	be 8b       	std	Y+22, r27	; 0x16
    1eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb4:	ad 89       	ldd	r26, Y+21	; 0x15
    1eb6:	be 89       	ldd	r27, Y+22	; 0x16
    1eb8:	8f 8b       	std	Y+23, r24	; 0x17
    1eba:	98 8f       	std	Y+24, r25	; 0x18
    1ebc:	a9 8f       	std	Y+25, r26	; 0x19
    1ebe:	ba 8f       	std	Y+26, r27	; 0x1a
    1ec0:	e9 89       	ldd	r30, Y+17	; 0x11
    1ec2:	fa 89       	ldd	r31, Y+18	; 0x12
    1ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec8:	a9 8d       	ldd	r26, Y+25	; 0x19
    1eca:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ecc:	80 83       	st	Z, r24
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	a2 83       	std	Z+2, r26	; 0x02
    1ed2:	b3 83       	std	Z+3, r27	; 0x03
}
    1ed4:	ca 5a       	subi	r28, 0xAA	; 170
    1ed6:	df 4f       	sbci	r29, 0xFF	; 255
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	9f 90       	pop	r9
    1ef8:	8f 90       	pop	r8
    1efa:	08 95       	ret

00001efc <init_timer>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permetttant de faire l'initiation du timer */
void init_timer(void)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	/* Configure le mode Fast PWM-16-bits ainsi que configurer le mode ouput des broches de sorties PD4 et PD5 */
    TCCR1A = (1<<WGM11)|(0<<WGM10)|(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0);
    1f04:	ef e4       	ldi	r30, 0x4F	; 79
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	82 ea       	ldi	r24, 0xA2	; 162
    1f0a:	80 83       	st	Z, r24

	/* Configure le prescaler de CLK/8 ainsi que le mode Fast PWM-16-bits */
    TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11)|(0<<CS10)|(0<<CS12)|(0<<ICNC1)|(0<<ICES1);
    1f0c:	ee e4       	ldi	r30, 0x4E	; 78
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8a e1       	ldi	r24, 0x1A	; 26
    1f12:	80 83       	st	Z, r24

	/* Mettre ICR1 à la valeur du TOP */
	ICR1 = TOP_PWM; 					
    1f14:	e6 e4       	ldi	r30, 0x46	; 70
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 e1       	ldi	r24, 0x10	; 16
    1f1a:	97 e2       	ldi	r25, 0x27	; 39
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24

	/* Activation de l'interruption à l'overflow */
	TIMSK = (TIMSK & 0xC3) | (1<<TOIE1); 
    1f20:	a9 e5       	ldi	r26, 0x59	; 89
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e9 e5       	ldi	r30, 0x59	; 89
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	83 7c       	andi	r24, 0xC3	; 195
    1f2c:	84 60       	ori	r24, 0x04	; 4
    1f2e:	8c 93       	st	X, r24
}
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <set_PWMg>:

/* Fonction permetttant de configurer le PWM gauche */
void set_PWMg(float PWM)            
{
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <set_PWMg+0xa>
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <set_PWMg+0xc>
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	69 83       	std	Y+1, r22	; 0x01
    1f48:	7a 83       	std	Y+2, r23	; 0x02
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	9c 83       	std	Y+4, r25	; 0x04

	OCR1A = PWM*TOP_PWM;            	/* Calcul du PWM de gauche et envoie cette valeur sur le Port de sortie ORC1A */
    1f4e:	0a e4       	ldi	r16, 0x4A	; 74
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	69 81       	ldd	r22, Y+1	; 0x01
    1f54:	7a 81       	ldd	r23, Y+2	; 0x02
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e4       	ldi	r19, 0x40	; 64
    1f5e:	4c e1       	ldi	r20, 0x1C	; 28
    1f60:	56 e4       	ldi	r21, 0x46	; 70
    1f62:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24

	if(PWM<0)
    1f7c:	69 81       	ldd	r22, Y+1	; 0x01
    1f7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	4c f4       	brge	.+18     	; 0x1fa6 <set_PWMg+0x70>
	{
		PORTD = (0x08)|(PORTD&0xF3);	/* On met le bit de direction DIRgauche1 (Port D Pin 2) à 0 et le bit de direction DIRgauche2 (Port D Pin 3) à 1. */ 
    1f94:	a2 e3       	ldi	r26, 0x32	; 50
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e2 e3       	ldi	r30, 0x32	; 50
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	83 7f       	andi	r24, 0xF3	; 243
    1fa0:	88 60       	ori	r24, 0x08	; 8
    1fa2:	8c 93       	st	X, r24
    1fa4:	08 c0       	rjmp	.+16     	; 0x1fb6 <set_PWMg+0x80>
	}
	else
	{
		PORTD = (0x04)|(PORTD&0xF3);	/* On met le bit de direction DIRgauche1 (Port D Pin 2) à 1 et le bit de direction DIRgauche2 (Port D Pin 3) à 0. */
    1fa6:	a2 e3       	ldi	r26, 0x32	; 50
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e2 e3       	ldi	r30, 0x32	; 50
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	83 7f       	andi	r24, 0xF3	; 243
    1fb2:	84 60       	ori	r24, 0x04	; 4
    1fb4:	8c 93       	st	X, r24
	}
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <set_PWMd>:

/* Fonction permetttant de configurer le PWM droit */
void set_PWMd(float PWM)            
{
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <set_PWMd+0xa>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <set_PWMd+0xc>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	69 83       	std	Y+1, r22	; 0x01
    1fda:	7a 83       	std	Y+2, r23	; 0x02
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
    1fde:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B = PWM*TOP_PWM;             	/* Calcul du PWM de droite et envoie cette valeur sur le Port de sortie ORC1B */
    1fe0:	08 e4       	ldi	r16, 0x48	; 72
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
    1fe4:	69 81       	ldd	r22, Y+1	; 0x01
    1fe6:	7a 81       	ldd	r23, Y+2	; 0x02
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e4       	ldi	r19, 0x40	; 64
    1ff0:	4c e1       	ldi	r20, 0x1C	; 28
    1ff2:	56 e4       	ldi	r21, 0x46	; 70
    1ff4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	f8 01       	movw	r30, r16
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24

	if(PWM<0)
    200e:	69 81       	ldd	r22, Y+1	; 0x01
    2010:	7a 81       	ldd	r23, Y+2	; 0x02
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	4c f4       	brge	.+18     	; 0x2038 <set_PWMd+0x70>
	{
		PORTD = (0x80)|(PORTD&0x3F);	/* On met le bit de direction DIRdroite1 (Port D Pin 6) à 0 et le bit de direction DIRdroite2 (Port D Pin 7) à 1. */
    2026:	a2 e3       	ldi	r26, 0x32	; 50
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e2 e3       	ldi	r30, 0x32	; 50
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	8f 73       	andi	r24, 0x3F	; 63
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	8c 93       	st	X, r24
    2036:	08 c0       	rjmp	.+16     	; 0x2048 <set_PWMd+0x80>
	}
	else
	{
		PORTD = (0x40)|(PORTD&0x3F);	/* On met le bit de direction DIRdroite1 (Port D Pin 6) à 1 et le bit de direction DIRdroite2 (Port D Pin 7) à 0. */
    2038:	a2 e3       	ldi	r26, 0x32	; 50
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e3       	ldi	r30, 0x32	; 50
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 73       	andi	r24, 0x3F	; 63
    2044:	80 64       	ori	r24, 0x40	; 64
    2046:	8c 93       	st	X, r24
	}
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    205a:	1f 92       	push	r1
    205c:	0f 92       	push	r0
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	0f 92       	push	r0
    2062:	11 24       	eor	r1, r1
    2064:	8f 93       	push	r24
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	flag5ms=1;                      /* Drapeau après le compte de 5 msec */
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	80 93 e4 02 	sts	0x02E4, r24
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	8f 91       	pop	r24
    207a:	0f 90       	pop	r0
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	0f 90       	pop	r0
    2080:	1f 90       	pop	r1
    2082:	18 95       	reti

00002084 <read_flag>:

/* Fonction permetttant de lire le drapeau */
u08 read_flag(void)                 
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	0f 92       	push	r0
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
	u08 flag;

	/* accès atomique */
	cli();		                    /* arrêt des interruptions */
    208e:	f8 94       	cli
	flag = flag5ms;                 /* stockage de la valeur du flag5ms */
    2090:	80 91 e4 02 	lds	r24, 0x02E4
    2094:	89 83       	std	Y+1, r24	; 0x01
	flag5ms = 0;                    /* remise à zéro du flag de 5 ms */
    2096:	10 92 e4 02 	sts	0x02E4, r1
	sei();                          /* repartir les interruptions */
    209a:	78 94       	sei

	return flag;
    209c:	89 81       	ldd	r24, Y+1	; 0x01

}
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <calcul_vitesse_max>:
/*									Déclaration des fonctions										*/
/****************************************************************************************************/

/* Fonction permettant de faire le calcul de la vitesse maximale */
static void calcul_vitesse_max()
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <calcul_vitesse_max+0x6>
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
	u16 distance_min;
	if(distance_gauche<distance_droite)
    20b0:	20 91 81 00 	lds	r18, 0x0081
    20b4:	30 91 82 00 	lds	r19, 0x0082
    20b8:	80 91 83 00 	lds	r24, 0x0083
    20bc:	90 91 84 00 	lds	r25, 0x0084
    20c0:	28 17       	cp	r18, r24
    20c2:	39 07       	cpc	r19, r25
    20c4:	38 f4       	brcc	.+14     	; 0x20d4 <calcul_vitesse_max+0x2e>
	{
		distance_min = distance_gauche;
    20c6:	80 91 81 00 	lds	r24, 0x0081
    20ca:	90 91 82 00 	lds	r25, 0x0082
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <calcul_vitesse_max+0x3a>
	}
	else
	{
		distance_min = distance_droite;
    20d4:	80 91 83 00 	lds	r24, 0x0083
    20d8:	90 91 84 00 	lds	r25, 0x0084
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
	}

	if(distance_min<DISTANCE_SEUIL_MIN)
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	82 33       	cpi	r24, 0x32	; 50
    20e6:	91 05       	cpc	r25, r1
    20e8:	68 f4       	brcc	.+26     	; 0x2104 <calcul_vitesse_max+0x5e>
	{
		vitesse_max = 0.0;
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	80 93 f5 02 	sts	0x02F5, r24
    20f6:	90 93 f6 02 	sts	0x02F6, r25
    20fa:	a0 93 f7 02 	sts	0x02F7, r26
    20fe:	b0 93 f8 02 	sts	0x02F8, r27
    2102:	27 c0       	rjmp	.+78     	; 0x2152 <calcul_vitesse_max+0xac>
	}
	else
	{
		vitesse_max = ((float)distance_min-(float)DISTANCE_SEUIL_MIN)/(float)(DISTANCE_SEUIL_MAX-DISTANCE_SEUIL_MIN);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	cc 01       	movw	r24, r24
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__floatunsisf>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	48 e4       	ldi	r20, 0x48	; 72
    2124:	52 e4       	ldi	r21, 0x42	; 66
    2126:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	48 e4       	ldi	r20, 0x48	; 72
    2138:	52 e4       	ldi	r21, 0x42	; 66
    213a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	80 93 f5 02 	sts	0x02F5, r24
    2146:	90 93 f6 02 	sts	0x02F6, r25
    214a:	a0 93 f7 02 	sts	0x02F7, r26
    214e:	b0 93 f8 02 	sts	0x02F8, r27
	}

}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <init_sonar>:

/* Fonction permettant de faire l'initialisation du sonar */
void init_sonar()
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
	/* Change le gain du sonar à GAIN_SONAR du sonar gauche et le range à RANGE_SONAR */
	twiWriteCommand(ADDRESSE_SONAR_GAUCHE, 1, GAIN_SONAR, 0);
    2164:	80 ee       	ldi	r24, 0xE0	; 224
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	4c e0       	ldi	r20, 0x0C	; 12
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>
	twiWriteCommand(ADDRESSE_SONAR_GAUCHE, 2, RANGE_SONAR, 0);
    2170:	80 ee       	ldi	r24, 0xE0	; 224
    2172:	62 e0       	ldi	r22, 0x02	; 2
    2174:	44 e6       	ldi	r20, 0x64	; 100
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>

	/* Même chose pour le sonar droit */
	twiWriteCommand(ADDRESSE_SONAR_DROIT, 1, GAIN_SONAR, 0);
    217c:	82 ee       	ldi	r24, 0xE2	; 226
    217e:	61 e0       	ldi	r22, 0x01	; 1
    2180:	4c e0       	ldi	r20, 0x0C	; 12
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>
	twiWriteCommand(ADDRESSE_SONAR_DROIT, 2, RANGE_SONAR, 0);
    2188:	82 ee       	ldi	r24, 0xE2	; 226
    218a:	62 e0       	ldi	r22, 0x02	; 2
    218c:	44 e6       	ldi	r20, 0x64	; 100
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>

	sonar_en_cours = SONAR_GAUCHE;
    2194:	10 92 e9 02 	sts	0x02E9, r1
	/* Envoie de ping pour le sonar gauche */
	twiWriteCommand(ADDRESSE_SONAR_GAUCHE, 0, 0x51, 0);
    2198:	80 ee       	ldi	r24, 0xE0	; 224
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	41 e5       	ldi	r20, 0x51	; 81
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>


}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <executer_sonar>:


/* Fonction perttant de faire l'appel du nouveau_ping toutes les 50ms */
void executer_sonar(u08 nouveau_ping)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <executer_sonar+0x6>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <executer_sonar+0x8>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	8d 83       	std	Y+5, r24	; 0x05
	i2c_command command;
	if(nouveau_ping)
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	88 23       	and	r24, r24
    21be:	c1 f1       	breq	.+112    	; 0x2230 <executer_sonar+0x86>
	{
		if(sonar_en_cours==SONAR_GAUCHE)
    21c0:	80 91 e9 02 	lds	r24, 0x02E9
    21c4:	88 23       	and	r24, r24
    21c6:	c9 f4       	brne	.+50     	; 0x21fa <executer_sonar+0x50>
		{
			/* Commandes pour lire le sonar gauche */
			twiWriteCommand(0xE0, REGISTRE_MSB, 0, 1);
    21c8:	80 ee       	ldi	r24, 0xE0	; 224
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	21 e0       	ldi	r18, 0x01	; 1
    21d0:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>
			twiWriteCommand(0xE0, REGISTRE_LSB, 0, 1);
    21d4:	80 ee       	ldi	r24, 0xE0	; 224
    21d6:	63 e0       	ldi	r22, 0x03	; 3
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>

			sonar_en_cours = SONAR_DROIT;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	80 93 e9 02 	sts	0x02E9, r24

			/* Envoie de ping pour le sonar droite */
			twiWriteCommand(0xE2, 0, 0x51, 0);
    21e6:	82 ee       	ldi	r24, 0xE2	; 226
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	41 e5       	ldi	r20, 0x51	; 81
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>

			//Ping envoyé
			toggle_led(3);
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	0e 94 ab 12 	call	0x2556	; 0x2556 <toggle_led>
    21f8:	1b c0       	rjmp	.+54     	; 0x2230 <executer_sonar+0x86>


		}
		else if(sonar_en_cours==SONAR_DROIT)
    21fa:	80 91 e9 02 	lds	r24, 0x02E9
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	b9 f4       	brne	.+46     	; 0x2230 <executer_sonar+0x86>
		{
			/* Commandes pour lire le sonar droite */
			twiWriteCommand(0xE2, REGISTRE_MSB, 0, 1);
    2202:	82 ee       	ldi	r24, 0xE2	; 226
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	21 e0       	ldi	r18, 0x01	; 1
    220a:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>
			twiWriteCommand(0xE2, REGISTRE_LSB, 0, 1);
    220e:	82 ee       	ldi	r24, 0xE2	; 226
    2210:	63 e0       	ldi	r22, 0x03	; 3
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	21 e0       	ldi	r18, 0x01	; 1
    2216:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>

			sonar_en_cours = SONAR_GAUCHE;
    221a:	10 92 e9 02 	sts	0x02E9, r1

			/* Envoie de ping pour le sonar gauche */
			twiWriteCommand(0xE0, 0, 0x51, 0);
    221e:	80 ee       	ldi	r24, 0xE0	; 224
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	41 e5       	ldi	r20, 0x51	; 81
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	0e 94 65 06 	call	0xcca	; 0xcca <twiWriteCommand>

			//Ping envoyé
			toggle_led(5);
    222a:	85 e0       	ldi	r24, 0x05	; 5
    222c:	0e 94 ab 12 	call	0x2556	; 0x2556 <toggle_led>
		}
	}

	command = twiReadCommand();
    2230:	0e 94 be 06 	call	0xd7c	; 0xd7c <twiReadCommand>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	ab 83       	std	Y+3, r26	; 0x03
    223e:	bc 83       	std	Y+4, r27	; 0x04

	/* Si twiReadCommand=0xFF, cela signifie que le buffer est vide */
	if(command.addr!=0xFF)
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	8f 3f       	cpi	r24, 0xFF	; 255
    2244:	09 f4       	brne	.+2      	; 0x2248 <executer_sonar+0x9e>
    2246:	6c c0       	rjmp	.+216    	; 0x2320 <executer_sonar+0x176>
	{
		
		/* Sinon, on a reçu des données */
		if(command.reg==REGISTRE_MSB)
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	82 30       	cpi	r24, 0x02	; 2
    224c:	b9 f4       	brne	.+46     	; 0x227c <executer_sonar+0xd2>
		{
			/* Le MSB est reçu en premier*/
			if(command.addr==ADDRESSE_SONAR_GAUCHE)
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	80 3e       	cpi	r24, 0xE0	; 224
    2252:	51 f4       	brne	.+20     	; 0x2268 <executer_sonar+0xbe>
			{
				distance_gauche_tmp = command.data<<8;
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	98 2f       	mov	r25, r24
    225c:	88 27       	eor	r24, r24
    225e:	90 93 e6 02 	sts	0x02E6, r25
    2262:	80 93 e5 02 	sts	0x02E5, r24
    2266:	5c c0       	rjmp	.+184    	; 0x2320 <executer_sonar+0x176>

			}
			else
			{
				distance_droite_tmp = command.data<<8;
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	98 2f       	mov	r25, r24
    2270:	88 27       	eor	r24, r24
    2272:	90 93 e8 02 	sts	0x02E8, r25
    2276:	80 93 e7 02 	sts	0x02E7, r24
    227a:	52 c0       	rjmp	.+164    	; 0x2320 <executer_sonar+0x176>
			}
		}
		else
		{
			/* Ensuite le LSB */
			if(command.addr==ADDRESSE_SONAR_GAUCHE)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	80 3e       	cpi	r24, 0xE0	; 224
    2280:	39 f5       	brne	.+78     	; 0x22d0 <executer_sonar+0x126>
			{
				distance_gauche_tmp |= command.data;
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	80 91 e5 02 	lds	r24, 0x02E5
    228c:	90 91 e6 02 	lds	r25, 0x02E6
    2290:	82 2b       	or	r24, r18
    2292:	93 2b       	or	r25, r19
    2294:	90 93 e6 02 	sts	0x02E6, r25
    2298:	80 93 e5 02 	sts	0x02E5, r24
				distance_gauche = distance_gauche_tmp;
    229c:	80 91 e5 02 	lds	r24, 0x02E5
    22a0:	90 91 e6 02 	lds	r25, 0x02E6
    22a4:	90 93 82 00 	sts	0x0082, r25
    22a8:	80 93 81 00 	sts	0x0081, r24
				if(distance_gauche<=DISTANCE_SEUIL_DETECTE)
    22ac:	80 91 81 00 	lds	r24, 0x0081
    22b0:	90 91 82 00 	lds	r25, 0x0082
    22b4:	2f e0       	ldi	r18, 0x0F	; 15
    22b6:	81 3a       	cpi	r24, 0xA1	; 161
    22b8:	92 07       	cpc	r25, r18
    22ba:	28 f4       	brcc	.+10     	; 0x22c6 <executer_sonar+0x11c>
				{
					set_led(4, 0);
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
    22c4:	2b c0       	rjmp	.+86     	; 0x231c <executer_sonar+0x172>
				}
				else
				{
					set_led(4, 1);
    22c6:	84 e0       	ldi	r24, 0x04	; 4
    22c8:	61 e0       	ldi	r22, 0x01	; 1
    22ca:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
    22ce:	26 c0       	rjmp	.+76     	; 0x231c <executer_sonar+0x172>
				}

			}
			else
			{
				distance_droite_tmp |= command.data;
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	80 91 e7 02 	lds	r24, 0x02E7
    22da:	90 91 e8 02 	lds	r25, 0x02E8
    22de:	82 2b       	or	r24, r18
    22e0:	93 2b       	or	r25, r19
    22e2:	90 93 e8 02 	sts	0x02E8, r25
    22e6:	80 93 e7 02 	sts	0x02E7, r24
				distance_droite = distance_droite_tmp;
    22ea:	80 91 e7 02 	lds	r24, 0x02E7
    22ee:	90 91 e8 02 	lds	r25, 0x02E8
    22f2:	90 93 84 00 	sts	0x0084, r25
    22f6:	80 93 83 00 	sts	0x0083, r24
				if(distance_droite<=DISTANCE_SEUIL_DETECTE)
    22fa:	80 91 83 00 	lds	r24, 0x0083
    22fe:	90 91 84 00 	lds	r25, 0x0084
    2302:	2f e0       	ldi	r18, 0x0F	; 15
    2304:	81 3a       	cpi	r24, 0xA1	; 161
    2306:	92 07       	cpc	r25, r18
    2308:	28 f4       	brcc	.+10     	; 0x2314 <executer_sonar+0x16a>
				{
					set_led(2, 0);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
    2312:	04 c0       	rjmp	.+8      	; 0x231c <executer_sonar+0x172>
				}
				else
				{
					set_led(2, 1);
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	0e 94 c8 12 	call	0x2590	; 0x2590 <set_led>
				}

			}
			/* Recalcul de la vitesse max */
			calcul_vitesse_max();
    231c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <calcul_vitesse_max>
		}
		
	}
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <__vector_13>:
/*									Définition des fonctions 										*/
/****************************************************************************************************/

/* Routine d'interruption lorsque le UART a completement recu l'information du RX */
ISR(USART_RXC_vect)             
{
    2330:	1f 92       	push	r1
    2332:	0f 92       	push	r0
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	0f 92       	push	r0
    2338:	11 24       	eor	r1, r1
    233a:	2f 93       	push	r18
    233c:	3f 93       	push	r19
    233e:	4f 93       	push	r20
    2340:	5f 93       	push	r21
    2342:	6f 93       	push	r22
    2344:	7f 93       	push	r23
    2346:	8f 93       	push	r24
    2348:	9f 93       	push	r25
    234a:	af 93       	push	r26
    234c:	bf 93       	push	r27
    234e:	ef 93       	push	r30
    2350:	ff 93       	push	r31
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <__vector_13+0x28>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    register char led;

    led = UDR;                  /* Lis un byte (8 bits) dans le data buffer (UDR) et le mettre dans la variable led */
    235e:	ec e2       	ldi	r30, 0x2C	; 44
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	20 81       	ld	r18, Z
    2364:	29 83       	std	Y+1, r18	; 0x01
	reset_watchdog();			/* Appel de la fonction du reset du watchdog */
    2366:	0e 94 07 13 	call	0x260e	; 0x260e <reset_watchdog>
	UDR = led; // echo
    236a:	ec e2       	ldi	r30, 0x2C	; 44
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	39 81       	ldd	r19, Y+1	; 0x01
    2370:	30 83       	st	Z, r19
    //PORTB = ~led;     /* output received byte to PortB (LEDs) */

	/* Communication normale : Commande de 3 Bytes [0xF1][Vitesse][Angle] */
	switch(etat)
    2372:	80 91 eb 02 	lds	r24, 0x02EB
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	3b 83       	std	Y+3, r19	; 0x03
    237c:	2a 83       	std	Y+2, r18	; 0x02
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	91 05       	cpc	r25, r1
    2386:	81 f0       	breq	.+32     	; 0x23a8 <__vector_13+0x78>
    2388:	2a 81       	ldd	r18, Y+2	; 0x02
    238a:	3b 81       	ldd	r19, Y+3	; 0x03
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	91 f0       	breq	.+36     	; 0x23b6 <__vector_13+0x86>
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	b9 f4       	brne	.+46     	; 0x23c8 <__vector_13+0x98>
	{
		case ETAT_ATTENTE:
			if(led==0xF1)
    239a:	99 81       	ldd	r25, Y+1	; 0x01
    239c:	91 3f       	cpi	r25, 0xF1	; 241
    239e:	b1 f4       	brne	.+44     	; 0x23cc <__vector_13+0x9c>
			{
				etat = ETAT_VITESSE;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 93 eb 02 	sts	0x02EB, r24
    23a6:	12 c0       	rjmp	.+36     	; 0x23cc <__vector_13+0x9c>
			}
		break;
		case ETAT_VITESSE:
				etat = ETAT_ANGLE;
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	80 93 eb 02 	sts	0x02EB, r24
				vitesse = led;
    23ae:	29 81       	ldd	r18, Y+1	; 0x01
    23b0:	20 93 85 00 	sts	0x0085, r18
    23b4:	0b c0       	rjmp	.+22     	; 0x23cc <__vector_13+0x9c>
		break;
		case ETAT_ANGLE:
				etat = ETAT_ATTENTE;
    23b6:	10 92 eb 02 	sts	0x02EB, r1
				angle = led;
    23ba:	39 81       	ldd	r19, Y+1	; 0x01
    23bc:	30 93 ea 02 	sts	0x02EA, r19
				toggle_led(1);				/* Clignotement de la led lors de la commande reçue du UART */
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	0e 94 ab 12 	call	0x2556	; 0x2556 <toggle_led>
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <__vector_13+0x9c>
		break;
		default:
				etat = ETAT_ATTENTE;
    23c8:	10 92 eb 02 	sts	0x02EB, r1
		break;
	}

}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	ff 91       	pop	r31
    23d8:	ef 91       	pop	r30
    23da:	bf 91       	pop	r27
    23dc:	af 91       	pop	r26
    23de:	9f 91       	pop	r25
    23e0:	8f 91       	pop	r24
    23e2:	7f 91       	pop	r23
    23e4:	6f 91       	pop	r22
    23e6:	5f 91       	pop	r21
    23e8:	4f 91       	pop	r20
    23ea:	3f 91       	pop	r19
    23ec:	2f 91       	pop	r18
    23ee:	0f 90       	pop	r0
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	0f 90       	pop	r0
    23f4:	1f 90       	pop	r1
    23f6:	18 95       	reti

000023f8 <uart_send>:

/* Fonction permettant l'envoie du buffer 'buf' au UART pour le transmettre sur TX */
void uart_send(s08 *buf, u08 size)          
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <uart_send+0x6>
    23fe:	0f 92       	push	r0
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	6b 83       	std	Y+3, r22	; 0x03
        uart_data_ptr  = (u08*)buf;         /* Déclare le pointeur */
        uart_counter   = size;              /* Déclare le compteur */
        UDR = *buf;                         /* Écrit un bytes (8 bits) dans UDR */
    }
#endif
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <uart_init>:

/* Fonction permettant l'initialisation du UART */
void uart_init(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    /* Configure 'asynchronous operation, no parity, 1 stop bit, 8 data bits, Tx on rising edge' */
    UCSRC = (1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0)|(0<<UCPOL);
    241e:	e0 e4       	ldi	r30, 0x40	; 64
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	86 e8       	ldi	r24, 0x86	; 134
    2424:	80 83       	st	Z, r24
    /* Met à 'enable' RxD/TxD et les interruptions */
    UCSRB = (1<<RXCIE)|(0<<TXCIE)|(1<<RXEN)|(1<<TXEN)|(0<<UCSZ2);
    2426:	ea e2       	ldi	r30, 0x2A	; 42
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	88 e9       	ldi	r24, 0x98	; 152
    242c:	80 83       	st	Z, r24
    /* Met le baud rate à 9600 avec les registres UBRRH et UBRRL */
    UBRRH = (u08)(UART_BAUD_SELECT >> 8);
    242e:	e0 e4       	ldi	r30, 0x40	; 64
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	10 82       	st	Z, r1
	/*  */
    UBRRL = (u08)(UART_BAUD_SELECT & 0x00FF);
    2434:	e9 e2       	ldi	r30, 0x29	; 41
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	87 e6       	ldi	r24, 0x67	; 103
    243a:	80 83       	st	Z, r24
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <get_vitesse>:

/* Fonction permettant de convertir la vitesse de -100% à 100% */
u08 get_vitesse()                           
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	return vitesse;			/* Retourne la vitesse */
    244a:	80 91 85 00 	lds	r24, 0x0085
}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <get_angle>:

/* Fonction permettant de convertir l'angle de 0 à 360 degré */
u08 get_angle()                             
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
	return angle;			/* Retourne l'angle */
    245c:	80 91 ea 02 	lds	r24, 0x02EA
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <conv_angle>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permettant de faire la conversion de la valeur(0-180) de l'angle en degré (0-360)*/
float conv_angle (u08 angle180)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <conv_angle+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <conv_angle+0x8>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	8d 83       	std	Y+5, r24	; 0x05
	float angle_deg;	  					/* Déclaration de la variable */

	angle_deg = ((float)angle180*2*PI)/180;	/* Conversion de l'angle radian en degré */
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e0       	ldi	r26, 0x00	; 0
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__floatunsisf>
    2488:	9b 01       	movw	r18, r22
    248a:	ac 01       	movw	r20, r24
    248c:	ca 01       	movw	r24, r20
    248e:	b9 01       	movw	r22, r18
    2490:	0e 94 b8 14 	call	0x2970	; 0x2970 <__addsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	28 ed       	ldi	r18, 0xD8	; 216
    249e:	3f e0       	ldi	r19, 0x0F	; 15
    24a0:	49 e4       	ldi	r20, 0x49	; 73
    24a2:	50 e4       	ldi	r21, 0x40	; 64
    24a4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	44 e3       	ldi	r20, 0x34	; 52
    24b6:	53 e4       	ldi	r21, 0x43	; 67
    24b8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04

	return angle_deg;						/* Retourne l'angle converti */
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	ab 81       	ldd	r26, Y+3	; 0x03
    24ce:	bc 81       	ldd	r27, Y+4	; 0x04
}
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <conv_vitesse>:


/* Fonction permettant de faire la conversion de la vitesse(0-200) en pourcentage (-100% à 100%)*/
float conv_vitesse(u08 vitesse)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <conv_vitesse+0x6>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <conv_vitesse+0x8>
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	8d 83       	std	Y+5, r24	; 0x05
	float vitesse_conv;						/* Déclaration de la variable */

	vitesse_conv = ((float)vitesse-100)/100;/* Conversion de la vitesse en pourcentage */
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e0       	ldi	r26, 0x00	; 0
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__floatunsisf>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	48 ec       	ldi	r20, 0xC8	; 200
    2514:	52 e4       	ldi	r21, 0x42	; 66
    2516:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	48 ec       	ldi	r20, 0xC8	; 200
    2528:	52 e4       	ldi	r21, 0x42	; 66
    252a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__divsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	ab 83       	std	Y+3, r26	; 0x03
    2538:	bc 83       	std	Y+4, r27	; 0x04

	return vitesse_conv;					/* Retourne la vitesse converti */
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	ab 81       	ldd	r26, Y+3	; 0x03
    2540:	bc 81       	ldd	r27, Y+4	; 0x04

}
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <toggle_led>:

/* Fonction permettant le clignotement de la LED 1 */
void toggle_led(u08 led)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	89 83       	std	Y+1, r24	; 0x01
	PORTB = (PORTB ^ (1<<led));
    2562:	a8 e3       	ldi	r26, 0x38	; 56
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e8 e3       	ldi	r30, 0x38	; 56
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 2e       	mov	r0, r18
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <toggle_led+0x2a>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	0a 94       	dec	r0
    2582:	e2 f7       	brpl	.-8      	; 0x257c <toggle_led+0x26>
    2584:	84 27       	eor	r24, r20
    2586:	8c 93       	st	X, r24
}
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <set_led>:

/* Fonction permettant de mettre une LED à 1 ou 0 */
void set_led(u08 led, u08 valeur)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <set_led+0x6>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	6a 83       	std	Y+2, r22	; 0x02
	PORTB = (valeur<<led) | ((~(1<<led)) & PORTB);
    259e:	a8 e3       	ldi	r26, 0x38	; 56
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a9 01       	movw	r20, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <set_led+0x26>
    25b2:	44 0f       	add	r20, r20
    25b4:	55 1f       	adc	r21, r21
    25b6:	8a 95       	dec	r24
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <set_led+0x22>
    25ba:	ca 01       	movw	r24, r20
    25bc:	48 2f       	mov	r20, r24
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <set_led+0x40>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <set_led+0x3c>
    25d4:	98 2f       	mov	r25, r24
    25d6:	90 95       	com	r25
    25d8:	e8 e3       	ldi	r30, 0x38	; 56
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	89 23       	and	r24, r25
    25e0:	84 2b       	or	r24, r20
    25e2:	8c 93       	st	X, r24
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <init_watchdog>:
/*									Définition des fonctions										*/
/****************************************************************************************************/

/* Fonction permettant de faire l'initialisation du Watchdog */
void init_watchdog()
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	wdt_enable(3);
    25f6:	88 e1       	ldi	r24, 0x18	; 24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	2b e0       	ldi	r18, 0x0B	; 11
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	a8 95       	wdr
    2602:	81 bd       	out	0x21, r24	; 33
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	21 bd       	out	0x21, r18	; 33
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <reset_watchdog>:

/* Fonction permettant de faire un reset du Watchdog */
void reset_watchdog()
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	wdt_reset();
    2616:	a8 95       	wdr
}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <__fixunssfsi>:
    261e:	ef 92       	push	r14
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	7b 01       	movw	r14, r22
    2628:	8c 01       	movw	r16, r24
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	5f e4       	ldi	r21, 0x4F	; 79
    2632:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__gesf2>
    2636:	88 23       	and	r24, r24
    2638:	8c f0       	brlt	.+34     	; 0x265c <__fixunssfsi+0x3e>
    263a:	c8 01       	movw	r24, r16
    263c:	b7 01       	movw	r22, r14
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	5f e4       	ldi	r21, 0x4F	; 79
    2646:	0e 94 87 14 	call	0x290e	; 0x290e <__subsf3>
    264a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fixsfsi>
    264e:	9b 01       	movw	r18, r22
    2650:	ac 01       	movw	r20, r24
    2652:	20 50       	subi	r18, 0x00	; 0
    2654:	30 40       	sbci	r19, 0x00	; 0
    2656:	40 40       	sbci	r20, 0x00	; 0
    2658:	50 48       	sbci	r21, 0x80	; 128
    265a:	06 c0       	rjmp	.+12     	; 0x2668 <__fixunssfsi+0x4a>
    265c:	c8 01       	movw	r24, r16
    265e:	b7 01       	movw	r22, r14
    2660:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fixsfsi>
    2664:	9b 01       	movw	r18, r22
    2666:	ac 01       	movw	r20, r24
    2668:	b9 01       	movw	r22, r18
    266a:	ca 01       	movw	r24, r20
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	08 95       	ret

00002676 <_fpadd_parts>:
    2676:	a0 e0       	ldi	r26, 0x00	; 0
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e1 e4       	ldi	r30, 0x41	; 65
    267c:	f3 e1       	ldi	r31, 0x13	; 19
    267e:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__>
    2682:	dc 01       	movw	r26, r24
    2684:	2b 01       	movw	r4, r22
    2686:	fa 01       	movw	r30, r20
    2688:	9c 91       	ld	r25, X
    268a:	92 30       	cpi	r25, 0x02	; 2
    268c:	08 f4       	brcc	.+2      	; 0x2690 <_fpadd_parts+0x1a>
    268e:	39 c1       	rjmp	.+626    	; 0x2902 <_fpadd_parts+0x28c>
    2690:	eb 01       	movw	r28, r22
    2692:	88 81       	ld	r24, Y
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	08 f4       	brcc	.+2      	; 0x269a <_fpadd_parts+0x24>
    2698:	33 c1       	rjmp	.+614    	; 0x2900 <_fpadd_parts+0x28a>
    269a:	94 30       	cpi	r25, 0x04	; 4
    269c:	69 f4       	brne	.+26     	; 0x26b8 <_fpadd_parts+0x42>
    269e:	84 30       	cpi	r24, 0x04	; 4
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <_fpadd_parts+0x2e>
    26a2:	2f c1       	rjmp	.+606    	; 0x2902 <_fpadd_parts+0x28c>
    26a4:	11 96       	adiw	r26, 0x01	; 1
    26a6:	9c 91       	ld	r25, X
    26a8:	11 97       	sbiw	r26, 0x01	; 1
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	98 17       	cp	r25, r24
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <_fpadd_parts+0x3c>
    26b0:	28 c1       	rjmp	.+592    	; 0x2902 <_fpadd_parts+0x28c>
    26b2:	a6 e8       	ldi	r26, 0x86	; 134
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	25 c1       	rjmp	.+586    	; 0x2902 <_fpadd_parts+0x28c>
    26b8:	84 30       	cpi	r24, 0x04	; 4
    26ba:	09 f4       	brne	.+2      	; 0x26be <_fpadd_parts+0x48>
    26bc:	21 c1       	rjmp	.+578    	; 0x2900 <_fpadd_parts+0x28a>
    26be:	82 30       	cpi	r24, 0x02	; 2
    26c0:	a9 f4       	brne	.+42     	; 0x26ec <_fpadd_parts+0x76>
    26c2:	92 30       	cpi	r25, 0x02	; 2
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <_fpadd_parts+0x52>
    26c6:	1d c1       	rjmp	.+570    	; 0x2902 <_fpadd_parts+0x28c>
    26c8:	9a 01       	movw	r18, r20
    26ca:	ad 01       	movw	r20, r26
    26cc:	88 e0       	ldi	r24, 0x08	; 8
    26ce:	ea 01       	movw	r28, r20
    26d0:	09 90       	ld	r0, Y+
    26d2:	ae 01       	movw	r20, r28
    26d4:	e9 01       	movw	r28, r18
    26d6:	09 92       	st	Y+, r0
    26d8:	9e 01       	movw	r18, r28
    26da:	81 50       	subi	r24, 0x01	; 1
    26dc:	c1 f7       	brne	.-16     	; 0x26ce <_fpadd_parts+0x58>
    26de:	e2 01       	movw	r28, r4
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	9c 91       	ld	r25, X
    26e6:	89 23       	and	r24, r25
    26e8:	81 83       	std	Z+1, r24	; 0x01
    26ea:	08 c1       	rjmp	.+528    	; 0x28fc <_fpadd_parts+0x286>
    26ec:	92 30       	cpi	r25, 0x02	; 2
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <_fpadd_parts+0x7c>
    26f0:	07 c1       	rjmp	.+526    	; 0x2900 <_fpadd_parts+0x28a>
    26f2:	12 96       	adiw	r26, 0x02	; 2
    26f4:	2d 90       	ld	r2, X+
    26f6:	3c 90       	ld	r3, X
    26f8:	13 97       	sbiw	r26, 0x03	; 3
    26fa:	eb 01       	movw	r28, r22
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	14 96       	adiw	r26, 0x04	; 4
    2702:	ad 90       	ld	r10, X+
    2704:	bd 90       	ld	r11, X+
    2706:	cd 90       	ld	r12, X+
    2708:	dc 90       	ld	r13, X
    270a:	17 97       	sbiw	r26, 0x07	; 7
    270c:	ec 80       	ldd	r14, Y+4	; 0x04
    270e:	fd 80       	ldd	r15, Y+5	; 0x05
    2710:	0e 81       	ldd	r16, Y+6	; 0x06
    2712:	1f 81       	ldd	r17, Y+7	; 0x07
    2714:	91 01       	movw	r18, r2
    2716:	28 1b       	sub	r18, r24
    2718:	39 0b       	sbc	r19, r25
    271a:	b9 01       	movw	r22, r18
    271c:	37 ff       	sbrs	r19, 7
    271e:	04 c0       	rjmp	.+8      	; 0x2728 <_fpadd_parts+0xb2>
    2720:	66 27       	eor	r22, r22
    2722:	77 27       	eor	r23, r23
    2724:	62 1b       	sub	r22, r18
    2726:	73 0b       	sbc	r23, r19
    2728:	60 32       	cpi	r22, 0x20	; 32
    272a:	71 05       	cpc	r23, r1
    272c:	0c f0       	brlt	.+2      	; 0x2730 <_fpadd_parts+0xba>
    272e:	61 c0       	rjmp	.+194    	; 0x27f2 <_fpadd_parts+0x17c>
    2730:	12 16       	cp	r1, r18
    2732:	13 06       	cpc	r1, r19
    2734:	6c f5       	brge	.+90     	; 0x2790 <_fpadd_parts+0x11a>
    2736:	37 01       	movw	r6, r14
    2738:	48 01       	movw	r8, r16
    273a:	06 2e       	mov	r0, r22
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <_fpadd_parts+0xd0>
    273e:	96 94       	lsr	r9
    2740:	87 94       	ror	r8
    2742:	77 94       	ror	r7
    2744:	67 94       	ror	r6
    2746:	0a 94       	dec	r0
    2748:	d2 f7       	brpl	.-12     	; 0x273e <_fpadd_parts+0xc8>
    274a:	21 e0       	ldi	r18, 0x01	; 1
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	04 c0       	rjmp	.+8      	; 0x275c <_fpadd_parts+0xe6>
    2754:	22 0f       	add	r18, r18
    2756:	33 1f       	adc	r19, r19
    2758:	44 1f       	adc	r20, r20
    275a:	55 1f       	adc	r21, r21
    275c:	6a 95       	dec	r22
    275e:	d2 f7       	brpl	.-12     	; 0x2754 <_fpadd_parts+0xde>
    2760:	21 50       	subi	r18, 0x01	; 1
    2762:	30 40       	sbci	r19, 0x00	; 0
    2764:	40 40       	sbci	r20, 0x00	; 0
    2766:	50 40       	sbci	r21, 0x00	; 0
    2768:	2e 21       	and	r18, r14
    276a:	3f 21       	and	r19, r15
    276c:	40 23       	and	r20, r16
    276e:	51 23       	and	r21, r17
    2770:	21 15       	cp	r18, r1
    2772:	31 05       	cpc	r19, r1
    2774:	41 05       	cpc	r20, r1
    2776:	51 05       	cpc	r21, r1
    2778:	21 f0       	breq	.+8      	; 0x2782 <_fpadd_parts+0x10c>
    277a:	21 e0       	ldi	r18, 0x01	; 1
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	79 01       	movw	r14, r18
    2784:	8a 01       	movw	r16, r20
    2786:	e6 28       	or	r14, r6
    2788:	f7 28       	or	r15, r7
    278a:	08 29       	or	r16, r8
    278c:	19 29       	or	r17, r9
    278e:	3c c0       	rjmp	.+120    	; 0x2808 <_fpadd_parts+0x192>
    2790:	23 2b       	or	r18, r19
    2792:	d1 f1       	breq	.+116    	; 0x2808 <_fpadd_parts+0x192>
    2794:	26 0e       	add	r2, r22
    2796:	37 1e       	adc	r3, r23
    2798:	35 01       	movw	r6, r10
    279a:	46 01       	movw	r8, r12
    279c:	06 2e       	mov	r0, r22
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <_fpadd_parts+0x132>
    27a0:	96 94       	lsr	r9
    27a2:	87 94       	ror	r8
    27a4:	77 94       	ror	r7
    27a6:	67 94       	ror	r6
    27a8:	0a 94       	dec	r0
    27aa:	d2 f7       	brpl	.-12     	; 0x27a0 <_fpadd_parts+0x12a>
    27ac:	21 e0       	ldi	r18, 0x01	; 1
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <_fpadd_parts+0x148>
    27b6:	22 0f       	add	r18, r18
    27b8:	33 1f       	adc	r19, r19
    27ba:	44 1f       	adc	r20, r20
    27bc:	55 1f       	adc	r21, r21
    27be:	6a 95       	dec	r22
    27c0:	d2 f7       	brpl	.-12     	; 0x27b6 <_fpadd_parts+0x140>
    27c2:	21 50       	subi	r18, 0x01	; 1
    27c4:	30 40       	sbci	r19, 0x00	; 0
    27c6:	40 40       	sbci	r20, 0x00	; 0
    27c8:	50 40       	sbci	r21, 0x00	; 0
    27ca:	2a 21       	and	r18, r10
    27cc:	3b 21       	and	r19, r11
    27ce:	4c 21       	and	r20, r12
    27d0:	5d 21       	and	r21, r13
    27d2:	21 15       	cp	r18, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	41 05       	cpc	r20, r1
    27d8:	51 05       	cpc	r21, r1
    27da:	21 f0       	breq	.+8      	; 0x27e4 <_fpadd_parts+0x16e>
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	59 01       	movw	r10, r18
    27e6:	6a 01       	movw	r12, r20
    27e8:	a6 28       	or	r10, r6
    27ea:	b7 28       	or	r11, r7
    27ec:	c8 28       	or	r12, r8
    27ee:	d9 28       	or	r13, r9
    27f0:	0b c0       	rjmp	.+22     	; 0x2808 <_fpadd_parts+0x192>
    27f2:	82 15       	cp	r24, r2
    27f4:	93 05       	cpc	r25, r3
    27f6:	2c f0       	brlt	.+10     	; 0x2802 <_fpadd_parts+0x18c>
    27f8:	1c 01       	movw	r2, r24
    27fa:	aa 24       	eor	r10, r10
    27fc:	bb 24       	eor	r11, r11
    27fe:	65 01       	movw	r12, r10
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <_fpadd_parts+0x192>
    2802:	ee 24       	eor	r14, r14
    2804:	ff 24       	eor	r15, r15
    2806:	87 01       	movw	r16, r14
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	9c 91       	ld	r25, X
    280c:	d2 01       	movw	r26, r4
    280e:	11 96       	adiw	r26, 0x01	; 1
    2810:	8c 91       	ld	r24, X
    2812:	98 17       	cp	r25, r24
    2814:	09 f4       	brne	.+2      	; 0x2818 <_fpadd_parts+0x1a2>
    2816:	45 c0       	rjmp	.+138    	; 0x28a2 <_fpadd_parts+0x22c>
    2818:	99 23       	and	r25, r25
    281a:	39 f0       	breq	.+14     	; 0x282a <_fpadd_parts+0x1b4>
    281c:	a8 01       	movw	r20, r16
    281e:	97 01       	movw	r18, r14
    2820:	2a 19       	sub	r18, r10
    2822:	3b 09       	sbc	r19, r11
    2824:	4c 09       	sbc	r20, r12
    2826:	5d 09       	sbc	r21, r13
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <_fpadd_parts+0x1c0>
    282a:	a6 01       	movw	r20, r12
    282c:	95 01       	movw	r18, r10
    282e:	2e 19       	sub	r18, r14
    2830:	3f 09       	sbc	r19, r15
    2832:	40 0b       	sbc	r20, r16
    2834:	51 0b       	sbc	r21, r17
    2836:	57 fd       	sbrc	r21, 7
    2838:	08 c0       	rjmp	.+16     	; 0x284a <_fpadd_parts+0x1d4>
    283a:	11 82       	std	Z+1, r1	; 0x01
    283c:	33 82       	std	Z+3, r3	; 0x03
    283e:	22 82       	std	Z+2, r2	; 0x02
    2840:	24 83       	std	Z+4, r18	; 0x04
    2842:	35 83       	std	Z+5, r19	; 0x05
    2844:	46 83       	std	Z+6, r20	; 0x06
    2846:	57 83       	std	Z+7, r21	; 0x07
    2848:	1d c0       	rjmp	.+58     	; 0x2884 <_fpadd_parts+0x20e>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	81 83       	std	Z+1, r24	; 0x01
    284e:	33 82       	std	Z+3, r3	; 0x03
    2850:	22 82       	std	Z+2, r2	; 0x02
    2852:	88 27       	eor	r24, r24
    2854:	99 27       	eor	r25, r25
    2856:	dc 01       	movw	r26, r24
    2858:	82 1b       	sub	r24, r18
    285a:	93 0b       	sbc	r25, r19
    285c:	a4 0b       	sbc	r26, r20
    285e:	b5 0b       	sbc	r27, r21
    2860:	84 83       	std	Z+4, r24	; 0x04
    2862:	95 83       	std	Z+5, r25	; 0x05
    2864:	a6 83       	std	Z+6, r26	; 0x06
    2866:	b7 83       	std	Z+7, r27	; 0x07
    2868:	0d c0       	rjmp	.+26     	; 0x2884 <_fpadd_parts+0x20e>
    286a:	22 0f       	add	r18, r18
    286c:	33 1f       	adc	r19, r19
    286e:	44 1f       	adc	r20, r20
    2870:	55 1f       	adc	r21, r21
    2872:	24 83       	std	Z+4, r18	; 0x04
    2874:	35 83       	std	Z+5, r19	; 0x05
    2876:	46 83       	std	Z+6, r20	; 0x06
    2878:	57 83       	std	Z+7, r21	; 0x07
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	93 83       	std	Z+3, r25	; 0x03
    2882:	82 83       	std	Z+2, r24	; 0x02
    2884:	24 81       	ldd	r18, Z+4	; 0x04
    2886:	35 81       	ldd	r19, Z+5	; 0x05
    2888:	46 81       	ldd	r20, Z+6	; 0x06
    288a:	57 81       	ldd	r21, Z+7	; 0x07
    288c:	da 01       	movw	r26, r20
    288e:	c9 01       	movw	r24, r18
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	a1 09       	sbc	r26, r1
    2894:	b1 09       	sbc	r27, r1
    2896:	8f 5f       	subi	r24, 0xFF	; 255
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	af 4f       	sbci	r26, 0xFF	; 255
    289c:	bf 43       	sbci	r27, 0x3F	; 63
    289e:	28 f3       	brcs	.-54     	; 0x286a <_fpadd_parts+0x1f4>
    28a0:	0b c0       	rjmp	.+22     	; 0x28b8 <_fpadd_parts+0x242>
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	33 82       	std	Z+3, r3	; 0x03
    28a6:	22 82       	std	Z+2, r2	; 0x02
    28a8:	ea 0c       	add	r14, r10
    28aa:	fb 1c       	adc	r15, r11
    28ac:	0c 1d       	adc	r16, r12
    28ae:	1d 1d       	adc	r17, r13
    28b0:	e4 82       	std	Z+4, r14	; 0x04
    28b2:	f5 82       	std	Z+5, r15	; 0x05
    28b4:	06 83       	std	Z+6, r16	; 0x06
    28b6:	17 83       	std	Z+7, r17	; 0x07
    28b8:	83 e0       	ldi	r24, 0x03	; 3
    28ba:	80 83       	st	Z, r24
    28bc:	24 81       	ldd	r18, Z+4	; 0x04
    28be:	35 81       	ldd	r19, Z+5	; 0x05
    28c0:	46 81       	ldd	r20, Z+6	; 0x06
    28c2:	57 81       	ldd	r21, Z+7	; 0x07
    28c4:	57 ff       	sbrs	r21, 7
    28c6:	1a c0       	rjmp	.+52     	; 0x28fc <_fpadd_parts+0x286>
    28c8:	c9 01       	movw	r24, r18
    28ca:	aa 27       	eor	r26, r26
    28cc:	97 fd       	sbrc	r25, 7
    28ce:	a0 95       	com	r26
    28d0:	ba 2f       	mov	r27, r26
    28d2:	81 70       	andi	r24, 0x01	; 1
    28d4:	90 70       	andi	r25, 0x00	; 0
    28d6:	a0 70       	andi	r26, 0x00	; 0
    28d8:	b0 70       	andi	r27, 0x00	; 0
    28da:	56 95       	lsr	r21
    28dc:	47 95       	ror	r20
    28de:	37 95       	ror	r19
    28e0:	27 95       	ror	r18
    28e2:	82 2b       	or	r24, r18
    28e4:	93 2b       	or	r25, r19
    28e6:	a4 2b       	or	r26, r20
    28e8:	b5 2b       	or	r27, r21
    28ea:	84 83       	std	Z+4, r24	; 0x04
    28ec:	95 83       	std	Z+5, r25	; 0x05
    28ee:	a6 83       	std	Z+6, r26	; 0x06
    28f0:	b7 83       	std	Z+7, r27	; 0x07
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	93 83       	std	Z+3, r25	; 0x03
    28fa:	82 83       	std	Z+2, r24	; 0x02
    28fc:	df 01       	movw	r26, r30
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <_fpadd_parts+0x28c>
    2900:	d2 01       	movw	r26, r4
    2902:	cd 01       	movw	r24, r26
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	e2 e1       	ldi	r30, 0x12	; 18
    290a:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__>

0000290e <__subsf3>:
    290e:	a0 e2       	ldi	r26, 0x20	; 32
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ed e8       	ldi	r30, 0x8D	; 141
    2914:	f4 e1       	ldi	r31, 0x14	; 20
    2916:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x18>
    291a:	69 83       	std	Y+1, r22	; 0x01
    291c:	7a 83       	std	Y+2, r23	; 0x02
    291e:	8b 83       	std	Y+3, r24	; 0x03
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	2d 83       	std	Y+5, r18	; 0x05
    2924:	3e 83       	std	Y+6, r19	; 0x06
    2926:	4f 83       	std	Y+7, r20	; 0x07
    2928:	58 87       	std	Y+8, r21	; 0x08
    292a:	e9 e0       	ldi	r30, 0x09	; 9
    292c:	ee 2e       	mov	r14, r30
    292e:	f1 2c       	mov	r15, r1
    2930:	ec 0e       	add	r14, r28
    2932:	fd 1e       	adc	r15, r29
    2934:	ce 01       	movw	r24, r28
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	b7 01       	movw	r22, r14
    293a:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    293e:	8e 01       	movw	r16, r28
    2940:	0f 5e       	subi	r16, 0xEF	; 239
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	ce 01       	movw	r24, r28
    2946:	05 96       	adiw	r24, 0x05	; 5
    2948:	b8 01       	movw	r22, r16
    294a:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    294e:	8a 89       	ldd	r24, Y+18	; 0x12
    2950:	91 e0       	ldi	r25, 0x01	; 1
    2952:	89 27       	eor	r24, r25
    2954:	8a 8b       	std	Y+18, r24	; 0x12
    2956:	c7 01       	movw	r24, r14
    2958:	b8 01       	movw	r22, r16
    295a:	ae 01       	movw	r20, r28
    295c:	47 5e       	subi	r20, 0xE7	; 231
    295e:	5f 4f       	sbci	r21, 0xFF	; 255
    2960:	0e 94 3b 13 	call	0x2676	; 0x2676 <_fpadd_parts>
    2964:	0e 94 c5 18 	call	0x318a	; 0x318a <__pack_f>
    2968:	a0 96       	adiw	r28, 0x20	; 32
    296a:	e6 e0       	ldi	r30, 0x06	; 6
    296c:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x18>

00002970 <__addsf3>:
    2970:	a0 e2       	ldi	r26, 0x20	; 32
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ee eb       	ldi	r30, 0xBE	; 190
    2976:	f4 e1       	ldi	r31, 0x14	; 20
    2978:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x18>
    297c:	69 83       	std	Y+1, r22	; 0x01
    297e:	7a 83       	std	Y+2, r23	; 0x02
    2980:	8b 83       	std	Y+3, r24	; 0x03
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	2d 83       	std	Y+5, r18	; 0x05
    2986:	3e 83       	std	Y+6, r19	; 0x06
    2988:	4f 83       	std	Y+7, r20	; 0x07
    298a:	58 87       	std	Y+8, r21	; 0x08
    298c:	f9 e0       	ldi	r31, 0x09	; 9
    298e:	ef 2e       	mov	r14, r31
    2990:	f1 2c       	mov	r15, r1
    2992:	ec 0e       	add	r14, r28
    2994:	fd 1e       	adc	r15, r29
    2996:	ce 01       	movw	r24, r28
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	b7 01       	movw	r22, r14
    299c:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    29a0:	8e 01       	movw	r16, r28
    29a2:	0f 5e       	subi	r16, 0xEF	; 239
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	ce 01       	movw	r24, r28
    29a8:	05 96       	adiw	r24, 0x05	; 5
    29aa:	b8 01       	movw	r22, r16
    29ac:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    29b0:	c7 01       	movw	r24, r14
    29b2:	b8 01       	movw	r22, r16
    29b4:	ae 01       	movw	r20, r28
    29b6:	47 5e       	subi	r20, 0xE7	; 231
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	0e 94 3b 13 	call	0x2676	; 0x2676 <_fpadd_parts>
    29be:	0e 94 c5 18 	call	0x318a	; 0x318a <__pack_f>
    29c2:	a0 96       	adiw	r28, 0x20	; 32
    29c4:	e6 e0       	ldi	r30, 0x06	; 6
    29c6:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x18>

000029ca <__mulsf3>:
    29ca:	a0 e2       	ldi	r26, 0x20	; 32
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	eb ee       	ldi	r30, 0xEB	; 235
    29d0:	f4 e1       	ldi	r31, 0x14	; 20
    29d2:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__>
    29d6:	69 83       	std	Y+1, r22	; 0x01
    29d8:	7a 83       	std	Y+2, r23	; 0x02
    29da:	8b 83       	std	Y+3, r24	; 0x03
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	2d 83       	std	Y+5, r18	; 0x05
    29e0:	3e 83       	std	Y+6, r19	; 0x06
    29e2:	4f 83       	std	Y+7, r20	; 0x07
    29e4:	58 87       	std	Y+8, r21	; 0x08
    29e6:	ce 01       	movw	r24, r28
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	be 01       	movw	r22, r28
    29ec:	67 5f       	subi	r22, 0xF7	; 247
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    29f4:	ce 01       	movw	r24, r28
    29f6:	05 96       	adiw	r24, 0x05	; 5
    29f8:	be 01       	movw	r22, r28
    29fa:	6f 5e       	subi	r22, 0xEF	; 239
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2a02:	99 85       	ldd	r25, Y+9	; 0x09
    2a04:	92 30       	cpi	r25, 0x02	; 2
    2a06:	88 f0       	brcs	.+34     	; 0x2a2a <__mulsf3+0x60>
    2a08:	89 89       	ldd	r24, Y+17	; 0x11
    2a0a:	82 30       	cpi	r24, 0x02	; 2
    2a0c:	c8 f0       	brcs	.+50     	; 0x2a40 <__mulsf3+0x76>
    2a0e:	94 30       	cpi	r25, 0x04	; 4
    2a10:	19 f4       	brne	.+6      	; 0x2a18 <__mulsf3+0x4e>
    2a12:	82 30       	cpi	r24, 0x02	; 2
    2a14:	51 f4       	brne	.+20     	; 0x2a2a <__mulsf3+0x60>
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <__mulsf3+0x56>
    2a18:	84 30       	cpi	r24, 0x04	; 4
    2a1a:	29 f4       	brne	.+10     	; 0x2a26 <__mulsf3+0x5c>
    2a1c:	92 30       	cpi	r25, 0x02	; 2
    2a1e:	81 f4       	brne	.+32     	; 0x2a40 <__mulsf3+0x76>
    2a20:	86 e8       	ldi	r24, 0x86	; 134
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	c6 c0       	rjmp	.+396    	; 0x2bb2 <__mulsf3+0x1e8>
    2a26:	92 30       	cpi	r25, 0x02	; 2
    2a28:	49 f4       	brne	.+18     	; 0x2a3c <__mulsf3+0x72>
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a30:	98 13       	cpse	r25, r24
    2a32:	21 e0       	ldi	r18, 0x01	; 1
    2a34:	2a 87       	std	Y+10, r18	; 0x0a
    2a36:	ce 01       	movw	r24, r28
    2a38:	09 96       	adiw	r24, 0x09	; 9
    2a3a:	bb c0       	rjmp	.+374    	; 0x2bb2 <__mulsf3+0x1e8>
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	49 f4       	brne	.+18     	; 0x2a52 <__mulsf3+0x88>
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a44:	8a 89       	ldd	r24, Y+18	; 0x12
    2a46:	98 13       	cpse	r25, r24
    2a48:	21 e0       	ldi	r18, 0x01	; 1
    2a4a:	2a 8b       	std	Y+18, r18	; 0x12
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	41 96       	adiw	r24, 0x11	; 17
    2a50:	b0 c0       	rjmp	.+352    	; 0x2bb2 <__mulsf3+0x1e8>
    2a52:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a54:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a56:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a58:	58 88       	ldd	r5, Y+16	; 0x10
    2a5a:	6d 88       	ldd	r6, Y+21	; 0x15
    2a5c:	7e 88       	ldd	r7, Y+22	; 0x16
    2a5e:	8f 88       	ldd	r8, Y+23	; 0x17
    2a60:	98 8c       	ldd	r9, Y+24	; 0x18
    2a62:	ee 24       	eor	r14, r14
    2a64:	ff 24       	eor	r15, r15
    2a66:	87 01       	movw	r16, r14
    2a68:	aa 24       	eor	r10, r10
    2a6a:	bb 24       	eor	r11, r11
    2a6c:	65 01       	movw	r12, r10
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	e0 e0       	ldi	r30, 0x00	; 0
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	c1 01       	movw	r24, r2
    2a7c:	81 70       	andi	r24, 0x01	; 1
    2a7e:	90 70       	andi	r25, 0x00	; 0
    2a80:	89 2b       	or	r24, r25
    2a82:	e9 f0       	breq	.+58     	; 0x2abe <__mulsf3+0xf4>
    2a84:	e6 0c       	add	r14, r6
    2a86:	f7 1c       	adc	r15, r7
    2a88:	08 1d       	adc	r16, r8
    2a8a:	19 1d       	adc	r17, r9
    2a8c:	9a 01       	movw	r18, r20
    2a8e:	ab 01       	movw	r20, r22
    2a90:	2a 0d       	add	r18, r10
    2a92:	3b 1d       	adc	r19, r11
    2a94:	4c 1d       	adc	r20, r12
    2a96:	5d 1d       	adc	r21, r13
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 e0       	ldi	r26, 0x00	; 0
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e6 14       	cp	r14, r6
    2aa2:	f7 04       	cpc	r15, r7
    2aa4:	08 05       	cpc	r16, r8
    2aa6:	19 05       	cpc	r17, r9
    2aa8:	20 f4       	brcc	.+8      	; 0x2ab2 <__mulsf3+0xe8>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	ba 01       	movw	r22, r20
    2ab4:	a9 01       	movw	r20, r18
    2ab6:	48 0f       	add	r20, r24
    2ab8:	59 1f       	adc	r21, r25
    2aba:	6a 1f       	adc	r22, r26
    2abc:	7b 1f       	adc	r23, r27
    2abe:	aa 0c       	add	r10, r10
    2ac0:	bb 1c       	adc	r11, r11
    2ac2:	cc 1c       	adc	r12, r12
    2ac4:	dd 1c       	adc	r13, r13
    2ac6:	97 fe       	sbrs	r9, 7
    2ac8:	08 c0       	rjmp	.+16     	; 0x2ada <__mulsf3+0x110>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a0 e0       	ldi	r26, 0x00	; 0
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	a8 2a       	or	r10, r24
    2ad4:	b9 2a       	or	r11, r25
    2ad6:	ca 2a       	or	r12, r26
    2ad8:	db 2a       	or	r13, r27
    2ada:	31 96       	adiw	r30, 0x01	; 1
    2adc:	e0 32       	cpi	r30, 0x20	; 32
    2ade:	f1 05       	cpc	r31, r1
    2ae0:	49 f0       	breq	.+18     	; 0x2af4 <__mulsf3+0x12a>
    2ae2:	66 0c       	add	r6, r6
    2ae4:	77 1c       	adc	r7, r7
    2ae6:	88 1c       	adc	r8, r8
    2ae8:	99 1c       	adc	r9, r9
    2aea:	56 94       	lsr	r5
    2aec:	47 94       	ror	r4
    2aee:	37 94       	ror	r3
    2af0:	27 94       	ror	r2
    2af2:	c3 cf       	rjmp	.-122    	; 0x2a7a <__mulsf3+0xb0>
    2af4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2af6:	ea 89       	ldd	r30, Y+18	; 0x12
    2af8:	2b 89       	ldd	r18, Y+19	; 0x13
    2afa:	3c 89       	ldd	r19, Y+20	; 0x14
    2afc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2afe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b00:	28 0f       	add	r18, r24
    2b02:	39 1f       	adc	r19, r25
    2b04:	2e 5f       	subi	r18, 0xFE	; 254
    2b06:	3f 4f       	sbci	r19, 0xFF	; 255
    2b08:	17 c0       	rjmp	.+46     	; 0x2b38 <__mulsf3+0x16e>
    2b0a:	ca 01       	movw	r24, r20
    2b0c:	81 70       	andi	r24, 0x01	; 1
    2b0e:	90 70       	andi	r25, 0x00	; 0
    2b10:	89 2b       	or	r24, r25
    2b12:	61 f0       	breq	.+24     	; 0x2b2c <__mulsf3+0x162>
    2b14:	16 95       	lsr	r17
    2b16:	07 95       	ror	r16
    2b18:	f7 94       	ror	r15
    2b1a:	e7 94       	ror	r14
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e8       	ldi	r27, 0x80	; 128
    2b24:	e8 2a       	or	r14, r24
    2b26:	f9 2a       	or	r15, r25
    2b28:	0a 2b       	or	r16, r26
    2b2a:	1b 2b       	or	r17, r27
    2b2c:	76 95       	lsr	r23
    2b2e:	67 95       	ror	r22
    2b30:	57 95       	ror	r21
    2b32:	47 95       	ror	r20
    2b34:	2f 5f       	subi	r18, 0xFF	; 255
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
    2b38:	77 fd       	sbrc	r23, 7
    2b3a:	e7 cf       	rjmp	.-50     	; 0x2b0a <__mulsf3+0x140>
    2b3c:	0c c0       	rjmp	.+24     	; 0x2b56 <__mulsf3+0x18c>
    2b3e:	44 0f       	add	r20, r20
    2b40:	55 1f       	adc	r21, r21
    2b42:	66 1f       	adc	r22, r22
    2b44:	77 1f       	adc	r23, r23
    2b46:	17 fd       	sbrc	r17, 7
    2b48:	41 60       	ori	r20, 0x01	; 1
    2b4a:	ee 0c       	add	r14, r14
    2b4c:	ff 1c       	adc	r15, r15
    2b4e:	00 1f       	adc	r16, r16
    2b50:	11 1f       	adc	r17, r17
    2b52:	21 50       	subi	r18, 0x01	; 1
    2b54:	30 40       	sbci	r19, 0x00	; 0
    2b56:	40 30       	cpi	r20, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	59 07       	cpc	r21, r25
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	69 07       	cpc	r22, r25
    2b60:	90 e4       	ldi	r25, 0x40	; 64
    2b62:	79 07       	cpc	r23, r25
    2b64:	60 f3       	brcs	.-40     	; 0x2b3e <__mulsf3+0x174>
    2b66:	2b 8f       	std	Y+27, r18	; 0x1b
    2b68:	3c 8f       	std	Y+28, r19	; 0x1c
    2b6a:	db 01       	movw	r26, r22
    2b6c:	ca 01       	movw	r24, r20
    2b6e:	8f 77       	andi	r24, 0x7F	; 127
    2b70:	90 70       	andi	r25, 0x00	; 0
    2b72:	a0 70       	andi	r26, 0x00	; 0
    2b74:	b0 70       	andi	r27, 0x00	; 0
    2b76:	80 34       	cpi	r24, 0x40	; 64
    2b78:	91 05       	cpc	r25, r1
    2b7a:	a1 05       	cpc	r26, r1
    2b7c:	b1 05       	cpc	r27, r1
    2b7e:	61 f4       	brne	.+24     	; 0x2b98 <__mulsf3+0x1ce>
    2b80:	47 fd       	sbrc	r20, 7
    2b82:	0a c0       	rjmp	.+20     	; 0x2b98 <__mulsf3+0x1ce>
    2b84:	e1 14       	cp	r14, r1
    2b86:	f1 04       	cpc	r15, r1
    2b88:	01 05       	cpc	r16, r1
    2b8a:	11 05       	cpc	r17, r1
    2b8c:	29 f0       	breq	.+10     	; 0x2b98 <__mulsf3+0x1ce>
    2b8e:	40 5c       	subi	r20, 0xC0	; 192
    2b90:	5f 4f       	sbci	r21, 0xFF	; 255
    2b92:	6f 4f       	sbci	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	40 78       	andi	r20, 0x80	; 128
    2b98:	1a 8e       	std	Y+26, r1	; 0x1a
    2b9a:	fe 17       	cp	r31, r30
    2b9c:	11 f0       	breq	.+4      	; 0x2ba2 <__mulsf3+0x1d8>
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	8a 8f       	std	Y+26, r24	; 0x1a
    2ba2:	4d 8f       	std	Y+29, r20	; 0x1d
    2ba4:	5e 8f       	std	Y+30, r21	; 0x1e
    2ba6:	6f 8f       	std	Y+31, r22	; 0x1f
    2ba8:	78 a3       	std	Y+32, r23	; 0x20
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	89 8f       	std	Y+25, r24	; 0x19
    2bae:	ce 01       	movw	r24, r28
    2bb0:	49 96       	adiw	r24, 0x19	; 25
    2bb2:	0e 94 c5 18 	call	0x318a	; 0x318a <__pack_f>
    2bb6:	a0 96       	adiw	r28, 0x20	; 32
    2bb8:	e2 e1       	ldi	r30, 0x12	; 18
    2bba:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__>

00002bbe <__divsf3>:
    2bbe:	a8 e1       	ldi	r26, 0x18	; 24
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2bc4:	f5 e1       	ldi	r31, 0x15	; 21
    2bc6:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__+0x10>
    2bca:	69 83       	std	Y+1, r22	; 0x01
    2bcc:	7a 83       	std	Y+2, r23	; 0x02
    2bce:	8b 83       	std	Y+3, r24	; 0x03
    2bd0:	9c 83       	std	Y+4, r25	; 0x04
    2bd2:	2d 83       	std	Y+5, r18	; 0x05
    2bd4:	3e 83       	std	Y+6, r19	; 0x06
    2bd6:	4f 83       	std	Y+7, r20	; 0x07
    2bd8:	58 87       	std	Y+8, r21	; 0x08
    2bda:	b9 e0       	ldi	r27, 0x09	; 9
    2bdc:	eb 2e       	mov	r14, r27
    2bde:	f1 2c       	mov	r15, r1
    2be0:	ec 0e       	add	r14, r28
    2be2:	fd 1e       	adc	r15, r29
    2be4:	ce 01       	movw	r24, r28
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	b7 01       	movw	r22, r14
    2bea:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2bee:	8e 01       	movw	r16, r28
    2bf0:	0f 5e       	subi	r16, 0xEF	; 239
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	05 96       	adiw	r24, 0x05	; 5
    2bf8:	b8 01       	movw	r22, r16
    2bfa:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2bfe:	29 85       	ldd	r18, Y+9	; 0x09
    2c00:	22 30       	cpi	r18, 0x02	; 2
    2c02:	08 f4       	brcc	.+2      	; 0x2c06 <__divsf3+0x48>
    2c04:	7e c0       	rjmp	.+252    	; 0x2d02 <__divsf3+0x144>
    2c06:	39 89       	ldd	r19, Y+17	; 0x11
    2c08:	32 30       	cpi	r19, 0x02	; 2
    2c0a:	10 f4       	brcc	.+4      	; 0x2c10 <__divsf3+0x52>
    2c0c:	b8 01       	movw	r22, r16
    2c0e:	7c c0       	rjmp	.+248    	; 0x2d08 <__divsf3+0x14a>
    2c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c12:	9a 89       	ldd	r25, Y+18	; 0x12
    2c14:	89 27       	eor	r24, r25
    2c16:	8a 87       	std	Y+10, r24	; 0x0a
    2c18:	24 30       	cpi	r18, 0x04	; 4
    2c1a:	11 f0       	breq	.+4      	; 0x2c20 <__divsf3+0x62>
    2c1c:	22 30       	cpi	r18, 0x02	; 2
    2c1e:	31 f4       	brne	.+12     	; 0x2c2c <__divsf3+0x6e>
    2c20:	23 17       	cp	r18, r19
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <__divsf3+0x68>
    2c24:	6e c0       	rjmp	.+220    	; 0x2d02 <__divsf3+0x144>
    2c26:	66 e8       	ldi	r22, 0x86	; 134
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	6e c0       	rjmp	.+220    	; 0x2d08 <__divsf3+0x14a>
    2c2c:	34 30       	cpi	r19, 0x04	; 4
    2c2e:	39 f4       	brne	.+14     	; 0x2c3e <__divsf3+0x80>
    2c30:	1d 86       	std	Y+13, r1	; 0x0d
    2c32:	1e 86       	std	Y+14, r1	; 0x0e
    2c34:	1f 86       	std	Y+15, r1	; 0x0f
    2c36:	18 8a       	std	Y+16, r1	; 0x10
    2c38:	1c 86       	std	Y+12, r1	; 0x0c
    2c3a:	1b 86       	std	Y+11, r1	; 0x0b
    2c3c:	04 c0       	rjmp	.+8      	; 0x2c46 <__divsf3+0x88>
    2c3e:	32 30       	cpi	r19, 0x02	; 2
    2c40:	21 f4       	brne	.+8      	; 0x2c4a <__divsf3+0x8c>
    2c42:	84 e0       	ldi	r24, 0x04	; 4
    2c44:	89 87       	std	Y+9, r24	; 0x09
    2c46:	b7 01       	movw	r22, r14
    2c48:	5f c0       	rjmp	.+190    	; 0x2d08 <__divsf3+0x14a>
    2c4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c4c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c50:	9c 89       	ldd	r25, Y+20	; 0x14
    2c52:	28 1b       	sub	r18, r24
    2c54:	39 0b       	sbc	r19, r25
    2c56:	3c 87       	std	Y+12, r19	; 0x0c
    2c58:	2b 87       	std	Y+11, r18	; 0x0b
    2c5a:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c5c:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c5e:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c60:	18 89       	ldd	r17, Y+16	; 0x10
    2c62:	ad 88       	ldd	r10, Y+21	; 0x15
    2c64:	be 88       	ldd	r11, Y+22	; 0x16
    2c66:	cf 88       	ldd	r12, Y+23	; 0x17
    2c68:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c6a:	ea 14       	cp	r14, r10
    2c6c:	fb 04       	cpc	r15, r11
    2c6e:	0c 05       	cpc	r16, r12
    2c70:	1d 05       	cpc	r17, r13
    2c72:	40 f4       	brcc	.+16     	; 0x2c84 <__divsf3+0xc6>
    2c74:	ee 0c       	add	r14, r14
    2c76:	ff 1c       	adc	r15, r15
    2c78:	00 1f       	adc	r16, r16
    2c7a:	11 1f       	adc	r17, r17
    2c7c:	21 50       	subi	r18, 0x01	; 1
    2c7e:	30 40       	sbci	r19, 0x00	; 0
    2c80:	3c 87       	std	Y+12, r19	; 0x0c
    2c82:	2b 87       	std	Y+11, r18	; 0x0b
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e0       	ldi	r26, 0x00	; 0
    2c92:	b0 e4       	ldi	r27, 0x40	; 64
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	ea 14       	cp	r14, r10
    2c9a:	fb 04       	cpc	r15, r11
    2c9c:	0c 05       	cpc	r16, r12
    2c9e:	1d 05       	cpc	r17, r13
    2ca0:	40 f0       	brcs	.+16     	; 0x2cb2 <__divsf3+0xf4>
    2ca2:	28 2b       	or	r18, r24
    2ca4:	39 2b       	or	r19, r25
    2ca6:	4a 2b       	or	r20, r26
    2ca8:	5b 2b       	or	r21, r27
    2caa:	ea 18       	sub	r14, r10
    2cac:	fb 08       	sbc	r15, r11
    2cae:	0c 09       	sbc	r16, r12
    2cb0:	1d 09       	sbc	r17, r13
    2cb2:	b6 95       	lsr	r27
    2cb4:	a7 95       	ror	r26
    2cb6:	97 95       	ror	r25
    2cb8:	87 95       	ror	r24
    2cba:	ee 0c       	add	r14, r14
    2cbc:	ff 1c       	adc	r15, r15
    2cbe:	00 1f       	adc	r16, r16
    2cc0:	11 1f       	adc	r17, r17
    2cc2:	6f 5f       	subi	r22, 0xFF	; 255
    2cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc6:	6f 31       	cpi	r22, 0x1F	; 31
    2cc8:	71 05       	cpc	r23, r1
    2cca:	31 f7       	brne	.-52     	; 0x2c98 <__divsf3+0xda>
    2ccc:	da 01       	movw	r26, r20
    2cce:	c9 01       	movw	r24, r18
    2cd0:	8f 77       	andi	r24, 0x7F	; 127
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	a0 70       	andi	r26, 0x00	; 0
    2cd6:	b0 70       	andi	r27, 0x00	; 0
    2cd8:	80 34       	cpi	r24, 0x40	; 64
    2cda:	91 05       	cpc	r25, r1
    2cdc:	a1 05       	cpc	r26, r1
    2cde:	b1 05       	cpc	r27, r1
    2ce0:	61 f4       	brne	.+24     	; 0x2cfa <__divsf3+0x13c>
    2ce2:	27 fd       	sbrc	r18, 7
    2ce4:	0a c0       	rjmp	.+20     	; 0x2cfa <__divsf3+0x13c>
    2ce6:	e1 14       	cp	r14, r1
    2ce8:	f1 04       	cpc	r15, r1
    2cea:	01 05       	cpc	r16, r1
    2cec:	11 05       	cpc	r17, r1
    2cee:	29 f0       	breq	.+10     	; 0x2cfa <__divsf3+0x13c>
    2cf0:	20 5c       	subi	r18, 0xC0	; 192
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	4f 4f       	sbci	r20, 0xFF	; 255
    2cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf8:	20 78       	andi	r18, 0x80	; 128
    2cfa:	2d 87       	std	Y+13, r18	; 0x0d
    2cfc:	3e 87       	std	Y+14, r19	; 0x0e
    2cfe:	4f 87       	std	Y+15, r20	; 0x0f
    2d00:	58 8b       	std	Y+16, r21	; 0x10
    2d02:	be 01       	movw	r22, r28
    2d04:	67 5f       	subi	r22, 0xF7	; 247
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	cb 01       	movw	r24, r22
    2d0a:	0e 94 c5 18 	call	0x318a	; 0x318a <__pack_f>
    2d0e:	68 96       	adiw	r28, 0x18	; 24
    2d10:	ea e0       	ldi	r30, 0x0A	; 10
    2d12:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__+0x10>

00002d16 <__gtsf2>:
    2d16:	a8 e1       	ldi	r26, 0x18	; 24
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e1 e9       	ldi	r30, 0x91	; 145
    2d1c:	f6 e1       	ldi	r31, 0x16	; 22
    2d1e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x18>
    2d22:	69 83       	std	Y+1, r22	; 0x01
    2d24:	7a 83       	std	Y+2, r23	; 0x02
    2d26:	8b 83       	std	Y+3, r24	; 0x03
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	2d 83       	std	Y+5, r18	; 0x05
    2d2c:	3e 83       	std	Y+6, r19	; 0x06
    2d2e:	4f 83       	std	Y+7, r20	; 0x07
    2d30:	58 87       	std	Y+8, r21	; 0x08
    2d32:	89 e0       	ldi	r24, 0x09	; 9
    2d34:	e8 2e       	mov	r14, r24
    2d36:	f1 2c       	mov	r15, r1
    2d38:	ec 0e       	add	r14, r28
    2d3a:	fd 1e       	adc	r15, r29
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	b7 01       	movw	r22, r14
    2d42:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2d46:	8e 01       	movw	r16, r28
    2d48:	0f 5e       	subi	r16, 0xEF	; 239
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	05 96       	adiw	r24, 0x05	; 5
    2d50:	b8 01       	movw	r22, r16
    2d52:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2d56:	89 85       	ldd	r24, Y+9	; 0x09
    2d58:	82 30       	cpi	r24, 0x02	; 2
    2d5a:	40 f0       	brcs	.+16     	; 0x2d6c <__gtsf2+0x56>
    2d5c:	89 89       	ldd	r24, Y+17	; 0x11
    2d5e:	82 30       	cpi	r24, 0x02	; 2
    2d60:	28 f0       	brcs	.+10     	; 0x2d6c <__gtsf2+0x56>
    2d62:	c7 01       	movw	r24, r14
    2d64:	b8 01       	movw	r22, r16
    2d66:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fpcmp_parts_f>
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <__gtsf2+0x58>
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	68 96       	adiw	r28, 0x18	; 24
    2d70:	e6 e0       	ldi	r30, 0x06	; 6
    2d72:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x18>

00002d76 <__gesf2>:
    2d76:	a8 e1       	ldi	r26, 0x18	; 24
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e1 ec       	ldi	r30, 0xC1	; 193
    2d7c:	f6 e1       	ldi	r31, 0x16	; 22
    2d7e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x18>
    2d82:	69 83       	std	Y+1, r22	; 0x01
    2d84:	7a 83       	std	Y+2, r23	; 0x02
    2d86:	8b 83       	std	Y+3, r24	; 0x03
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	2d 83       	std	Y+5, r18	; 0x05
    2d8c:	3e 83       	std	Y+6, r19	; 0x06
    2d8e:	4f 83       	std	Y+7, r20	; 0x07
    2d90:	58 87       	std	Y+8, r21	; 0x08
    2d92:	89 e0       	ldi	r24, 0x09	; 9
    2d94:	e8 2e       	mov	r14, r24
    2d96:	f1 2c       	mov	r15, r1
    2d98:	ec 0e       	add	r14, r28
    2d9a:	fd 1e       	adc	r15, r29
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	01 96       	adiw	r24, 0x01	; 1
    2da0:	b7 01       	movw	r22, r14
    2da2:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2da6:	8e 01       	movw	r16, r28
    2da8:	0f 5e       	subi	r16, 0xEF	; 239
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	ce 01       	movw	r24, r28
    2dae:	05 96       	adiw	r24, 0x05	; 5
    2db0:	b8 01       	movw	r22, r16
    2db2:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	82 30       	cpi	r24, 0x02	; 2
    2dba:	40 f0       	brcs	.+16     	; 0x2dcc <__gesf2+0x56>
    2dbc:	89 89       	ldd	r24, Y+17	; 0x11
    2dbe:	82 30       	cpi	r24, 0x02	; 2
    2dc0:	28 f0       	brcs	.+10     	; 0x2dcc <__gesf2+0x56>
    2dc2:	c7 01       	movw	r24, r14
    2dc4:	b8 01       	movw	r22, r16
    2dc6:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fpcmp_parts_f>
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <__gesf2+0x58>
    2dcc:	8f ef       	ldi	r24, 0xFF	; 255
    2dce:	68 96       	adiw	r28, 0x18	; 24
    2dd0:	e6 e0       	ldi	r30, 0x06	; 6
    2dd2:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x18>

00002dd6 <__ltsf2>:
    2dd6:	a8 e1       	ldi	r26, 0x18	; 24
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e1 ef       	ldi	r30, 0xF1	; 241
    2ddc:	f6 e1       	ldi	r31, 0x16	; 22
    2dde:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x18>
    2de2:	69 83       	std	Y+1, r22	; 0x01
    2de4:	7a 83       	std	Y+2, r23	; 0x02
    2de6:	8b 83       	std	Y+3, r24	; 0x03
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	2d 83       	std	Y+5, r18	; 0x05
    2dec:	3e 83       	std	Y+6, r19	; 0x06
    2dee:	4f 83       	std	Y+7, r20	; 0x07
    2df0:	58 87       	std	Y+8, r21	; 0x08
    2df2:	89 e0       	ldi	r24, 0x09	; 9
    2df4:	e8 2e       	mov	r14, r24
    2df6:	f1 2c       	mov	r15, r1
    2df8:	ec 0e       	add	r14, r28
    2dfa:	fd 1e       	adc	r15, r29
    2dfc:	ce 01       	movw	r24, r28
    2dfe:	01 96       	adiw	r24, 0x01	; 1
    2e00:	b7 01       	movw	r22, r14
    2e02:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2e06:	8e 01       	movw	r16, r28
    2e08:	0f 5e       	subi	r16, 0xEF	; 239
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	05 96       	adiw	r24, 0x05	; 5
    2e10:	b8 01       	movw	r22, r16
    2e12:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	82 30       	cpi	r24, 0x02	; 2
    2e1a:	40 f0       	brcs	.+16     	; 0x2e2c <__ltsf2+0x56>
    2e1c:	89 89       	ldd	r24, Y+17	; 0x11
    2e1e:	82 30       	cpi	r24, 0x02	; 2
    2e20:	28 f0       	brcs	.+10     	; 0x2e2c <__ltsf2+0x56>
    2e22:	c7 01       	movw	r24, r14
    2e24:	b8 01       	movw	r22, r16
    2e26:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fpcmp_parts_f>
    2e2a:	01 c0       	rjmp	.+2      	; 0x2e2e <__ltsf2+0x58>
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	68 96       	adiw	r28, 0x18	; 24
    2e30:	e6 e0       	ldi	r30, 0x06	; 6
    2e32:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x18>

00002e36 <__lesf2>:
    2e36:	a8 e1       	ldi	r26, 0x18	; 24
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e1 e2       	ldi	r30, 0x21	; 33
    2e3c:	f7 e1       	ldi	r31, 0x17	; 23
    2e3e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x18>
    2e42:	69 83       	std	Y+1, r22	; 0x01
    2e44:	7a 83       	std	Y+2, r23	; 0x02
    2e46:	8b 83       	std	Y+3, r24	; 0x03
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	2d 83       	std	Y+5, r18	; 0x05
    2e4c:	3e 83       	std	Y+6, r19	; 0x06
    2e4e:	4f 83       	std	Y+7, r20	; 0x07
    2e50:	58 87       	std	Y+8, r21	; 0x08
    2e52:	89 e0       	ldi	r24, 0x09	; 9
    2e54:	e8 2e       	mov	r14, r24
    2e56:	f1 2c       	mov	r15, r1
    2e58:	ec 0e       	add	r14, r28
    2e5a:	fd 1e       	adc	r15, r29
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	b7 01       	movw	r22, r14
    2e62:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2e66:	8e 01       	movw	r16, r28
    2e68:	0f 5e       	subi	r16, 0xEF	; 239
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	05 96       	adiw	r24, 0x05	; 5
    2e70:	b8 01       	movw	r22, r16
    2e72:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	82 30       	cpi	r24, 0x02	; 2
    2e7a:	40 f0       	brcs	.+16     	; 0x2e8c <__lesf2+0x56>
    2e7c:	89 89       	ldd	r24, Y+17	; 0x11
    2e7e:	82 30       	cpi	r24, 0x02	; 2
    2e80:	28 f0       	brcs	.+10     	; 0x2e8c <__lesf2+0x56>
    2e82:	c7 01       	movw	r24, r14
    2e84:	b8 01       	movw	r22, r16
    2e86:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fpcmp_parts_f>
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <__lesf2+0x58>
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	68 96       	adiw	r28, 0x18	; 24
    2e90:	e6 e0       	ldi	r30, 0x06	; 6
    2e92:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x18>

00002e96 <__floatsisf>:
    2e96:	a8 e0       	ldi	r26, 0x08	; 8
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e1 e5       	ldi	r30, 0x51	; 81
    2e9c:	f7 e1       	ldi	r31, 0x17	; 23
    2e9e:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__prologue_saves__+0x12>
    2ea2:	9b 01       	movw	r18, r22
    2ea4:	ac 01       	movw	r20, r24
    2ea6:	83 e0       	ldi	r24, 0x03	; 3
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	da 01       	movw	r26, r20
    2eac:	c9 01       	movw	r24, r18
    2eae:	88 27       	eor	r24, r24
    2eb0:	b7 fd       	sbrc	r27, 7
    2eb2:	83 95       	inc	r24
    2eb4:	99 27       	eor	r25, r25
    2eb6:	aa 27       	eor	r26, r26
    2eb8:	bb 27       	eor	r27, r27
    2eba:	b8 2e       	mov	r11, r24
    2ebc:	21 15       	cp	r18, r1
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	41 05       	cpc	r20, r1
    2ec2:	51 05       	cpc	r21, r1
    2ec4:	19 f4       	brne	.+6      	; 0x2ecc <__floatsisf+0x36>
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	3a c0       	rjmp	.+116    	; 0x2f40 <__floatsisf+0xaa>
    2ecc:	88 23       	and	r24, r24
    2ece:	a9 f0       	breq	.+42     	; 0x2efa <__floatsisf+0x64>
    2ed0:	20 30       	cpi	r18, 0x00	; 0
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	38 07       	cpc	r19, r24
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	48 07       	cpc	r20, r24
    2eda:	80 e8       	ldi	r24, 0x80	; 128
    2edc:	58 07       	cpc	r21, r24
    2ede:	29 f4       	brne	.+10     	; 0x2eea <__floatsisf+0x54>
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	70 e0       	ldi	r23, 0x00	; 0
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	9f ec       	ldi	r25, 0xCF	; 207
    2ee8:	30 c0       	rjmp	.+96     	; 0x2f4a <__floatsisf+0xb4>
    2eea:	ee 24       	eor	r14, r14
    2eec:	ff 24       	eor	r15, r15
    2eee:	87 01       	movw	r16, r14
    2ef0:	e2 1a       	sub	r14, r18
    2ef2:	f3 0a       	sbc	r15, r19
    2ef4:	04 0b       	sbc	r16, r20
    2ef6:	15 0b       	sbc	r17, r21
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <__floatsisf+0x68>
    2efa:	79 01       	movw	r14, r18
    2efc:	8a 01       	movw	r16, r20
    2efe:	8e e1       	ldi	r24, 0x1E	; 30
    2f00:	c8 2e       	mov	r12, r24
    2f02:	d1 2c       	mov	r13, r1
    2f04:	dc 82       	std	Y+4, r13	; 0x04
    2f06:	cb 82       	std	Y+3, r12	; 0x03
    2f08:	ed 82       	std	Y+5, r14	; 0x05
    2f0a:	fe 82       	std	Y+6, r15	; 0x06
    2f0c:	0f 83       	std	Y+7, r16	; 0x07
    2f0e:	18 87       	std	Y+8, r17	; 0x08
    2f10:	c8 01       	movw	r24, r16
    2f12:	b7 01       	movw	r22, r14
    2f14:	0e 94 76 18 	call	0x30ec	; 0x30ec <__clzsi2>
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	18 16       	cp	r1, r24
    2f1c:	19 06       	cpc	r1, r25
    2f1e:	84 f4       	brge	.+32     	; 0x2f40 <__floatsisf+0xaa>
    2f20:	08 2e       	mov	r0, r24
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <__floatsisf+0x96>
    2f24:	ee 0c       	add	r14, r14
    2f26:	ff 1c       	adc	r15, r15
    2f28:	00 1f       	adc	r16, r16
    2f2a:	11 1f       	adc	r17, r17
    2f2c:	0a 94       	dec	r0
    2f2e:	d2 f7       	brpl	.-12     	; 0x2f24 <__floatsisf+0x8e>
    2f30:	ed 82       	std	Y+5, r14	; 0x05
    2f32:	fe 82       	std	Y+6, r15	; 0x06
    2f34:	0f 83       	std	Y+7, r16	; 0x07
    2f36:	18 87       	std	Y+8, r17	; 0x08
    2f38:	c8 1a       	sub	r12, r24
    2f3a:	d9 0a       	sbc	r13, r25
    2f3c:	dc 82       	std	Y+4, r13	; 0x04
    2f3e:	cb 82       	std	Y+3, r12	; 0x03
    2f40:	ba 82       	std	Y+2, r11	; 0x02
    2f42:	ce 01       	movw	r24, r28
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	0e 94 c5 18 	call	0x318a	; 0x318a <__pack_f>
    2f4a:	28 96       	adiw	r28, 0x08	; 8
    2f4c:	e9 e0       	ldi	r30, 0x09	; 9
    2f4e:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__epilogue_restores__+0x12>

00002f52 <__fixsfsi>:
    2f52:	ac e0       	ldi	r26, 0x0C	; 12
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	ef ea       	ldi	r30, 0xAF	; 175
    2f58:	f7 e1       	ldi	r31, 0x17	; 23
    2f5a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__prologue_saves__+0x20>
    2f5e:	69 83       	std	Y+1, r22	; 0x01
    2f60:	7a 83       	std	Y+2, r23	; 0x02
    2f62:	8b 83       	std	Y+3, r24	; 0x03
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	ce 01       	movw	r24, r28
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	be 01       	movw	r22, r28
    2f6c:	6b 5f       	subi	r22, 0xFB	; 251
    2f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f70:	0e 94 9a 19 	call	0x3334	; 0x3334 <__unpack_f>
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	82 30       	cpi	r24, 0x02	; 2
    2f78:	61 f1       	breq	.+88     	; 0x2fd2 <__fixsfsi+0x80>
    2f7a:	82 30       	cpi	r24, 0x02	; 2
    2f7c:	50 f1       	brcs	.+84     	; 0x2fd2 <__fixsfsi+0x80>
    2f7e:	84 30       	cpi	r24, 0x04	; 4
    2f80:	21 f4       	brne	.+8      	; 0x2f8a <__fixsfsi+0x38>
    2f82:	8e 81       	ldd	r24, Y+6	; 0x06
    2f84:	88 23       	and	r24, r24
    2f86:	51 f1       	breq	.+84     	; 0x2fdc <__fixsfsi+0x8a>
    2f88:	2e c0       	rjmp	.+92     	; 0x2fe6 <__fixsfsi+0x94>
    2f8a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f8c:	38 85       	ldd	r19, Y+8	; 0x08
    2f8e:	37 fd       	sbrc	r19, 7
    2f90:	20 c0       	rjmp	.+64     	; 0x2fd2 <__fixsfsi+0x80>
    2f92:	6e 81       	ldd	r22, Y+6	; 0x06
    2f94:	2f 31       	cpi	r18, 0x1F	; 31
    2f96:	31 05       	cpc	r19, r1
    2f98:	1c f0       	brlt	.+6      	; 0x2fa0 <__fixsfsi+0x4e>
    2f9a:	66 23       	and	r22, r22
    2f9c:	f9 f0       	breq	.+62     	; 0x2fdc <__fixsfsi+0x8a>
    2f9e:	23 c0       	rjmp	.+70     	; 0x2fe6 <__fixsfsi+0x94>
    2fa0:	8e e1       	ldi	r24, 0x1E	; 30
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	82 1b       	sub	r24, r18
    2fa6:	93 0b       	sbc	r25, r19
    2fa8:	29 85       	ldd	r18, Y+9	; 0x09
    2faa:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fac:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fae:	5c 85       	ldd	r21, Y+12	; 0x0c
    2fb0:	04 c0       	rjmp	.+8      	; 0x2fba <__fixsfsi+0x68>
    2fb2:	56 95       	lsr	r21
    2fb4:	47 95       	ror	r20
    2fb6:	37 95       	ror	r19
    2fb8:	27 95       	ror	r18
    2fba:	8a 95       	dec	r24
    2fbc:	d2 f7       	brpl	.-12     	; 0x2fb2 <__fixsfsi+0x60>
    2fbe:	66 23       	and	r22, r22
    2fc0:	b1 f0       	breq	.+44     	; 0x2fee <__fixsfsi+0x9c>
    2fc2:	50 95       	com	r21
    2fc4:	40 95       	com	r20
    2fc6:	30 95       	com	r19
    2fc8:	21 95       	neg	r18
    2fca:	3f 4f       	sbci	r19, 0xFF	; 255
    2fcc:	4f 4f       	sbci	r20, 0xFF	; 255
    2fce:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd0:	0e c0       	rjmp	.+28     	; 0x2fee <__fixsfsi+0x9c>
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	09 c0       	rjmp	.+18     	; 0x2fee <__fixsfsi+0x9c>
    2fdc:	2f ef       	ldi	r18, 0xFF	; 255
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f ef       	ldi	r20, 0xFF	; 255
    2fe2:	5f e7       	ldi	r21, 0x7F	; 127
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <__fixsfsi+0x9c>
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	50 e8       	ldi	r21, 0x80	; 128
    2fee:	b9 01       	movw	r22, r18
    2ff0:	ca 01       	movw	r24, r20
    2ff2:	2c 96       	adiw	r28, 0x0c	; 12
    2ff4:	e2 e0       	ldi	r30, 0x02	; 2
    2ff6:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__epilogue_restores__+0x20>

00002ffa <__floatunsisf>:
    2ffa:	a8 e0       	ldi	r26, 0x08	; 8
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e3 e0       	ldi	r30, 0x03	; 3
    3000:	f8 e1       	ldi	r31, 0x18	; 24
    3002:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__+0x10>
    3006:	7b 01       	movw	r14, r22
    3008:	8c 01       	movw	r16, r24
    300a:	61 15       	cp	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	81 05       	cpc	r24, r1
    3010:	91 05       	cpc	r25, r1
    3012:	19 f4       	brne	.+6      	; 0x301a <__floatunsisf+0x20>
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	60 c0       	rjmp	.+192    	; 0x30da <__floatunsisf+0xe0>
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	8e e1       	ldi	r24, 0x1E	; 30
    3020:	c8 2e       	mov	r12, r24
    3022:	d1 2c       	mov	r13, r1
    3024:	dc 82       	std	Y+4, r13	; 0x04
    3026:	cb 82       	std	Y+3, r12	; 0x03
    3028:	ed 82       	std	Y+5, r14	; 0x05
    302a:	fe 82       	std	Y+6, r15	; 0x06
    302c:	0f 83       	std	Y+7, r16	; 0x07
    302e:	18 87       	std	Y+8, r17	; 0x08
    3030:	c8 01       	movw	r24, r16
    3032:	b7 01       	movw	r22, r14
    3034:	0e 94 76 18 	call	0x30ec	; 0x30ec <__clzsi2>
    3038:	fc 01       	movw	r30, r24
    303a:	31 97       	sbiw	r30, 0x01	; 1
    303c:	f7 ff       	sbrs	r31, 7
    303e:	3b c0       	rjmp	.+118    	; 0x30b6 <__floatunsisf+0xbc>
    3040:	22 27       	eor	r18, r18
    3042:	33 27       	eor	r19, r19
    3044:	2e 1b       	sub	r18, r30
    3046:	3f 0b       	sbc	r19, r31
    3048:	57 01       	movw	r10, r14
    304a:	68 01       	movw	r12, r16
    304c:	02 2e       	mov	r0, r18
    304e:	04 c0       	rjmp	.+8      	; 0x3058 <__floatunsisf+0x5e>
    3050:	d6 94       	lsr	r13
    3052:	c7 94       	ror	r12
    3054:	b7 94       	ror	r11
    3056:	a7 94       	ror	r10
    3058:	0a 94       	dec	r0
    305a:	d2 f7       	brpl	.-12     	; 0x3050 <__floatunsisf+0x56>
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	a0 e0       	ldi	r26, 0x00	; 0
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	04 c0       	rjmp	.+8      	; 0x3076 <__floatunsisf+0x7c>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	aa 1f       	adc	r26, r26
    3074:	bb 1f       	adc	r27, r27
    3076:	2a 95       	dec	r18
    3078:	d2 f7       	brpl	.-12     	; 0x306e <__floatunsisf+0x74>
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	a1 09       	sbc	r26, r1
    307e:	b1 09       	sbc	r27, r1
    3080:	8e 21       	and	r24, r14
    3082:	9f 21       	and	r25, r15
    3084:	a0 23       	and	r26, r16
    3086:	b1 23       	and	r27, r17
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	a1 05       	cpc	r26, r1
    308c:	b1 05       	cpc	r27, r1
    308e:	21 f0       	breq	.+8      	; 0x3098 <__floatunsisf+0x9e>
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	4a 29       	or	r20, r10
    309a:	5b 29       	or	r21, r11
    309c:	6c 29       	or	r22, r12
    309e:	7d 29       	or	r23, r13
    30a0:	4d 83       	std	Y+5, r20	; 0x05
    30a2:	5e 83       	std	Y+6, r21	; 0x06
    30a4:	6f 83       	std	Y+7, r22	; 0x07
    30a6:	78 87       	std	Y+8, r23	; 0x08
    30a8:	8e e1       	ldi	r24, 0x1E	; 30
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	8e 1b       	sub	r24, r30
    30ae:	9f 0b       	sbc	r25, r31
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
    30b4:	12 c0       	rjmp	.+36     	; 0x30da <__floatunsisf+0xe0>
    30b6:	30 97       	sbiw	r30, 0x00	; 0
    30b8:	81 f0       	breq	.+32     	; 0x30da <__floatunsisf+0xe0>
    30ba:	0e 2e       	mov	r0, r30
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <__floatunsisf+0xcc>
    30be:	ee 0c       	add	r14, r14
    30c0:	ff 1c       	adc	r15, r15
    30c2:	00 1f       	adc	r16, r16
    30c4:	11 1f       	adc	r17, r17
    30c6:	0a 94       	dec	r0
    30c8:	d2 f7       	brpl	.-12     	; 0x30be <__floatunsisf+0xc4>
    30ca:	ed 82       	std	Y+5, r14	; 0x05
    30cc:	fe 82       	std	Y+6, r15	; 0x06
    30ce:	0f 83       	std	Y+7, r16	; 0x07
    30d0:	18 87       	std	Y+8, r17	; 0x08
    30d2:	ce 1a       	sub	r12, r30
    30d4:	df 0a       	sbc	r13, r31
    30d6:	dc 82       	std	Y+4, r13	; 0x04
    30d8:	cb 82       	std	Y+3, r12	; 0x03
    30da:	1a 82       	std	Y+2, r1	; 0x02
    30dc:	ce 01       	movw	r24, r28
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	0e 94 c5 18 	call	0x318a	; 0x318a <__pack_f>
    30e4:	28 96       	adiw	r28, 0x08	; 8
    30e6:	ea e0       	ldi	r30, 0x0A	; 10
    30e8:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__+0x10>

000030ec <__clzsi2>:
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	7b 01       	movw	r14, r22
    30f6:	8c 01       	movw	r16, r24
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	e8 16       	cp	r14, r24
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	f8 06       	cpc	r15, r24
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	08 07       	cpc	r16, r24
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	18 07       	cpc	r17, r24
    3108:	88 f4       	brcc	.+34     	; 0x312c <__clzsi2+0x40>
    310a:	8f ef       	ldi	r24, 0xFF	; 255
    310c:	e8 16       	cp	r14, r24
    310e:	f1 04       	cpc	r15, r1
    3110:	01 05       	cpc	r16, r1
    3112:	11 05       	cpc	r17, r1
    3114:	31 f0       	breq	.+12     	; 0x3122 <__clzsi2+0x36>
    3116:	28 f0       	brcs	.+10     	; 0x3122 <__clzsi2+0x36>
    3118:	88 e0       	ldi	r24, 0x08	; 8
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e0       	ldi	r26, 0x00	; 0
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	17 c0       	rjmp	.+46     	; 0x3150 <__clzsi2+0x64>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a0 e0       	ldi	r26, 0x00	; 0
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	12 c0       	rjmp	.+36     	; 0x3150 <__clzsi2+0x64>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	e8 16       	cp	r14, r24
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	f8 06       	cpc	r15, r24
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	08 07       	cpc	r16, r24
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	18 07       	cpc	r17, r24
    313c:	28 f0       	brcs	.+10     	; 0x3148 <__clzsi2+0x5c>
    313e:	88 e1       	ldi	r24, 0x18	; 24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a0 e0       	ldi	r26, 0x00	; 0
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <__clzsi2+0x64>
    3148:	80 e1       	ldi	r24, 0x10	; 16
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	a0 e0       	ldi	r26, 0x00	; 0
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	20 e2       	ldi	r18, 0x20	; 32
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	28 1b       	sub	r18, r24
    315a:	39 0b       	sbc	r19, r25
    315c:	4a 0b       	sbc	r20, r26
    315e:	5b 0b       	sbc	r21, r27
    3160:	04 c0       	rjmp	.+8      	; 0x316a <__clzsi2+0x7e>
    3162:	16 95       	lsr	r17
    3164:	07 95       	ror	r16
    3166:	f7 94       	ror	r15
    3168:	e7 94       	ror	r14
    316a:	8a 95       	dec	r24
    316c:	d2 f7       	brpl	.-12     	; 0x3162 <__clzsi2+0x76>
    316e:	f7 01       	movw	r30, r14
    3170:	e2 57       	subi	r30, 0x72	; 114
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 81       	ld	r24, Z
    3176:	28 1b       	sub	r18, r24
    3178:	31 09       	sbc	r19, r1
    317a:	41 09       	sbc	r20, r1
    317c:	51 09       	sbc	r21, r1
    317e:	c9 01       	movw	r24, r18
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	ff 90       	pop	r15
    3186:	ef 90       	pop	r14
    3188:	08 95       	ret

0000318a <__pack_f>:
    318a:	df 92       	push	r13
    318c:	ef 92       	push	r14
    318e:	ff 92       	push	r15
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	fc 01       	movw	r30, r24
    3196:	e4 80       	ldd	r14, Z+4	; 0x04
    3198:	f5 80       	ldd	r15, Z+5	; 0x05
    319a:	06 81       	ldd	r16, Z+6	; 0x06
    319c:	17 81       	ldd	r17, Z+7	; 0x07
    319e:	d1 80       	ldd	r13, Z+1	; 0x01
    31a0:	80 81       	ld	r24, Z
    31a2:	82 30       	cpi	r24, 0x02	; 2
    31a4:	48 f4       	brcc	.+18     	; 0x31b8 <__pack_f+0x2e>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 e1       	ldi	r26, 0x10	; 16
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e8 2a       	or	r14, r24
    31b0:	f9 2a       	or	r15, r25
    31b2:	0a 2b       	or	r16, r26
    31b4:	1b 2b       	or	r17, r27
    31b6:	a5 c0       	rjmp	.+330    	; 0x3302 <__pack_f+0x178>
    31b8:	84 30       	cpi	r24, 0x04	; 4
    31ba:	09 f4       	brne	.+2      	; 0x31be <__pack_f+0x34>
    31bc:	9f c0       	rjmp	.+318    	; 0x32fc <__pack_f+0x172>
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	21 f4       	brne	.+8      	; 0x31ca <__pack_f+0x40>
    31c2:	ee 24       	eor	r14, r14
    31c4:	ff 24       	eor	r15, r15
    31c6:	87 01       	movw	r16, r14
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <__pack_f+0x4a>
    31ca:	e1 14       	cp	r14, r1
    31cc:	f1 04       	cpc	r15, r1
    31ce:	01 05       	cpc	r16, r1
    31d0:	11 05       	cpc	r17, r1
    31d2:	19 f4       	brne	.+6      	; 0x31da <__pack_f+0x50>
    31d4:	e0 e0       	ldi	r30, 0x00	; 0
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	96 c0       	rjmp	.+300    	; 0x3306 <__pack_f+0x17c>
    31da:	62 81       	ldd	r22, Z+2	; 0x02
    31dc:	73 81       	ldd	r23, Z+3	; 0x03
    31de:	9f ef       	ldi	r25, 0xFF	; 255
    31e0:	62 38       	cpi	r22, 0x82	; 130
    31e2:	79 07       	cpc	r23, r25
    31e4:	0c f0       	brlt	.+2      	; 0x31e8 <__pack_f+0x5e>
    31e6:	5b c0       	rjmp	.+182    	; 0x329e <__pack_f+0x114>
    31e8:	22 e8       	ldi	r18, 0x82	; 130
    31ea:	3f ef       	ldi	r19, 0xFF	; 255
    31ec:	26 1b       	sub	r18, r22
    31ee:	37 0b       	sbc	r19, r23
    31f0:	2a 31       	cpi	r18, 0x1A	; 26
    31f2:	31 05       	cpc	r19, r1
    31f4:	2c f0       	brlt	.+10     	; 0x3200 <__pack_f+0x76>
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e0       	ldi	r20, 0x00	; 0
    31fc:	50 e0       	ldi	r21, 0x00	; 0
    31fe:	2a c0       	rjmp	.+84     	; 0x3254 <__pack_f+0xca>
    3200:	b8 01       	movw	r22, r16
    3202:	a7 01       	movw	r20, r14
    3204:	02 2e       	mov	r0, r18
    3206:	04 c0       	rjmp	.+8      	; 0x3210 <__pack_f+0x86>
    3208:	76 95       	lsr	r23
    320a:	67 95       	ror	r22
    320c:	57 95       	ror	r21
    320e:	47 95       	ror	r20
    3210:	0a 94       	dec	r0
    3212:	d2 f7       	brpl	.-12     	; 0x3208 <__pack_f+0x7e>
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a0 e0       	ldi	r26, 0x00	; 0
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <__pack_f+0x9c>
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	aa 1f       	adc	r26, r26
    3224:	bb 1f       	adc	r27, r27
    3226:	2a 95       	dec	r18
    3228:	d2 f7       	brpl	.-12     	; 0x321e <__pack_f+0x94>
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	a1 09       	sbc	r26, r1
    322e:	b1 09       	sbc	r27, r1
    3230:	8e 21       	and	r24, r14
    3232:	9f 21       	and	r25, r15
    3234:	a0 23       	and	r26, r16
    3236:	b1 23       	and	r27, r17
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	a1 05       	cpc	r26, r1
    323c:	b1 05       	cpc	r27, r1
    323e:	21 f0       	breq	.+8      	; 0x3248 <__pack_f+0xbe>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	9a 01       	movw	r18, r20
    324a:	ab 01       	movw	r20, r22
    324c:	28 2b       	or	r18, r24
    324e:	39 2b       	or	r19, r25
    3250:	4a 2b       	or	r20, r26
    3252:	5b 2b       	or	r21, r27
    3254:	da 01       	movw	r26, r20
    3256:	c9 01       	movw	r24, r18
    3258:	8f 77       	andi	r24, 0x7F	; 127
    325a:	90 70       	andi	r25, 0x00	; 0
    325c:	a0 70       	andi	r26, 0x00	; 0
    325e:	b0 70       	andi	r27, 0x00	; 0
    3260:	80 34       	cpi	r24, 0x40	; 64
    3262:	91 05       	cpc	r25, r1
    3264:	a1 05       	cpc	r26, r1
    3266:	b1 05       	cpc	r27, r1
    3268:	39 f4       	brne	.+14     	; 0x3278 <__pack_f+0xee>
    326a:	27 ff       	sbrs	r18, 7
    326c:	09 c0       	rjmp	.+18     	; 0x3280 <__pack_f+0xf6>
    326e:	20 5c       	subi	r18, 0xC0	; 192
    3270:	3f 4f       	sbci	r19, 0xFF	; 255
    3272:	4f 4f       	sbci	r20, 0xFF	; 255
    3274:	5f 4f       	sbci	r21, 0xFF	; 255
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <__pack_f+0xf6>
    3278:	21 5c       	subi	r18, 0xC1	; 193
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	4f 4f       	sbci	r20, 0xFF	; 255
    327e:	5f 4f       	sbci	r21, 0xFF	; 255
    3280:	e0 e0       	ldi	r30, 0x00	; 0
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	20 30       	cpi	r18, 0x00	; 0
    3286:	a0 e0       	ldi	r26, 0x00	; 0
    3288:	3a 07       	cpc	r19, r26
    328a:	a0 e0       	ldi	r26, 0x00	; 0
    328c:	4a 07       	cpc	r20, r26
    328e:	a0 e4       	ldi	r26, 0x40	; 64
    3290:	5a 07       	cpc	r21, r26
    3292:	10 f0       	brcs	.+4      	; 0x3298 <__pack_f+0x10e>
    3294:	e1 e0       	ldi	r30, 0x01	; 1
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	79 01       	movw	r14, r18
    329a:	8a 01       	movw	r16, r20
    329c:	27 c0       	rjmp	.+78     	; 0x32ec <__pack_f+0x162>
    329e:	60 38       	cpi	r22, 0x80	; 128
    32a0:	71 05       	cpc	r23, r1
    32a2:	64 f5       	brge	.+88     	; 0x32fc <__pack_f+0x172>
    32a4:	fb 01       	movw	r30, r22
    32a6:	e1 58       	subi	r30, 0x81	; 129
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	d8 01       	movw	r26, r16
    32ac:	c7 01       	movw	r24, r14
    32ae:	8f 77       	andi	r24, 0x7F	; 127
    32b0:	90 70       	andi	r25, 0x00	; 0
    32b2:	a0 70       	andi	r26, 0x00	; 0
    32b4:	b0 70       	andi	r27, 0x00	; 0
    32b6:	80 34       	cpi	r24, 0x40	; 64
    32b8:	91 05       	cpc	r25, r1
    32ba:	a1 05       	cpc	r26, r1
    32bc:	b1 05       	cpc	r27, r1
    32be:	39 f4       	brne	.+14     	; 0x32ce <__pack_f+0x144>
    32c0:	e7 fe       	sbrs	r14, 7
    32c2:	0d c0       	rjmp	.+26     	; 0x32de <__pack_f+0x154>
    32c4:	80 e4       	ldi	r24, 0x40	; 64
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	a0 e0       	ldi	r26, 0x00	; 0
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	04 c0       	rjmp	.+8      	; 0x32d6 <__pack_f+0x14c>
    32ce:	8f e3       	ldi	r24, 0x3F	; 63
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e8 0e       	add	r14, r24
    32d8:	f9 1e       	adc	r15, r25
    32da:	0a 1f       	adc	r16, r26
    32dc:	1b 1f       	adc	r17, r27
    32de:	17 ff       	sbrs	r17, 7
    32e0:	05 c0       	rjmp	.+10     	; 0x32ec <__pack_f+0x162>
    32e2:	16 95       	lsr	r17
    32e4:	07 95       	ror	r16
    32e6:	f7 94       	ror	r15
    32e8:	e7 94       	ror	r14
    32ea:	31 96       	adiw	r30, 0x01	; 1
    32ec:	87 e0       	ldi	r24, 0x07	; 7
    32ee:	16 95       	lsr	r17
    32f0:	07 95       	ror	r16
    32f2:	f7 94       	ror	r15
    32f4:	e7 94       	ror	r14
    32f6:	8a 95       	dec	r24
    32f8:	d1 f7       	brne	.-12     	; 0x32ee <__pack_f+0x164>
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <__pack_f+0x17c>
    32fc:	ee 24       	eor	r14, r14
    32fe:	ff 24       	eor	r15, r15
    3300:	87 01       	movw	r16, r14
    3302:	ef ef       	ldi	r30, 0xFF	; 255
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	6e 2f       	mov	r22, r30
    3308:	67 95       	ror	r22
    330a:	66 27       	eor	r22, r22
    330c:	67 95       	ror	r22
    330e:	90 2f       	mov	r25, r16
    3310:	9f 77       	andi	r25, 0x7F	; 127
    3312:	d7 94       	ror	r13
    3314:	dd 24       	eor	r13, r13
    3316:	d7 94       	ror	r13
    3318:	8e 2f       	mov	r24, r30
    331a:	86 95       	lsr	r24
    331c:	49 2f       	mov	r20, r25
    331e:	46 2b       	or	r20, r22
    3320:	58 2f       	mov	r21, r24
    3322:	5d 29       	or	r21, r13
    3324:	b7 01       	movw	r22, r14
    3326:	ca 01       	movw	r24, r20
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	df 90       	pop	r13
    3332:	08 95       	ret

00003334 <__unpack_f>:
    3334:	fc 01       	movw	r30, r24
    3336:	db 01       	movw	r26, r22
    3338:	40 81       	ld	r20, Z
    333a:	51 81       	ldd	r21, Z+1	; 0x01
    333c:	22 81       	ldd	r18, Z+2	; 0x02
    333e:	62 2f       	mov	r22, r18
    3340:	6f 77       	andi	r22, 0x7F	; 127
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	22 1f       	adc	r18, r18
    3346:	22 27       	eor	r18, r18
    3348:	22 1f       	adc	r18, r18
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	89 2f       	mov	r24, r25
    334e:	88 0f       	add	r24, r24
    3350:	82 2b       	or	r24, r18
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	99 1f       	adc	r25, r25
    3358:	99 27       	eor	r25, r25
    335a:	99 1f       	adc	r25, r25
    335c:	11 96       	adiw	r26, 0x01	; 1
    335e:	9c 93       	st	X, r25
    3360:	11 97       	sbiw	r26, 0x01	; 1
    3362:	21 15       	cp	r18, r1
    3364:	31 05       	cpc	r19, r1
    3366:	a9 f5       	brne	.+106    	; 0x33d2 <__unpack_f+0x9e>
    3368:	41 15       	cp	r20, r1
    336a:	51 05       	cpc	r21, r1
    336c:	61 05       	cpc	r22, r1
    336e:	71 05       	cpc	r23, r1
    3370:	11 f4       	brne	.+4      	; 0x3376 <__unpack_f+0x42>
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	37 c0       	rjmp	.+110    	; 0x33e4 <__unpack_f+0xb0>
    3376:	82 e8       	ldi	r24, 0x82	; 130
    3378:	9f ef       	ldi	r25, 0xFF	; 255
    337a:	13 96       	adiw	r26, 0x03	; 3
    337c:	9c 93       	st	X, r25
    337e:	8e 93       	st	-X, r24
    3380:	12 97       	sbiw	r26, 0x02	; 2
    3382:	9a 01       	movw	r18, r20
    3384:	ab 01       	movw	r20, r22
    3386:	67 e0       	ldi	r22, 0x07	; 7
    3388:	22 0f       	add	r18, r18
    338a:	33 1f       	adc	r19, r19
    338c:	44 1f       	adc	r20, r20
    338e:	55 1f       	adc	r21, r21
    3390:	6a 95       	dec	r22
    3392:	d1 f7       	brne	.-12     	; 0x3388 <__unpack_f+0x54>
    3394:	83 e0       	ldi	r24, 0x03	; 3
    3396:	8c 93       	st	X, r24
    3398:	0d c0       	rjmp	.+26     	; 0x33b4 <__unpack_f+0x80>
    339a:	22 0f       	add	r18, r18
    339c:	33 1f       	adc	r19, r19
    339e:	44 1f       	adc	r20, r20
    33a0:	55 1f       	adc	r21, r21
    33a2:	12 96       	adiw	r26, 0x02	; 2
    33a4:	8d 91       	ld	r24, X+
    33a6:	9c 91       	ld	r25, X
    33a8:	13 97       	sbiw	r26, 0x03	; 3
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	13 96       	adiw	r26, 0x03	; 3
    33ae:	9c 93       	st	X, r25
    33b0:	8e 93       	st	-X, r24
    33b2:	12 97       	sbiw	r26, 0x02	; 2
    33b4:	20 30       	cpi	r18, 0x00	; 0
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	38 07       	cpc	r19, r24
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	48 07       	cpc	r20, r24
    33be:	80 e4       	ldi	r24, 0x40	; 64
    33c0:	58 07       	cpc	r21, r24
    33c2:	58 f3       	brcs	.-42     	; 0x339a <__unpack_f+0x66>
    33c4:	14 96       	adiw	r26, 0x04	; 4
    33c6:	2d 93       	st	X+, r18
    33c8:	3d 93       	st	X+, r19
    33ca:	4d 93       	st	X+, r20
    33cc:	5c 93       	st	X, r21
    33ce:	17 97       	sbiw	r26, 0x07	; 7
    33d0:	08 95       	ret
    33d2:	2f 3f       	cpi	r18, 0xFF	; 255
    33d4:	31 05       	cpc	r19, r1
    33d6:	79 f4       	brne	.+30     	; 0x33f6 <__unpack_f+0xc2>
    33d8:	41 15       	cp	r20, r1
    33da:	51 05       	cpc	r21, r1
    33dc:	61 05       	cpc	r22, r1
    33de:	71 05       	cpc	r23, r1
    33e0:	19 f4       	brne	.+6      	; 0x33e8 <__unpack_f+0xb4>
    33e2:	84 e0       	ldi	r24, 0x04	; 4
    33e4:	8c 93       	st	X, r24
    33e6:	08 95       	ret
    33e8:	64 ff       	sbrs	r22, 4
    33ea:	03 c0       	rjmp	.+6      	; 0x33f2 <__unpack_f+0xbe>
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	8c 93       	st	X, r24
    33f0:	12 c0       	rjmp	.+36     	; 0x3416 <__unpack_f+0xe2>
    33f2:	1c 92       	st	X, r1
    33f4:	10 c0       	rjmp	.+32     	; 0x3416 <__unpack_f+0xe2>
    33f6:	2f 57       	subi	r18, 0x7F	; 127
    33f8:	30 40       	sbci	r19, 0x00	; 0
    33fa:	13 96       	adiw	r26, 0x03	; 3
    33fc:	3c 93       	st	X, r19
    33fe:	2e 93       	st	-X, r18
    3400:	12 97       	sbiw	r26, 0x02	; 2
    3402:	83 e0       	ldi	r24, 0x03	; 3
    3404:	8c 93       	st	X, r24
    3406:	87 e0       	ldi	r24, 0x07	; 7
    3408:	44 0f       	add	r20, r20
    340a:	55 1f       	adc	r21, r21
    340c:	66 1f       	adc	r22, r22
    340e:	77 1f       	adc	r23, r23
    3410:	8a 95       	dec	r24
    3412:	d1 f7       	brne	.-12     	; 0x3408 <__unpack_f+0xd4>
    3414:	70 64       	ori	r23, 0x40	; 64
    3416:	14 96       	adiw	r26, 0x04	; 4
    3418:	4d 93       	st	X+, r20
    341a:	5d 93       	st	X+, r21
    341c:	6d 93       	st	X+, r22
    341e:	7c 93       	st	X, r23
    3420:	17 97       	sbiw	r26, 0x07	; 7
    3422:	08 95       	ret

00003424 <__fpcmp_parts_f>:
    3424:	1f 93       	push	r17
    3426:	dc 01       	movw	r26, r24
    3428:	fb 01       	movw	r30, r22
    342a:	9c 91       	ld	r25, X
    342c:	92 30       	cpi	r25, 0x02	; 2
    342e:	08 f4       	brcc	.+2      	; 0x3432 <__fpcmp_parts_f+0xe>
    3430:	47 c0       	rjmp	.+142    	; 0x34c0 <__fpcmp_parts_f+0x9c>
    3432:	80 81       	ld	r24, Z
    3434:	82 30       	cpi	r24, 0x02	; 2
    3436:	08 f4       	brcc	.+2      	; 0x343a <__fpcmp_parts_f+0x16>
    3438:	43 c0       	rjmp	.+134    	; 0x34c0 <__fpcmp_parts_f+0x9c>
    343a:	94 30       	cpi	r25, 0x04	; 4
    343c:	51 f4       	brne	.+20     	; 0x3452 <__fpcmp_parts_f+0x2e>
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	1c 91       	ld	r17, X
    3442:	84 30       	cpi	r24, 0x04	; 4
    3444:	99 f5       	brne	.+102    	; 0x34ac <__fpcmp_parts_f+0x88>
    3446:	81 81       	ldd	r24, Z+1	; 0x01
    3448:	68 2f       	mov	r22, r24
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	61 1b       	sub	r22, r17
    344e:	71 09       	sbc	r23, r1
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <__fpcmp_parts_f+0xac>
    3452:	84 30       	cpi	r24, 0x04	; 4
    3454:	21 f0       	breq	.+8      	; 0x345e <__fpcmp_parts_f+0x3a>
    3456:	92 30       	cpi	r25, 0x02	; 2
    3458:	31 f4       	brne	.+12     	; 0x3466 <__fpcmp_parts_f+0x42>
    345a:	82 30       	cpi	r24, 0x02	; 2
    345c:	b9 f1       	breq	.+110    	; 0x34cc <__fpcmp_parts_f+0xa8>
    345e:	81 81       	ldd	r24, Z+1	; 0x01
    3460:	88 23       	and	r24, r24
    3462:	89 f1       	breq	.+98     	; 0x34c6 <__fpcmp_parts_f+0xa2>
    3464:	2d c0       	rjmp	.+90     	; 0x34c0 <__fpcmp_parts_f+0x9c>
    3466:	11 96       	adiw	r26, 0x01	; 1
    3468:	1c 91       	ld	r17, X
    346a:	11 97       	sbiw	r26, 0x01	; 1
    346c:	82 30       	cpi	r24, 0x02	; 2
    346e:	f1 f0       	breq	.+60     	; 0x34ac <__fpcmp_parts_f+0x88>
    3470:	81 81       	ldd	r24, Z+1	; 0x01
    3472:	18 17       	cp	r17, r24
    3474:	d9 f4       	brne	.+54     	; 0x34ac <__fpcmp_parts_f+0x88>
    3476:	12 96       	adiw	r26, 0x02	; 2
    3478:	2d 91       	ld	r18, X+
    347a:	3c 91       	ld	r19, X
    347c:	13 97       	sbiw	r26, 0x03	; 3
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	82 17       	cp	r24, r18
    3484:	93 07       	cpc	r25, r19
    3486:	94 f0       	brlt	.+36     	; 0x34ac <__fpcmp_parts_f+0x88>
    3488:	28 17       	cp	r18, r24
    348a:	39 07       	cpc	r19, r25
    348c:	bc f0       	brlt	.+46     	; 0x34bc <__fpcmp_parts_f+0x98>
    348e:	14 96       	adiw	r26, 0x04	; 4
    3490:	8d 91       	ld	r24, X+
    3492:	9d 91       	ld	r25, X+
    3494:	0d 90       	ld	r0, X+
    3496:	bc 91       	ld	r27, X
    3498:	a0 2d       	mov	r26, r0
    349a:	24 81       	ldd	r18, Z+4	; 0x04
    349c:	35 81       	ldd	r19, Z+5	; 0x05
    349e:	46 81       	ldd	r20, Z+6	; 0x06
    34a0:	57 81       	ldd	r21, Z+7	; 0x07
    34a2:	28 17       	cp	r18, r24
    34a4:	39 07       	cpc	r19, r25
    34a6:	4a 07       	cpc	r20, r26
    34a8:	5b 07       	cpc	r21, r27
    34aa:	18 f4       	brcc	.+6      	; 0x34b2 <__fpcmp_parts_f+0x8e>
    34ac:	11 23       	and	r17, r17
    34ae:	41 f0       	breq	.+16     	; 0x34c0 <__fpcmp_parts_f+0x9c>
    34b0:	0a c0       	rjmp	.+20     	; 0x34c6 <__fpcmp_parts_f+0xa2>
    34b2:	82 17       	cp	r24, r18
    34b4:	93 07       	cpc	r25, r19
    34b6:	a4 07       	cpc	r26, r20
    34b8:	b5 07       	cpc	r27, r21
    34ba:	40 f4       	brcc	.+16     	; 0x34cc <__fpcmp_parts_f+0xa8>
    34bc:	11 23       	and	r17, r17
    34be:	19 f0       	breq	.+6      	; 0x34c6 <__fpcmp_parts_f+0xa2>
    34c0:	61 e0       	ldi	r22, 0x01	; 1
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	05 c0       	rjmp	.+10     	; 0x34d0 <__fpcmp_parts_f+0xac>
    34c6:	6f ef       	ldi	r22, 0xFF	; 255
    34c8:	7f ef       	ldi	r23, 0xFF	; 255
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <__fpcmp_parts_f+0xac>
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	70 e0       	ldi	r23, 0x00	; 0
    34d0:	cb 01       	movw	r24, r22
    34d2:	1f 91       	pop	r17
    34d4:	08 95       	ret

000034d6 <__divmodhi4>:
    34d6:	97 fb       	bst	r25, 7
    34d8:	09 2e       	mov	r0, r25
    34da:	07 26       	eor	r0, r23
    34dc:	0a d0       	rcall	.+20     	; 0x34f2 <__divmodhi4_neg1>
    34de:	77 fd       	sbrc	r23, 7
    34e0:	04 d0       	rcall	.+8      	; 0x34ea <__divmodhi4_neg2>
    34e2:	27 d0       	rcall	.+78     	; 0x3532 <__udivmodhi4>
    34e4:	06 d0       	rcall	.+12     	; 0x34f2 <__divmodhi4_neg1>
    34e6:	00 20       	and	r0, r0
    34e8:	1a f4       	brpl	.+6      	; 0x34f0 <__divmodhi4_exit>

000034ea <__divmodhi4_neg2>:
    34ea:	70 95       	com	r23
    34ec:	61 95       	neg	r22
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255

000034f0 <__divmodhi4_exit>:
    34f0:	08 95       	ret

000034f2 <__divmodhi4_neg1>:
    34f2:	f6 f7       	brtc	.-4      	; 0x34f0 <__divmodhi4_exit>
    34f4:	90 95       	com	r25
    34f6:	81 95       	neg	r24
    34f8:	9f 4f       	sbci	r25, 0xFF	; 255
    34fa:	08 95       	ret

000034fc <__divmodsi4>:
    34fc:	97 fb       	bst	r25, 7
    34fe:	09 2e       	mov	r0, r25
    3500:	05 26       	eor	r0, r21
    3502:	0e d0       	rcall	.+28     	; 0x3520 <__divmodsi4_neg1>
    3504:	57 fd       	sbrc	r21, 7
    3506:	04 d0       	rcall	.+8      	; 0x3510 <__divmodsi4_neg2>
    3508:	28 d0       	rcall	.+80     	; 0x355a <__udivmodsi4>
    350a:	0a d0       	rcall	.+20     	; 0x3520 <__divmodsi4_neg1>
    350c:	00 1c       	adc	r0, r0
    350e:	38 f4       	brcc	.+14     	; 0x351e <__divmodsi4_exit>

00003510 <__divmodsi4_neg2>:
    3510:	50 95       	com	r21
    3512:	40 95       	com	r20
    3514:	30 95       	com	r19
    3516:	21 95       	neg	r18
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	4f 4f       	sbci	r20, 0xFF	; 255
    351c:	5f 4f       	sbci	r21, 0xFF	; 255

0000351e <__divmodsi4_exit>:
    351e:	08 95       	ret

00003520 <__divmodsi4_neg1>:
    3520:	f6 f7       	brtc	.-4      	; 0x351e <__divmodsi4_exit>
    3522:	90 95       	com	r25
    3524:	80 95       	com	r24
    3526:	70 95       	com	r23
    3528:	61 95       	neg	r22
    352a:	7f 4f       	sbci	r23, 0xFF	; 255
    352c:	8f 4f       	sbci	r24, 0xFF	; 255
    352e:	9f 4f       	sbci	r25, 0xFF	; 255
    3530:	08 95       	ret

00003532 <__udivmodhi4>:
    3532:	aa 1b       	sub	r26, r26
    3534:	bb 1b       	sub	r27, r27
    3536:	51 e1       	ldi	r21, 0x11	; 17
    3538:	07 c0       	rjmp	.+14     	; 0x3548 <__udivmodhi4_ep>

0000353a <__udivmodhi4_loop>:
    353a:	aa 1f       	adc	r26, r26
    353c:	bb 1f       	adc	r27, r27
    353e:	a6 17       	cp	r26, r22
    3540:	b7 07       	cpc	r27, r23
    3542:	10 f0       	brcs	.+4      	; 0x3548 <__udivmodhi4_ep>
    3544:	a6 1b       	sub	r26, r22
    3546:	b7 0b       	sbc	r27, r23

00003548 <__udivmodhi4_ep>:
    3548:	88 1f       	adc	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	5a 95       	dec	r21
    354e:	a9 f7       	brne	.-22     	; 0x353a <__udivmodhi4_loop>
    3550:	80 95       	com	r24
    3552:	90 95       	com	r25
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	08 95       	ret

0000355a <__udivmodsi4>:
    355a:	a1 e2       	ldi	r26, 0x21	; 33
    355c:	1a 2e       	mov	r1, r26
    355e:	aa 1b       	sub	r26, r26
    3560:	bb 1b       	sub	r27, r27
    3562:	fd 01       	movw	r30, r26
    3564:	0d c0       	rjmp	.+26     	; 0x3580 <__udivmodsi4_ep>

00003566 <__udivmodsi4_loop>:
    3566:	aa 1f       	adc	r26, r26
    3568:	bb 1f       	adc	r27, r27
    356a:	ee 1f       	adc	r30, r30
    356c:	ff 1f       	adc	r31, r31
    356e:	a2 17       	cp	r26, r18
    3570:	b3 07       	cpc	r27, r19
    3572:	e4 07       	cpc	r30, r20
    3574:	f5 07       	cpc	r31, r21
    3576:	20 f0       	brcs	.+8      	; 0x3580 <__udivmodsi4_ep>
    3578:	a2 1b       	sub	r26, r18
    357a:	b3 0b       	sbc	r27, r19
    357c:	e4 0b       	sbc	r30, r20
    357e:	f5 0b       	sbc	r31, r21

00003580 <__udivmodsi4_ep>:
    3580:	66 1f       	adc	r22, r22
    3582:	77 1f       	adc	r23, r23
    3584:	88 1f       	adc	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	1a 94       	dec	r1
    358a:	69 f7       	brne	.-38     	; 0x3566 <__udivmodsi4_loop>
    358c:	60 95       	com	r22
    358e:	70 95       	com	r23
    3590:	80 95       	com	r24
    3592:	90 95       	com	r25
    3594:	9b 01       	movw	r18, r22
    3596:	ac 01       	movw	r20, r24
    3598:	bd 01       	movw	r22, r26
    359a:	cf 01       	movw	r24, r30
    359c:	08 95       	ret

0000359e <__prologue_saves__>:
    359e:	2f 92       	push	r2
    35a0:	3f 92       	push	r3
    35a2:	4f 92       	push	r4
    35a4:	5f 92       	push	r5
    35a6:	6f 92       	push	r6
    35a8:	7f 92       	push	r7
    35aa:	8f 92       	push	r8
    35ac:	9f 92       	push	r9
    35ae:	af 92       	push	r10
    35b0:	bf 92       	push	r11
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	ff 92       	push	r15
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	ca 1b       	sub	r28, r26
    35c8:	db 0b       	sbc	r29, r27
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	09 94       	ijmp

000035d6 <__epilogue_restores__>:
    35d6:	2a 88       	ldd	r2, Y+18	; 0x12
    35d8:	39 88       	ldd	r3, Y+17	; 0x11
    35da:	48 88       	ldd	r4, Y+16	; 0x10
    35dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    35de:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35e8:	b9 84       	ldd	r11, Y+9	; 0x09
    35ea:	c8 84       	ldd	r12, Y+8	; 0x08
    35ec:	df 80       	ldd	r13, Y+7	; 0x07
    35ee:	ee 80       	ldd	r14, Y+6	; 0x06
    35f0:	fd 80       	ldd	r15, Y+5	; 0x05
    35f2:	0c 81       	ldd	r16, Y+4	; 0x04
    35f4:	1b 81       	ldd	r17, Y+3	; 0x03
    35f6:	aa 81       	ldd	r26, Y+2	; 0x02
    35f8:	b9 81       	ldd	r27, Y+1	; 0x01
    35fa:	ce 0f       	add	r28, r30
    35fc:	d1 1d       	adc	r29, r1
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	ed 01       	movw	r28, r26
    360a:	08 95       	ret

0000360c <_exit>:
    360c:	f8 94       	cli

0000360e <__stop_program>:
    360e:	ff cf       	rjmp	.-2      	; 0x360e <__stop_program>
